<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT Learner</title>
  
  
  <link href="https://gcdd1993.github.io/atom.xml" rel="self"/>
  
  <link href="https://gcdd1993.github.io/"/>
  <updated>2021-06-19T15:18:16.376Z</updated>
  <id>https://gcdd1993.github.io/</id>
  
  <author>
    <name>Gcdd1993</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Dubbo中使用Kryo序列化协议</title>
    <link href="https://gcdd1993.github.io/p/34460/"/>
    <id>https://gcdd1993.github.io/p/34460/</id>
    <published>2020-12-09T03:43:12.000Z</published>
    <updated>2021-06-19T15:18:16.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kryo是什么？"><a href="#Kryo是什么？" class="headerlink" title="Kryo是什么？"></a>Kryo是什么？</h1><p>Kryo是用于Java的<strong>快速高效</strong>的二进制对象图序列化框架。</p><blockquote><p>该项目的目标是高速，小尺寸和易于使用的API。不管是将对象持久保存到文件、数据库还是通过网络传输时，都可以尝试Kryo。</p></blockquote><p>Kryo还可以执行自动的深浅复制/克隆。这是从对象到对象的直接复制，而不是从对象到字节的复制。</p><span id="more"></span><p>具体可以参考<a href="https://github.com/EsotericSoftware/kryo">Kryo官网</a></p><h1 id="在Dubbo中使用Kryo"><a href="#在Dubbo中使用Kryo" class="headerlink" title="在Dubbo中使用Kryo"></a>在Dubbo中使用Kryo</h1><blockquote><p>本文基于Dubbo版本2.7.8</p></blockquote><p>Dubbo支持非常多的序列化方式，如<code>hession2</code>、<code>avro</code>、<code>FST</code>等等，其中Dubbo官网推荐的序列化方式是<code>Kryo</code>，因为<code>Kryo</code>是一种非常成熟的序列化实现，已经在Twitter、Groupon、Yahoo以及多个著名开源项目（如Hive、Storm）中广泛的使用。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>在Dubbo中使用Kryo非常方便，首先引入依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决一些Kryo特殊序列化，https://github.com/magro/kryo-serializers</span></span><br><span class="line">implementation  <span class="string">&#x27;de.javakaffee:kryo-serializers:0.43&#x27;</span></span><br><span class="line"><span class="comment">// 高性能序列化框架, https://github.com/EsotericSoftware/kryo</span></span><br><span class="line">implementation <span class="string">&#x27;com.esotericsoftware:kryo:4.0.2&#x27;</span></span><br></pre></td></tr></table></figure><p>如果只是简单使用，引入<a href="https://github.com/EsotericSoftware/kryo">kryo</a>即可，如果要支持一些例如List接口，则需要引入<a href="https://github.com/magro/kryo-serializers">kryo-serializers</a>，它针对一些特殊类为Kryo做了适配。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在Dubbo中启用Kryo序列化方式，这里使用SpringBoot YML配置方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">serialization:</span> <span class="string">kryo</span></span><br><span class="line">    <span class="attr">optimizer:</span> <span class="string">org.hmwebframework.microservice.dubbo.serialize.SerializationOptimizerImpl</span></span><br></pre></td></tr></table></figure><p>其中<code>org.hmwebframework.microservice.dubbo.serialize.SerializationOptimizerImpl</code>是指定Kryo序列化类，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializationOptimizerImpl</span> <span class="keyword">implements</span> <span class="title">SerializationOptimizer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Class&gt; <span class="title">getSerializableClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Class&gt; classes = <span class="keyword">new</span> LinkedList&lt;Class&gt;();</span><br><span class="line">        classes.add(BidRequest.class);</span><br><span class="line">        classes.add(BidResponse.class);</span><br><span class="line">        classes.add(Device.class);</span><br><span class="line">        classes.add(Geo.class);</span><br><span class="line">        classes.add(Impression.class);</span><br><span class="line">        classes.add(SeatBid.class);</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这，Dubbo使用Kryo就已经OK了。</p><h2 id="为什么要定义SerializationOptimizer实现类？"><a href="#为什么要定义SerializationOptimizer实现类？" class="headerlink" title="为什么要定义SerializationOptimizer实现类？"></a>为什么要定义SerializationOptimizer实现类？</h2><p>首先我们分析下SerializationOptimizer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SerializationOptimizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get serializable classes</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> serializable classes</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    Collection&lt;Class&lt;?&gt;&gt; getSerializableClasses();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供了一个接口方法，用于获取序列化的java类型列表，在<code>DubboProtocol#optimizeSerialization</code>中被使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">optimizeSerialization</span><span class="params">(URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clazz = Thread.currentThread().getContextClassLoader().loadClass(className);</span><br><span class="line">        <span class="comment">// 判断是否为SerializationOptimizer实现类</span></span><br><span class="line">        <span class="keyword">if</span> (!SerializationOptimizer.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">&quot;The serialization optimizer &quot;</span> + className + <span class="string">&quot; isn&#x27;t an instance of &quot;</span> + SerializationOptimizer.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SerializationOptimizer optimizer = (SerializationOptimizer) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (optimizer.getSerializableClasses() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将SerializationOptimizer中定义的类型列表，注册到SerializableClassRegistry</span></span><br><span class="line">        <span class="keyword">for</span> (Class c : optimizer.getSerializableClasses()) &#123;</span><br><span class="line">            SerializableClassRegistry.registerClass(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        optimizers.add(className);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，从<code>SerializableClassRegistry</code>中拿出注册的类型，进行Kryo的类型注册，可以看到<code>SerializableClassRegistry#getRegisteredClasses</code>被FST和Kryo使用，证明FST和Kryo都需要进行序列化类的注册，当然FST也支持不注册序列化类型。<br><img data-src="https://i.loli.net/2020/12/09/OXdnskMZFKvjUHz.png"></p><p>Kryo类注册的具体细节，<code>AbstractKryoFactory#create</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">for</span> (Class clazz : registrations) &#123;</span><br><span class="line">    kryo.register(clazz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历取出SerializableClassRegistry的注册类，依次将类注册到Kryo</span></span><br><span class="line">SerializableClassRegistry.getRegisteredClasses().forEach((clazz, ser) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ser == <span class="keyword">null</span>) &#123;</span><br><span class="line">        kryo.register(clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        kryo.register(clazz, (Serializer) ser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>循环取出SerializableClassRegistry中的注册类进行注册，看到这里也能明白，为什么Dubbo官网的SerializationOptimizer例子需要使用LinkedList。</p><h1 id="为什么Kryo需要进行类的注册，且保持顺序？"><a href="#为什么Kryo需要进行类的注册，且保持顺序？" class="headerlink" title="为什么Kryo需要进行类的注册，且保持顺序？"></a>为什么Kryo需要进行类的注册，且保持顺序？</h1><h2 id="类的注册"><a href="#类的注册" class="headerlink" title="类的注册"></a>类的注册</h2><p>在Dubbo这样的RPC框架进行通信时，性能瓶颈往往在于RPC传输过程中的网络IO耗时，提升网络IO的办法，一是加大带宽，二是减小传输的字节数，而高性能序列化框架可以做到的就是减小传输的字节数。</p><p>Kryo注册类的时候，使用了一个int类型的ID来与类进行关联，在序列化该类的实例时，用int ID来标识类型，反序列化该类时，同样通过int ID来找到类型，这比写出类名高效的多。</p><h2 id="维持类注册顺序"><a href="#维持类注册顺序" class="headerlink" title="维持类注册顺序"></a>维持类注册顺序</h2><p>Kryo注册类的时候，可以指定类关联的int ID，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kryo kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line">kryo.register(SomeClass.class, <span class="number">10</span>);</span><br><span class="line">kryo.register(AnotherClass.class, <span class="number">11</span>);</span><br><span class="line">kryo.register(YetAnotherClass.class, <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>但是上面我们讲到，Dubbo对Kryo做了相当程度的集成，导致我们没法给类指定int ID，但是我们可以保证服务提供方和消费方类注册顺序的一致，间接地保证了int ID的一致性。</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="反射获取代注册的类"><a href="#反射获取代注册的类" class="headerlink" title="反射获取代注册的类"></a>反射获取代注册的类</h2><blockquote><p>在Dubbo中使用Kryo时，我们需要实现一个SerializationOptimizer，并提供一个注册类列表。随着项目规模扩大，不可能时时刻刻想着维护这个注册类列表，所以我们可以使用反射来自动获取这个注册类列表</p></blockquote><p>引入依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java反射工具包</span></span><br><span class="line">implementation <span class="string">&#x27;org.reflections:reflections:0.9.11&#x27;</span></span><br></pre></td></tr></table></figure><p>编写接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KryoDubboSerializable</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写SerializationOptimizer实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSerializationOptimizerImpl</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">SerializationOptimizer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; classList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractSerializationOptimizerImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reflections = <span class="keyword">new</span> Reflections(</span><br><span class="line">                <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                        .forPackages(basePackage())</span><br><span class="line">                        .addScanners(<span class="keyword">new</span> SubTypesScanner())</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.classList = reflections.getSubTypesOf(KryoDubboSerializable.class)</span><br><span class="line">                .stream()</span><br><span class="line">            <span class="comment">// Kryo序列化协议要求类注册顺序一致</span></span><br><span class="line">                .sorted(Comparator.comparing(Class::getSimpleName))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        log.info(<span class="string">&quot;load &#123;&#125; classes to use kryo serializable&quot;</span>, <span class="keyword">this</span>.classList.size());</span><br><span class="line">        log.debug(<span class="string">&quot;kryo serializable classes: &#123;&#125;&quot;</span>, <span class="keyword">this</span>.classList.stream().map(Class::getSimpleName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Class&lt;?&gt;&gt; getSerializableClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> classList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描包路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> packages</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String[] basePackage();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次使用时，只需要继承AbstractSerializationOptimizerImpl，并提供待注册包路径（支持多个），待注册的类需要实现KryoDubboSerializable接口，这是为了在一定程度上提升灵活性（如果不需要注册到Kryo，不实现该接口即可）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://dubbo.apache.org/zh/docs/v2.7/user/serialization/">https://dubbo.apache.org/zh/docs/v2.7/user/serialization/</a></li><li><a href="https://github.com/EsotericSoftware/kryo">https://github.com/EsotericSoftware/kryo</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Kryo是什么？&quot;&gt;&lt;a href=&quot;#Kryo是什么？&quot; class=&quot;headerlink&quot; title=&quot;Kryo是什么？&quot;&gt;&lt;/a&gt;Kryo是什么？&lt;/h1&gt;&lt;p&gt;Kryo是用于Java的&lt;strong&gt;快速高效&lt;/strong&gt;的二进制对象图序列化框架。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该项目的目标是高速，小尺寸和易于使用的API。不管是将对象持久保存到文件、数据库还是通过网络传输时，都可以尝试Kryo。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kryo还可以执行自动的深浅复制/克隆。这是从对象到对象的直接复制，而不是从对象到字节的复制。&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://gcdd1993.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>掘金解绑方案（已成功解绑微信）</title>
    <link href="https://gcdd1993.github.io/p/34461/"/>
    <id>https://gcdd1993.github.io/p/34461/</id>
    <published>2020-12-09T03:43:12.000Z</published>
    <updated>2021-06-19T15:18:16.378Z</updated>
    
    <content type="html"><![CDATA[<p>掘金的绑定限制为同一个第三方账号只能绑定一个掘金账号，且必须留存一个第三方绑定。</p><p>比如，我只绑定了微信，想要解绑微信，对不起，不支持。</p><p><img data-src="https://i.loli.net/2020/02/10/XqgsL2DYIkCoapr.png"></p><span id="more"></span><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我突然想到，既然必须留存一个第三方绑定，那我留存一个<strong>邮箱绑定</strong>不就好了吗？</p><p>思路就是<a href="https://temp-mail.org/zh/">临时电子邮件地址</a>，通过绑定一个邮箱账号，来绑定邮箱，从而将我们的账号解放出来，绑定我们的大号或者其他账号。</p><h2 id="获取临时电子邮件地址"><a href="#获取临时电子邮件地址" class="headerlink" title="获取临时电子邮件地址"></a>获取临时电子邮件地址</h2><p>打开<a href="https://temp-mail.org/zh/">临时电子邮件地址</a>，你将会获取到一个临时电子邮件地址，我们将使用这个邮件绑定我们的掘金账号。</p><p><img data-src="https://i.loli.net/2020/02/10/WU5CKnDcYlrwLZp.png"></p><h2 id="绑定临时邮箱"><a href="#绑定临时邮箱" class="headerlink" title="绑定临时邮箱"></a>绑定临时邮箱</h2><p>点击绑定邮箱，输入我们上一步获取到的临时邮件地址，返回<a href="https://temp-mail.org/zh/">临时电子邮件地址</a>网站，耐心等待10s左右。</p><p><img data-src="https://i.loli.net/2020/02/10/MCRXaSIbO2KTHfr.png"></p><p>你将会受到掘金的邮箱绑定验证邮件，打开并点击，直到绑定成功。</p><p><img data-src="https://i.loli.net/2020/02/10/sQpovuOjaEJwkbR.png"></p><h2 id="解绑"><a href="#解绑" class="headerlink" title="解绑"></a>解绑</h2><p>接下来我们就可以开心的解绑我们自己的账号了。我要解绑的是微信，试一下吧。</p><p><img data-src="https://i.loli.net/2020/02/10/GL2yaCp7AsWZQiT.png"></p><h1 id="友情提醒"><a href="#友情提醒" class="headerlink" title="友情提醒"></a>友情提醒</h1><blockquote><p>由于使用的是一次性邮件地址，该做法可能会导致你解绑的账号登录不上，请谨慎操作！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;掘金的绑定限制为同一个第三方账号只能绑定一个掘金账号，且必须留存一个第三方绑定。&lt;/p&gt;
&lt;p&gt;比如，我只绑定了微信，想要解绑微信，对不起，不支持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/10/XqgsL2DYIkCoapr.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="技巧" scheme="https://gcdd1993.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习笔记</title>
    <link href="https://gcdd1993.github.io/p/37757/"/>
    <id>https://gcdd1993.github.io/p/37757/</id>
    <published>2020-02-02T05:49:38.000Z</published>
    <updated>2021-06-19T15:18:16.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>Scala是一门优秀的编程语言，它是一门纯面向对象的语言，且支持函数式编程。</p><p>Scala运行于Jvm，所有Scala的代码，都需要经过编译为字节码，然后交由Java虚拟机来运行。<strong>Scala和Java是可以无缝互操作的。Scala可以任意调用Java的代码</strong>。</p><span id="more"></span><h1 id="安装Scala"><a href="#安装Scala" class="headerlink" title="安装Scala"></a>安装Scala</h1><ol><li><p>从Scala官方网站下载，<a href="http://www.scala-lang.org/download/%EF%BC%8Cwindows%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E6%98%AF%60scala-2.11.7.msi%60%E3%80%82">http://www.scala-lang.org/download/，windows版本的安装包是`scala-2.11.7.msi`。</a></p></li><li><p>使用下载下来的安装包安装Scala。</p></li><li><p>在PATH环境变量中，配置$SCALA_HOME/bin目录。</p></li></ol><p><img data-src="https://i.loli.net/2020/02/02/Zmrv5iPFe2N3hwu.png"></p><ol start="2"><li>在windows命令行内即可直接键入scala，打开scala命令行，进行scala编程。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ scala</span><br><span class="line">Welcome to Scala 2.11.12 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_231).</span><br><span class="line">Type <span class="keyword">in</span> expressions <span class="keyword">for</span> evaluation. Or try :<span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="Scala解释器的使用"><a href="#Scala解释器的使用" class="headerlink" title="Scala解释器的使用"></a>Scala解释器的使用</h2><h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><blockquote><p>scala解释器也被称为REPL，会快速编译scala代码为字节码，然后交给JVM来执行。</p></blockquote><p>Read（取值）-&gt; Evaluation（求值）-&gt; Print（打印）-&gt; Loop（循环）。</p><h3 id="计算表达式"><a href="#计算表达式" class="headerlink" title="计算表达式"></a>计算表达式</h3><blockquote><p>在scala&gt;命令行内，键入scala代码，解释器会直接返回结果给你。如果你没有指定变量来存放这个值，那么值默认的名称为res，而且会显示结果的数据类型，比如Int、Double、String等等。</p></blockquote><p>例如，输入1 + 1，会看到res0: Int = 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; 1 + 1</span><br><span class="line">res0: Int = 2</span><br></pre></td></tr></table></figure><h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><blockquote><p>在后面可以继续使用res这个变量，以及它存放的值。</p></blockquote><p>例如，2.0 * res0，返回res1: Double = 4.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; 2.0 * res0</span><br><span class="line">res1: Double = 4.0</span><br></pre></td></tr></table></figure><p>例如，”Hi, “ + res0，返回res2: String = Hi, 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="string">&quot;Hi, &quot;</span> + res0</span><br><span class="line">res2: String = Hi, 2</span><br></pre></td></tr></table></figure><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><blockquote><p>在scala&gt;命令行内，可以使用Tab键进行自动补全。</p></blockquote><p>例如，输入res2.to，敲击Tab键，解释器会显示出以下选项，toCharArray，toLowerCase，toString，toUpperCase。因为此时无法判定你需要补全的是哪一个，因此会提供给你所有的选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; res2.to</span><br><span class="line">to          toCharArray    toIterable    toMap ...</span><br></pre></td></tr></table></figure><p>例如，输入res2.toU，敲击Tab键，直接会给你补全为res2.toUpperCase。</p><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><h3 id="声明val变量"><a href="#声明val变量" class="headerlink" title="声明val变量"></a>声明val变量</h3><blockquote><p>可以声明val变量来存放表达式的计算结果。</p></blockquote><ul><li>例如，val result = 1 + 1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; val result = 1 + 1</span><br><span class="line">result: Int = 2</span><br></pre></td></tr></table></figure><ul><li>后续这些常量是可以继续使用的，例如，2 * result</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; 2 * result</span><br><span class="line">res6: Int = 4</span><br></pre></td></tr></table></figure><ul><li>但是常量声明后，是无法改变它的值的，例如，result = 1，会返回error: reassignment to val的错误信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; result = 1</span><br><span class="line">&lt;console&gt;:12: error: reassignment to val</span><br><span class="line">       result = 1</span><br><span class="line">              ^</span><br></pre></td></tr></table></figure><h3 id="声明var变量"><a href="#声明var变量" class="headerlink" title="声明var变量"></a>声明var变量</h3><blockquote><p>如果要声明值可以改变的引用，可以使用var变量。</p></blockquote><ul><li><p>例如，<code>val myresult = 1，myresult = 2</code></p></li><li><p>但是在Scala程序中，通常建议使用val，也就是常量，<strong>因此比如类似于spark的大型复杂系统中，需要大量的网络传输数据，如果使用var，可能会担心值被错误的更改。</strong></p></li><li><p>在Java的大型复杂系统的设计和开发中，也使用了类似的特性，我们通常会将传递给其他模块 / 组件 / 服务的对象，设计成不可变类（Immutable Class）。在里面也会使用Java的常量定义，比如final，阻止变量的值被改变。<strong>从而提高系统的健壮性（robust，鲁棒性），和安全性</strong>。</p></li></ul><h2 id="指定类型"><a href="#指定类型" class="headerlink" title="指定类型"></a>指定类型</h2><blockquote><p>无论声明val变量，还是声明var变量，都可以手动指定其类型，<strong>如果不指定的话，Scala会自动根据值，进行类型的推断</strong>。</p></blockquote><ul><li><p>例如，<code>val name: String = null</code></p></li><li><p>例如，<code>val name: Any = &quot;leo&quot;</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;Scala是一门优秀的编程语言，它是一门纯面向对象的语言，且支持函数式编程。&lt;/p&gt;
&lt;p&gt;Scala运行于Jvm，所有Scala的代码，都需要经过编译为字节码，然后交由Java虚拟机来运行。&lt;strong&gt;Scala和Java是可以无缝互操作的。Scala可以任意调用Java的代码&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Scala" scheme="https://gcdd1993.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>MacOs使用CleanMyMac X清除可清除空间</title>
    <link href="https://gcdd1993.github.io/p/46997/"/>
    <id>https://gcdd1993.github.io/p/46997/</id>
    <published>2019-10-11T10:41:15.000Z</published>
    <updated>2021-06-19T15:18:16.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文介绍如何使用<code>CleanMyMac X</code>清除可清除的空间</p><p><img data-src="https://i.loli.net/2019/10/11/GdSBlzQMhTfY2Ha.png"></p><span id="more"></span><p>可以看到，可清除的空间达到了125.79GB，虽然说不影响系统的使用，但是在使用时间机器进行备份的时候，仍然会将可清除空间当成备份的一部分，造成备份文件过大，首次备份时间过长。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>清除可清除空间，你只需要<strong>CleanMyMac X</strong>这个工具即可，我分享下我使用的版本，当然有能力的建议使用正版。</p><p><a href="https://pan.baidu.com/s/1L05kBwZIghM73IRC8rMpMw">https://pan.baidu.com/s/1L05kBwZIghM73IRC8rMpMw</a></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>安装完毕后，打开<strong>CleanMyMac X</strong></p><p><img data-src="https://i.loli.net/2019/10/11/E8BRFzlvLo4bcZU.png"></p><p>点击”维护“，你可以使用“<strong>释放可清除空间</strong>”或者是“<strong>时间机器快照瘦身</strong>”，我使用的是“时间机器快照瘦身”</p><div class="note warning"><p>建议先使用“时间机器快照瘦身”，如果不行，再释放可清除空间，因为释放可清除空间耗时较长</p></div><p><img data-src="https://i.loli.net/2019/10/11/VTihB8LqlUebrJY.png"></p><p>点击运行，稍作等待即可</p><p><img data-src="https://i.loli.net/2019/10/11/tUKvGurohTwY4fV.png"></p><p>这时候，我们回到磁盘工具，再次查看可清除空间，可以发现，可清除空间小了不少！</p><p><img data-src="https://i.loli.net/2019/10/11/fPV35Zvj8oznWqm.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;本文介绍如何使用&lt;code&gt;CleanMyMac X&lt;/code&gt;清除可清除的空间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/11/GdSBlzQMhTfY2Ha.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="macOs" scheme="https://gcdd1993.github.io/tags/macOs/"/>
    
  </entry>
  
  <entry>
    <title>TamperMonkey 使用指南以及脚本推荐</title>
    <link href="https://gcdd1993.github.io/p/29031/"/>
    <id>https://gcdd1993.github.io/p/29031/</id>
    <published>2019-10-07T12:56:20.000Z</published>
    <updated>2021-06-19T15:18:16.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>Chrome浏览器是最适合开发者使用的浏览器，不仅仅是因为Chrome对于Js的友好支持，更是由于Chrome支持丰富且功能强大的插件，扩展了浏览器的功能和使用体验。</p><p>在这些插件里面，相信你一定使用过<a href="https://www.tampermonkey.net/">TamperMonkey</a>，他可以让你加速下载百度网盘，跟百度限速说拜拜，也可以让你免费观看VIP影视和音乐，反正一句话，黑科技！</p><span id="more"></span><h1 id="TamperMonkey使用"><a href="#TamperMonkey使用" class="headerlink" title="TamperMonkey使用"></a>TamperMonkey使用</h1><p>TamperMonkey的官网是：<a href="https://www.tampermonkey.net,支持各类chrome内核的浏览器以及火狐浏览器(firefox)./">https://www.tampermonkey.net，支持各类Chrome内核的浏览器以及火狐浏览器（FireFox）。</a></p><div class="note info"><p>以下以Chrome浏览器为例。</p></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装非常简单，打开<a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN">Chrome商店</a>，点击”添加到Chrome”</p><p><img data-src="https://i.loli.net/2019/10/07/KqbsVxP5To4HdQC.png"></p><h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><ol><li>点击”获取新脚本”</li></ol><p><img data-src="https://i.loli.net/2019/10/07/XLHZqzFdVToacyE.png"></p><ol start="2"><li>选择合适的脚本源，这里推荐GreasyFork</li></ol><p><img data-src="https://i.loli.net/2019/10/07/gkvSFHfrldBV5pD.png"></p><ol start="3"><li>安装脚本，以VIP视频解析为例</li></ol><p><img data-src="https://i.loli.net/2019/10/07/yMhfdDBZJegvxE1.png"></p><p>我们点击第一个脚本（有时候会比较慢，请耐心等待下），点击”安装此脚本”</p><p><img data-src="https://i.loli.net/2019/10/07/z9NQ21heM4YXJpT.png"></p><p>点击安装</p><p><img data-src="https://i.loli.net/2019/10/07/Ffz6a1P7YehwcsS.png"></p><p>下面可以直接看到脚本的源码，有能力的话，可以自己修改或者编写脚本。</p><ol start="4"><li>看看脚本的效果</li></ol><p>我们打开爱奇艺，找个vip电影，比如最近热播的银河补习班</p><p><img data-src="https://i.loli.net/2019/10/07/bmUQz5aGqKrCu3L.png"></p><p><img data-src="https://i.loli.net/2019/10/07/Mqw8XZ1WeOpnYRA.png"></p><h1 id="TamperMonkey脚本推荐"><a href="#TamperMonkey脚本推荐" class="headerlink" title="TamperMonkey脚本推荐"></a>TamperMonkey脚本推荐</h1><p>在TamperMonkey的管理面板中，可以看到已经安装的所有脚本</p><p><img data-src="https://i.loli.net/2019/10/07/ctFHYj9ERJTg4eu.png"></p><p>下面列举出我常用的脚本</p><ul><li><p><a href="https://greasyfork.org/zh-CN/scripts/373956-52pojie%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%AE%BA%E5%9D%9B%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E5%8A%A9%E6%89%8B-%E5%85%8D%E6%89%93%E6%89%B0">52pojie吾爱破解论坛自动签到助手-免打扰</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/30117-%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%AE%BA%E5%9D%9B-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E9%93%BE%E6%8E%A5%E6%BF%80%E6%B4%BB-%E6%8F%90%E5%8F%96%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8">吾爱破解论坛-百度网盘链接激活-提取码自动补全</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2-%E5%8E%BB%E5%B9%BF%E5%91%8A-favicon-%E5%8F%8C%E5%88%97">ac-baidu-重定向优化百度搜狗谷歌搜索-去广告-favicon-双列</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/368418-ac-baidu-%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6-%E6%90%9C%E7%8B%97-%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B9%8B%E5%85%B3%E9%94%AE%E8%AF%8D%E8%87%AA%E5%8A%A8%E9%AB%98%E4%BA%AE">ac-baidu-优化百度-搜狗-谷歌搜索结果之关键词自动高亮</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/372452-csdn%E8%87%AA%E5%8A%A8%E5%B1%95%E5%BC%80-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%87%80%E5%8C%96%E5%89%AA%E8%B4%B4%E6%9D%BF-%E5%85%8D%E7%99%BB%E9%99%86">csdn自动展开-去广告-净化剪贴板-免登陆</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/384538-%E4%B8%80%E9%94%AEvip%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91-%E4%B8%80%E7%AB%99%E5%BC%8F%E9%9F%B3%E4%B9%90%E6%90%9C%E7%B4%A2%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%A6%BB%E7%BA%BF%E8%B7%B3%E8%BD%AC-%E8%8E%B7%E5%8F%96b%E7%AB%99%E5%B0%81%E9%9D%A2-%E6%B7%98%E5%AE%9D%E4%BA%AC%E4%B8%9C%E4%BC%98%E6%83%A0%E5%88%B8-2019-10-01-%E6%9B%B4%E6%96%B0-%E6%8A%A5%E9%94%99%E8%AF%B7%E5%8F%8A%E6%97%B6%E5%8F%8D%E9%A6%88">一键vip视频解析-去广告-全网-一站式音乐搜索下载-百度云离线跳转-获取b站封面-淘宝京东优惠券-2019-10-01-更新-报错请及时反馈</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/387360-%E5%9F%8E%E9%80%9A%E7%BD%91%E7%9B%98-%E7%9A%AE%E7%9A%AE%E7%9B%98-%E7%89%9B%E7%9B%98%E6%98%BE%E7%A4%BA%E6%AD%A3%E7%A1%AE%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">城通网盘-皮皮盘-牛盘显示正确下载地址</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/379893-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E6%A1%A3%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD-%E5%8E%9F%E6%96%87%E6%A1%A3-%E8%BD%AC%E6%8D%A2%E6%8F%90%E5%8F%96%E6%96%87%E6%A1%A3-%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9%E8%87%AA%E7%94%B1%E5%A4%8D%E5%88%B6-%E7%A7%BB%E9%99%A4%E5%B9%BF%E5%91%8A-%E8%B1%86%E4%B8%81%E7%BD%91%E6%96%87%E6%A1%A3%E4%B8%8B%E8%BD%BD-%E8%A7%A3%E9%99%A4%E5%A4%A7%E9%83%A8%E5%88%86%E7%BD%91%E7%AB%99%E6%93%8D%E4%BD%9C%E9%99%90%E5%88%B6-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E5%9C%A8%E7%BA%BF%E7%9C%8B-%E6%94%AF%E6%8C%81%E7%94%B5%E8%A7%86%E5%89%A7%E5%85%8D%E8%B7%B3%E5%87%BA%E9%80%89%E9%9B%86">百度文库文档免费下载-原文档-转换提取文档-文档内容自由复制-移除广告-豆丁网文档下载-解除大部分网站操作限制-全网vip视频免费在线看-支持电视剧免跳出选集</a></p></li><li><p><a href="https://github.com/syhyz1990/baiduyun">百度网盘直链下载助手</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/384172-%E7%9F%A5%E4%B9%8E%E7%BD%91%E9%A1%B5%E5%8A%A9%E6%89%8B-5%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E4%BA%8E%E4%B8%80%E8%BA%AB">知乎网页助手-5大功能集于一身</a></p></li><li><p><a href="https://greasyfork.org/zh-CN/scripts/26992-%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B">贴吧全能助手</a></p></li></ul><h1 id="TamperMonkey脚本同步"><a href="#TamperMonkey脚本同步" class="headerlink" title="TamperMonkey脚本同步"></a>TamperMonkey脚本同步</h1><p>TamperMonkey提供了非常方便的方法让我们同步脚本，从而避免每次安装都要重新安装脚本的烦恼。</p><p><img data-src="https://i.loli.net/2019/10/07/yRtBhKbsLzGdTXP.png"></p><ol><li>进入TamperMonkey插件设置页</li><li>配置模式选择”初学者”</li><li>勾选”启用 TESLA”，类型选择”浏览器同步”</li><li>点击保存</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;Chrome浏览器是最适合开发者使用的浏览器，不仅仅是因为Chrome对于Js的友好支持，更是由于Chrome支持丰富且功能强大的插件，扩展了浏览器的功能和使用体验。&lt;/p&gt;
&lt;p&gt;在这些插件里面，相信你一定使用过&lt;a href=&quot;https://www.tampermonkey.net/&quot;&gt;TamperMonkey&lt;/a&gt;，他可以让你加速下载百度网盘，跟百度限速说拜拜，也可以让你免费观看VIP影视和音乐，反正一句话，黑科技！&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Chrome" scheme="https://gcdd1993.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>MacOs科学上网</title>
    <link href="https://gcdd1993.github.io/p/709/"/>
    <id>https://gcdd1993.github.io/p/709/</id>
    <published>2019-10-06T15:47:37.000Z</published>
    <updated>2021-06-19T15:18:16.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前使用Windows的时候，有非常优秀的全局代理软件<a href="https://www.sockscap64.com/forums/forum/sstap/">SSTap</a>用来翻墙，但是到了MacOs上，没有找到类似SSTap的全局翻墙神器。</p><p>最终采取的方案是<a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG R8</a>+<a href="">Proxifier</a>的方式来实现。</p><span id="more"></span><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="ShadowsocksX-NG-R8"><a href="#ShadowsocksX-NG-R8" class="headerlink" title="ShadowsocksX-NG R8"></a>ShadowsocksX-NG R8</h2><blockquote><p>ShadowsocksX-NG是Mac下的SSR工具，具有和Windows下同样的体验，使用起来也非常方便，支持服务器订阅。</p></blockquote><p><img data-src="https://i.loli.net/2019/10/06/FZbVImyYedEHQvl.png"></p><p>配置就不多说了，唯一要注意的是，Socks5的监听地址是：<code>127.0.0.1:1086</code>，这个我们一会要用到。</p><p><img data-src="https://i.loli.net/2019/10/07/cCX4p8debKNvYrG.png"></p><h2 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h2><blockquote><p>Proxifier是Mac下的全局代理工具，可以将流量统统都转到代理上，配合ShadowsocksX-NG，我们很轻松的就可以实现全局翻墙</p></blockquote><p>软件本身是收费的，当然了，在<code>Xclient.info</code>上可以找到破解版：<a href="https://xclient.info/s/proxifier.html">https://xclient.info/s/proxifier.html</a></p><p>安装完毕之后，我们只需要简单的配置一下，就可以实现全局科学上网了！</p><h2 id="添加Socks5代理"><a href="#添加Socks5代理" class="headerlink" title="添加Socks5代理"></a>添加Socks5代理</h2><ol><li>点击Proxies</li></ol><p><img data-src="https://i.loli.net/2019/10/07/tebRvEfDKZN16JA.png"></p><ol start="2"><li>点击Add，添加代理</li></ol><p><img data-src="https://i.loli.net/2019/10/07/iLXBoKFwah4HuWP.png"></p><ol start="3"><li>添加完毕后，回到主界面，点击Rules，修改默认规则，将动作指向我们新添加的Socks5代理</li></ol><p><img data-src="https://i.loli.net/2019/10/07/JRd6ekxHYwan4um.png"></p><ol start="4"><li>测试</li></ol><p>打开ITerm2测试下，在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl www.google.com</span><br></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2019/10/07/xEgSoUw9Bk6ODT5.png"></p><p>同时，Proxifier也打印出了ITerm2的流量信息</p><p><img data-src="https://i.loli.net/2019/10/07/WNVMbpnF3OiZmkQ.png"></p><p>另外，Proxifier也支持指定软件走代理，具体步骤如下</p><ol><li>在Rules标签中点击Add，新建一个规则</li></ol><p><img data-src="https://i.loli.net/2019/10/07/u2keChKzrvGdoZF.png"></p><ol start="2"><li>添加完成后勾选使用，同时，不要忘记把Default规则的动作设置为Direct，不然的话，还是全局都走代理的。</li></ol><p><img data-src="https://i.loli.net/2019/10/07/6z2jaPkOGN4QVnc.png"></p><h1 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h1><ul><li>ShadowsocksX-NG：链接:<a href="https://pan.baidu.com/s/10i6PZZIParFRkvaVu5KhxA">https://pan.baidu.com/s/10i6PZZIParFRkvaVu5KhxA</a>  密码:jvzx</li><li>Proxifier：链接:<a href="https://pan.baidu.com/s/1ymZZRDJrjrIXXFrYfIxV_w">https://pan.baidu.com/s/1ymZZRDJrjrIXXFrYfIxV_w</a>  密码:exns</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前使用Windows的时候，有非常优秀的全局代理软件&lt;a href=&quot;https://www.sockscap64.com/forums/forum/sstap/&quot;&gt;SSTap&lt;/a&gt;用来翻墙，但是到了MacOs上，没有找到类似SSTap的全局翻墙神器。&lt;/p&gt;
&lt;p&gt;最终采取的方案是&lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG&quot;&gt;ShadowsocksX-NG R8&lt;/a&gt;+&lt;a href=&quot;&quot;&gt;Proxifier&lt;/a&gt;的方式来实现。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://gcdd1993.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="科学上网" scheme="https://gcdd1993.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Dell 工作站M4800 安装macOs Mojave</title>
    <link href="https://gcdd1993.github.io/p/62106/"/>
    <id>https://gcdd1993.github.io/p/62106/</id>
    <published>2019-10-01T01:43:12.000Z</published>
    <updated>2021-06-19T15:18:16.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近，入手了一台二手Dell工作站M4800，价格为3600，配置如下</p><p><img data-src="https://i.loli.net/2019/10/01/Fhne1JBNAqUXGmM.png"></p><span id="more"></span><p>个人感觉还是很好用的，配置够用，关键是用料真的足！虽然是16年的机器，但是做工吊打一众游戏本。</p><p>然后，重点来了，我安装上了黑苹果macOs Mojave，等于说花了3600买了台MBP，而且是非常的高配。</p><p><img data-src="https://i.loli.net/2019/10/01/dUagmkJoTqQic5P.png"></p><p><img data-src="https://i.loli.net/2019/10/01/YqyRE68VKmMgtSe.png"></p><p>目前使用上基本完美，除了无线网卡（买了免驱内置无线网卡在路上），HDMI（暂时不怎么用，不过不是无解）。</p><h1 id="黑苹果安装记录"><a href="#黑苹果安装记录" class="headerlink" title="黑苹果安装记录"></a>黑苹果安装记录</h1><blockquote><p>以下内容仅作记录，不保证能安装成功。</p></blockquote><p>安装教程都大差不差，主要是要找到适用机型的EFI文件，然后替换就可以，当然了，如果你有能力，可以自己适配EFI，然后贡献给大家👍👍👍。</p><p>如果机型跟我一致，可以使用我整理好的：<a href="https://github.com/gcdd1993/Dell-M4800-Hackintosh">https://github.com/gcdd1993/Dell-M4800-Hackintosh</a></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><blockquote><p>我也是小白，不班门弄斧，放上我装的时候的参考链接，照着装，一般都能搞定</p></blockquote><ul><li><a href="https://zhih.me/hackintosh-install-guide/">单硬盘单系统（推荐）</a></li><li><a href="http://ju.outofmemory.cn/entry/369297">单硬盘双系统（不推荐，可能出现各种各样的问题）</a></li></ul><div class="note warning"><p>启动U盘装好后，不要忘记替换适配机型的EFI </p></div><p>然后正式进入黑苹果的安装。</p><h2 id="修改BIOS设置（开机按F2）"><a href="#修改BIOS设置（开机按F2）" class="headerlink" title="修改BIOS设置（开机按F2）"></a>修改BIOS设置（开机按F2）</h2><ul><li><p>Advanced Boot Options = Enable Legacy</p></li><li><p>Integrated NIC = Enable</p></li><li><p>Parallel Ports = AT</p></li><li><p>Serial Ports = Disabled ( If you are using Dock station then Enable it - Expermental )</p></li><li><p>Sata Operation = AHCI</p></li><li><p>Drivers = Check all</p></li><li><p>Switchable Graphics = Enable Switchable Graphics</p></li><li><p>Secure Boot = Disabled</p></li><li><p>Virtualization = Disable</p></li></ul><p>完成后退出重启</p><h2 id="重启选择从U盘启动（开机按F12）"><a href="#重启选择从U盘启动（开机按F12）" class="headerlink" title="重启选择从U盘启动（开机按F12）"></a>重启选择从U盘启动（开机按F12）</h2><p>按照教程，抹盘–安装–进入系统</p><p>要注意的是，安装会经历3次重启</p><ul><li>第一次是安装剩余2分钟的时候，这里要选择<strong>硬盘启动（Clover界面会出现Boot install macos from 硬盘分区名）</strong>，如果你选了U盘启动，那就要再来一次了。</li><li>第二次重启，还是选择硬盘启动</li><li>第三次重启，可以选择<strong>Boot macos from 硬盘分区名</strong>，启动macOs了</li></ul><p>成功进入系统后，执行最后一步，也是最重要的一步，那就是安装驱动</p><h2 id="替换驱动文件"><a href="#替换驱动文件" class="headerlink" title="替换驱动文件"></a>替换驱动文件</h2><p>这里要用到<a href="https://pan.baidu.com/s/1yFDn_w5y2pdC5EYhhB7Y_w">Clover Configurator</a>密码:zcyj</p><ul><li>打开Clover Configurator，选择挂载分区，然后打开分区</li></ul><p><img data-src="https://i.loli.net/2019/10/01/HMcTaAL9jCvGUEN.png"></p><ul><li>替换EFI文件夹（先移除原先的，将大佬们提供的EFI复制进去）</li></ul><p><img data-src="https://i.loli.net/2019/10/01/uNq51A3lDJMpx2d.png"></p><ul><li>替换驱动文件（kexts）</li></ul><p><img data-src="https://i.loli.net/2019/10/01/49IG2XpBxtQWdOR.png"></p><p><img data-src="https://i.loli.net/2019/10/01/wmtiFH9qBCfQWpv.png"></p><p>最后重启试下吧，可以摆脱U盘了</p><h1 id="Clover主题修改"><a href="#Clover主题修改" class="headerlink" title="Clover主题修改"></a>Clover主题修改</h1><p>黑苹果每次开机都会进入Clover引导界面，但是默认的Clover主题是黑黑的，丑丑的，所以我们要替换掉，换一个高大上的引导界面。</p><p>这里推荐工具<a href="https://mac.softpedia.com/get/System-Utilities/Clover-Theme-Manager.shtml">CloverThemeManager</a></p><p><img data-src="https://i.loli.net/2019/10/01/FqUTSyxY3QncR2H.png"></p><p><img data-src="https://i.loli.net/2019/10/01/ZKd3kNiwYc4EnWz.png"></p><hr><h1 id="WIFI"><a href="#WIFI" class="headerlink" title="WIFI"></a>WIFI</h1><p>网卡已安装上，使用的是BCM43224，不带蓝牙，免驱，淘宝25块钱左右，mSata接口，使用无异常。</p><p><img data-src="https://i.loli.net/2019/10/11/Q1Wzw83uKBlkaod.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zuiyu1818.cn/posts/Hac_Clover.html">Clover 更新和界面美化</a></li><li><a href="https://osxlatitude.com/forums/topic/11182-final-dell-precision-m6800-m4800-fully-working-high-sierra-or-mojave/">macOs Mojave on M4800</a></li><li><a href="https://github.com/daliansky/Hackintosh">Hackintosh黑苹果长期维护机型EFI及安装教程整理</a></li><li><a href="https://www.chajian110.com/97.html">Mojave硬件支持列表（持续更新中）</a></li><li><a href="https://zhih.me/hackintosh-install-guide/">黑苹果安装教程</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近，入手了一台二手Dell工作站M4800，价格为3600，配置如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/01/Fhne1JBNAqUXGmM.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="黑苹果" scheme="https://gcdd1993.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringJpa CRUD代码生成器</title>
    <link href="https://gcdd1993.github.io/p/30009/"/>
    <id>https://gcdd1993.github.io/p/30009/</id>
    <published>2019-09-10T16:34:19.000Z</published>
    <updated>2021-06-19T15:18:16.371Z</updated>
    
    <content type="html"><![CDATA[<p>利用业余时间撸了一个Spring Jpa代码生成器<a href="https://github.com/gcdd1993/jpa-codegen">jpa-codegen</a>。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一款基于<code>Freemarker</code>模板驱动的代码生成器。</p><p>依据现有的实体类代码，自动生成CRUD代码，解放双手，加快开发速度。</p><p>生成的代码包括但不仅限于（可以自定义生成模块）</p><span id="more"></span><ul><li>Form表单代码</li><li>Repository代码</li><li>Service代码</li><li>Controller代码</li></ul><h1 id="SpringBoot使用示例"><a href="#SpringBoot使用示例" class="headerlink" title="SpringBoot使用示例"></a>SpringBoot使用示例</h1><p>克隆<a href="https://github.com/gcdd1993/jpa-codegen-sample">示例项目</a>，体会解放双手的美妙感受！</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">    url <span class="string">&#x27;https://dl.bintray.com/gcdd1993/maven&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// jpa code generator</span></span><br><span class="line">    testCompile <span class="string">&#x27;io.github.gcdd1993:jpa-codegen:v1.0.1&#x27;</span></span><br><span class="line">    testCompile <span class="string">&#x27;org.freemarker:freemarker:2.3.28&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置代码生成器"><a href="#配置代码生成器" class="headerlink" title="配置代码生成器"></a>配置代码生成器</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 作者</span></span><br><span class="line"><span class="attr">author</span>=<span class="string">gcdd1993</span></span><br><span class="line"><span class="comment">## 代码注释</span></span><br><span class="line"><span class="attr">comments</span>=<span class="string">code generated by jpa-codegen</span></span><br><span class="line"><span class="comment">## 是否覆盖原文件，除非特殊情况，不然请不要覆盖</span></span><br><span class="line"><span class="attr">cover</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">## 代码模板目录</span></span><br><span class="line"><span class="meta">template.dir</span>=<span class="string">src/test/resources/template/</span></span><br><span class="line"><span class="comment">## 实体类包名 Deprecated从v1.0.1开始从配置文件中移除</span></span><br><span class="line"><span class="meta">-</span> <span class="string">entity.package=com.maxtropy.sample.entity</span></span><br><span class="line"><span class="comment">## 实体类标识符 Deprecated从v1.0.1开始从配置文件中移除</span></span><br><span class="line"><span class="meta">-</span> <span class="string">entity.flag=entity</span></span><br><span class="line"><span class="comment">## 以下配置是模块配置(格式 模块名.配置名)，必须在模板目录下提供与模块名相同的模板</span></span><br><span class="line"><span class="comment">## 生成的代码后缀</span></span><br><span class="line"><span class="meta">repository.suffix</span>=<span class="string">Repository</span></span><br><span class="line"><span class="comment">## 模板名称</span></span><br><span class="line"><span class="meta">repository.template</span>=<span class="string">repository.ftl</span></span><br><span class="line"><span class="comment">## 模块标识符</span></span><br><span class="line"><span class="meta">repository.flag</span>=<span class="string">entity.repo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">service.suffix</span>=<span class="string">Service</span></span><br><span class="line"><span class="meta">service.template</span>=<span class="string">service.ftl</span></span><br><span class="line"><span class="meta">service.flag</span>=<span class="string">service</span></span><br><span class="line"><span class="meta">form.suffix</span>=<span class="string">Form</span></span><br><span class="line"><span class="meta">form.template</span>=<span class="string">form.ftl</span></span><br><span class="line"><span class="meta">form.flag</span>=<span class="string">form</span></span><br><span class="line"><span class="meta">controller.suffix</span>=<span class="string">Controller</span></span><br><span class="line"><span class="meta">controller.template</span>=<span class="string">controller.ftl</span></span><br><span class="line"><span class="meta">controller.flag</span>=<span class="string">web</span></span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">repository.suffix</span>=<span class="string">Repository</span></span><br><span class="line"><span class="meta">repository.template</span>=<span class="string">repository.ftl</span></span><br><span class="line"><span class="meta">repository.flag</span>=<span class="string">entity.repo</span></span><br></pre></td></tr></table></figure><p>是模块配置，<a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E5%9D%97%EF%BC%9F">什么是模块？</a></p><h2 id="编写代码模板"><a href="#编写代码模板" class="headerlink" title="编写代码模板"></a>编写代码模板</h2><p>模板主要基于<code>Freemarker</code>，如<code>Spring Boot2.x</code>代码模板可以像下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;packageName&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;entity.packageName&#125;.$&#123;entity.className&#125;;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.querydsl.QuerydslPredicateExecutor;</span><br><span class="line">&lt;#list imports as <span class="keyword">import</span>&gt;</span><br><span class="line"><span class="keyword">import</span> $&#123;<span class="keyword">import</span>&#125;;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * repository for $&#123;entity.className&#125; generated by jpa-codegen</span></span><br><span class="line"><span class="comment"> * $&#123;comments&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;author&#125;</span></span><br><span class="line"><span class="comment"> * Created On $&#123;date&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> $</span>&#123;className&#125; extends JpaRepository&lt;$&#123;entity.className&#125;, $&#123;entity.id.className&#125;&gt;, QuerydslPredicateExecutor&lt;$&#123;entity.className&#125;&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://github.com/gcdd1993/jpa-codegen/tree/master/src/main/resources/template/spring2">Spring Boot 2.x模板</a></p></li><li><p><a href="#%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%A8%A1%E6%9D%BF">如何编写模板?</a></p></li></ul><h2 id="编写生成器入口"><a href="#编写生成器入口" class="headerlink" title="编写生成器入口"></a>编写生成器入口</h2><p>在test模块中编写生成器入口，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codegen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> CodeGenerator(<span class="string">&quot;src/test/resources/codegen.properties&quot;</span>)</span><br><span class="line">                .registerRender(<span class="string">&quot;repository&quot;</span>)</span><br><span class="line">                .generate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行<code>generate()</code>，在项目目录下将会生成</p><p><img data-src="https://i.imgur.com/WTg4qMx.png" alt="Imgur"></p><p><img data-src="https://i.imgur.com/yJJ1d59.png" alt="Imgur"></p><p>生成的代码完全由模板以及实体类信息决定。</p><h1 id="如何编写模板？"><a href="#如何编写模板？" class="headerlink" title="如何编写模板？"></a>如何编写模板？</h1><p>模板完全基于<code>FreeMarker</code>以及实体类信息，<code>FreeMarker</code>参考<a href="https://freemarker.apache.org/docs/index.html">FreeMarker Docs</a></p><p>支持的元素定义如下</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th>Freemarker元素</th><th>解释</th><th>示例输出</th></tr></thead><tbody><tr><td><code>$&#123;ftlName&#125;</code></td><td>模板名称</td><td><code>controller.ftl</code></td></tr><tr><td><code>$&#123;ftlPath&#125;</code></td><td>模板目录</td><td><code>src/main/resources/template/</code></td></tr><tr><td><code>$&#123;savePath&#125;</code></td><td>保存路径</td><td><code>src/main/resources/io/github/gcdd1993/controller</code></td></tr><tr><td><code>$&#123;packageName&#125;</code></td><td>java文件包名</td><td><code>io.github.gcdd1993.controller</code></td></tr><tr><td><code>$&#123;className&#125;</code></td><td>java文件类名</td><td><code>UserController</code></td></tr><tr><td><code>$&#123;author&#125;</code></td><td>作者</td><td><code>gaochen</code></td></tr><tr><td><code>$&#123;date&#125;</code></td><td>创建日期，默认为当前日期</td><td><code>2019/6/23</code></td></tr><tr><td><code>$&#123;comments&#125;</code></td><td>注释信息</td><td><code>generated by jpa-codegen</code></td></tr><tr><td><code>$&#123;imports&#125;</code></td><td>java文件引入信息</td><td><code>org.springframework.beans.factory.annotation.Autowired</code></td></tr></tbody></table><h2 id="实体信息"><a href="#实体信息" class="headerlink" title="实体信息"></a>实体信息</h2><table><thead><tr><th>Freemarker元素</th><th>解释</th><th>示例输出</th></tr></thead><tbody><tr><td><code>$&#123;entity.className&#125;</code></td><td>实体类名，<code>class.getSimpleName()</code></td><td>User</td></tr><tr><td><code>$&#123;entity.packageName&#125;</code></td><td>实体包名，<code>class.getPackage().getName()</code></td><td>io.github.gcdd1993</td></tr><tr><td><code>$&#123;entity.tableName&#125;</code></td><td>实体表名，<code>@Table(name=&quot;&quot;)</code></td><td>sys_user</td></tr><tr><td><code>$&#123;entity.id.className&#125;</code></td><td>实体主键类名，<code>@Id</code>注释的字段的类名</td><td>Integer</td></tr><tr><td><code>$&#123;entity.id.packageName&#125;</code></td><td>实体主键包名，<code>@Id</code>注释的字段的包名</td><td>java.lang</td></tr><tr><td><code>$&#123;entity.fields.className&#125;</code></td><td>实体所有字段（只支持基本类型）类名</td><td>String</td></tr><tr><td><code>$&#123;entity.fields.packageName&#125;</code></td><td>实体所有字段（只支持基本类型）包名</td><td>java.lang</td></tr><tr><td><code>$&#123;entity.fields.name&#125;</code></td><td>实体所有字段（只支持基本类型）属性名</td><td>name</td></tr><tr><td><code>$&#123;entity.fields.annotations.className&#125;</code></td><td>实体所有字段注解的类名</td><td>Id</td></tr><tr><td><code>$&#123;entity.fields.annotations.packageName&#125;</code></td><td>实体所有字段注解的包名</td><td>javax.persistence</td></tr></tbody></table><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>除了以上默认的信息之外，可能会有额外的信息需要填入生成的代码中，jpa-codegen提供直接将配置文件中的配置渲染到模板的能力。</p><p>例如在配置文件<code>autogen.properties</code>写下一行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">custom.additional.comment</span>=<span class="string">this is additional comment</span></span><br></pre></td></tr></table></figure><p>在模板中可以使用<code>$&#123;otherParams.additional_comment&#125;</code>获取到该配置。</p><p>要注意的是：自定义配置<strong>使用<code>custom</code>开头</strong>，后面的**配置会将.替换为_**作为<code>FreeMarker</code>模板的key，例如上述的<code>additional.comment</code>使用<code>$&#123;otherParams.additional_comment&#125;</code>获取。</p><h1 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h1><p>由于代码千变万化，为了尽可能的做到通用性，<a href="https://github.com/gcdd1993/jpa-codegen">jpa-codegen</a>将每一种类型的代码抽象为模块，每一个模块将使用各自的模板，依照实体信息生成代码。</p><p>需要为模板配置一下信息：</p><ul><li>repository.suffix=Repository</li></ul><p>模块类名后缀，生成的类名规则由<strong>实体类名+后缀构成</strong></p><ul><li>repository.template=repository.ftl</li></ul><p>模块使用的<code>Freemarker</code>模板</p><ul><li>repository.flag=entity.repo</li></ul><p>模块标识符，生成的代码包名由<strong>实体类将实体标识符替换为模块标识符</strong>来确认。</p><p>如</p><ul><li>实体包名：<code>io.github.gcdd1993.entity</code></li><li>实体标识符：<code>entity</code></li><li>模块标识符：<code>entity.repo</code></li></ul><p>则生成的<code>repository</code>代码包名为  –&gt; <code>io.github.gcdd1993.entity.repo</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用业余时间撸了一个Spring Jpa代码生成器&lt;a href=&quot;https://github.com/gcdd1993/jpa-codegen&quot;&gt;jpa-codegen&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这是一款基于&lt;code&gt;Freemarker&lt;/code&gt;模板驱动的代码生成器。&lt;/p&gt;
&lt;p&gt;依据现有的实体类代码，自动生成CRUD代码，解放双手，加快开发速度。&lt;/p&gt;
&lt;p&gt;生成的代码包括但不仅限于（可以自定义生成模块）&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://gcdd1993.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu禁用root账号，开启Ubuntu密钥登录</title>
    <link href="https://gcdd1993.github.io/p/46186/"/>
    <id>https://gcdd1993.github.io/p/46186/</id>
    <published>2019-09-10T04:08:44.000Z</published>
    <updated>2021-06-19T15:18:16.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建普通用户"><a href="#新建普通用户" class="headerlink" title="新建普通用户"></a>新建普通用户</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 新建普通用户</span></span><br><span class="line">$ adduser ubuntu</span><br><span class="line">$ apt-get install sudo</span><br><span class="line"><span class="comment">## 将用户加入sudo组</span></span><br><span class="line">$ usermod -a -G sudo ubuntu</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="为普通用户添加公钥"><a href="#为普通用户添加公钥" class="headerlink" title="为普通用户添加公钥"></a>为普通用户添加公钥</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ su ubuntu</span><br><span class="line">$ mkdir -p ~/.ssh</span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="comment">## 添加公钥</span></span><br><span class="line">$ touch authorized_keys</span><br><span class="line">$ cat <span class="string">&#x27;你的公钥字符串&#x27;</span> &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line">$ chmod 600 authorized_keys</span><br><span class="line">$ chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure><h1 id="设置-SSH，打开密钥登录"><a href="#设置-SSH，打开密钥登录" class="headerlink" title="设置 SSH，打开密钥登录"></a>设置 SSH，打开密钥登录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line"><span class="comment">## 禁用root账号登录</span></span><br><span class="line">PermitRootLogin no</span><br><span class="line"><span class="comment">## 禁用密码登录</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"></span><br><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;新建普通用户&quot;&gt;&lt;a href=&quot;#新建普通用户&quot; class=&quot;headerlink&quot; title=&quot;新建普通用户&quot;&gt;&lt;/a&gt;新建普通用户&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 新建普通用户&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ adduser ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ apt-get install sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 将用户加入sudo组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ usermod -a -G sudo ubuntu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Ubuntu" scheme="https://gcdd1993.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（四）工厂方法模式</title>
    <link href="https://gcdd1993.github.io/p/30626/"/>
    <id>https://gcdd1993.github.io/p/30626/</id>
    <published>2019-07-28T15:52:33.000Z</published>
    <updated>2021-06-19T15:18:16.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义与类型"><a href="#定义与类型" class="headerlink" title="定义与类型"></a>定义与类型</h1><ul><li>定义：定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法<strong>让类的实例化推迟到子类中进行。</strong></li><li>类型：创建型</li></ul><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><ul><li>创建对象需要大量重复的代码</li><li>客户端(应用层)不依赖于产品类实例如何被创建、实现等细节</li><li>一个类通过其子类来指定创建哪个对象</li></ul><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>用户只需要关心所需产品对应的工厂，无须关心创建细节</li><li>加入新产品符合开闭原则，提高可扩展性</li></ul><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li>类的个数容易过多，增加复杂度</li><li>增加了系统的抽象性和理解难度</li></ul><h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><p>工厂方法模式从一定意义上讲是从简单工厂模式衍生过来的，创建产品抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建具体产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;录制Java课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVideo</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;录制Python视频&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建产品工厂方法抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Video <span class="title">getVideo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建产品工厂方法实现类（每个产品都有对应的实现类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideoFactory</span> <span class="keyword">extends</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVideoFactory</span> <span class="keyword">extends</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VideoFactory javaVideoFactory = <span class="keyword">new</span> JavaVideoFactory();</span><br><span class="line">        VideoFactory pythonVideoFactory = <span class="keyword">new</span> PythonVideoFactory();</span><br><span class="line">        Video video = javaVideoFactory.getVideo();</span><br><span class="line">        video.produce();</span><br><span class="line"></span><br><span class="line">        video = pythonVideoFactory.getVideo();</span><br><span class="line">        video.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">录制Java课程</span><br><span class="line">录制Python视频</span><br></pre></td></tr></table></figure><p>如果我们现在新增一个产品–前端课程，我们需要创建产品类，产品工厂类，但是无需改动其他代码，做到了对扩展开放，对修改关闭，符合开闭原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FEVideo</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;录制前端课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FEVideoFactory</span> <span class="keyword">extends</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FEVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，我们也不难看出工厂方法模式的缺点–类的个数容易过多，增加复杂度。</p><p>因为一旦我们需要现在产品，就需要创建产品对应的产品实现类，以及产品工厂方法类，无疑增加了类的个数和系统的复杂度。</p><p>完整的UML类图</p><p><img data-src="https://i.loli.net/2019/07/29/5d3dcbfabe70f65083.png"></p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="Collection源码"><a href="#Collection源码" class="headerlink" title="Collection源码"></a><code>Collection</code>源码</h2><p>jdk中典型的工厂方法模式体现为<code>java.util.Collection</code></p><p>抽象产品为<code>java.util.Iterator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂定义了创建产品族的方法<code>java.util.Collection.#iterator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>由子类来定义具体创建产品的逻辑，如<code>java.util.ArrayList.#iterator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而具体的产品定义为<code>java.util.ArrayList$Itr</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UML类图</p><p><img data-src="https://i.loli.net/2019/07/29/5d3dcda8d25df62223.png"></p><h2 id="URLStreamHandlerFactory源码"><a href="#URLStreamHandlerFactory源码" class="headerlink" title="URLStreamHandlerFactory源码"></a><code>URLStreamHandlerFactory</code>源码</h2><p>再来看一个典型例子，<code>java.net.URLStreamHandlerFactory</code>作为工厂方法抽象类，定义了创建产品的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">URLStreamHandlerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">URLStreamHandler <span class="title">createURLStreamHandler</span><span class="params">(String protocol)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品抽象类就是<code>java.net.URLStreamHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品的工厂方法实现类为<code>sun.misc.Launcher$Factory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> <span class="keyword">implements</span> <span class="title">URLStreamHandlerFactory</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> URLStreamHandler <span class="title">createURLStreamHandler</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String PREFIX = <span class="string">&quot;sun.net.www.protocol&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Factory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> URLStreamHandler <span class="title">createURLStreamHandler</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">            String var2 = PREFIX + <span class="string">&quot;.&quot;</span> + var1 + <span class="string">&quot;.Handler&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 通过反射创建指定类型的产品</span></span><br><span class="line">                Class var3 = Class.forName(var2);</span><br><span class="line">                <span class="keyword">return</span> (URLStreamHandler)var3.newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ReflectiveOperationException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;could not load &quot;</span> + var1 + <span class="string">&quot;system protocol handler&quot;</span>， var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，工厂实现类通过反射类创建具体的产品实现类，而产品实现类非常多</p><p><img data-src="https://i.loli.net/2019/07/29/5d3dcf7262c4150474.png"></p><p>这样满足了开闭原则，也没有过多的增加类的数量，值得我们学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义与类型&quot;&gt;&lt;a href=&quot;#定义与类型&quot; class=&quot;headerlink&quot; title=&quot;定义与类型&quot;&gt;&lt;/a&gt;定义与类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义：定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法&lt;strong&gt;让类的实例</summary>
      
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="设计模式" scheme="https://gcdd1993.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（三）简单工厂模式</title>
    <link href="https://gcdd1993.github.io/p/21710/"/>
    <id>https://gcdd1993.github.io/p/21710/</id>
    <published>2019-07-28T15:14:04.000Z</published>
    <updated>2021-06-19T15:18:16.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义与类型"><a href="#定义与类型" class="headerlink" title="定义与类型"></a>定义与类型</h1><ul><li>定义:由一个工厂对象决定创建出哪一种产品类的实例</li><li>类型:创建型，但不属于GOF23种设计模式</li></ul><span id="more"></span><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><ul><li>工厂类负责创建的对象比较少</li><li>客户端(应用层)只知道传入工厂类的参数，对于如何创建对象(逻辑)不关心</li></ul><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>工厂类的<strong>职责相对过重</strong>，增加新的产品，需要修改工厂类的判断逻辑，<strong>违背开闭原则</strong></p><h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><p>创建一个抽象产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;录制Java课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVideo</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;录制Python视频&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建产品对应的简单工厂，通过产品类型来创建产品，应用方无需知道创建产品的细节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;java&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;python&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VideoFactory videoFactory = <span class="keyword">new</span> VideoFactory();</span><br><span class="line">        Video video = videoFactory.getVideo(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        video.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">录制Java课程</span><br></pre></td></tr></table></figure><p>如果增加产品，我们不仅需要修改产品对应的产品类，还需要修改工厂类，违反了开闭原则。</p><p>我们可以通过反射来优化下我们的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(Class&lt;? extends Video&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，添加产品的时候不用再修改我们的工厂类，而是直接添加产品即可。</p><p>最终的UML类图</p><p><img data-src="https://i.loli.net/2019/07/28/5d3dc0457904825584.png"></p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="JDK源码"><a href="#JDK源码" class="headerlink" title="JDK源码"></a><code>JDK</code>源码</h2><p>在JDK中，使用简单工厂模式的例子如<code>java.util.Calendar</code>，一组<code>getInstance</code>的重载方法，提供了创建<code>Calendar</code>产品的简单工厂方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(Locale aLocale)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone，Locale aLocale)</span></span></span><br></pre></td></tr></table></figure><p>核心方法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone，Locale aLocale)</span></span></span><br></pre></td></tr></table></figure><p>源码较长，不贴了，有兴趣的可以去看下源码。</p><p><code>Calendar</code>的UML类图如下</p><p><img data-src="https://i.loli.net/2019/07/28/5d3dc14d34d8244148.png"></p><h2 id="Logback源码"><a href="#Logback源码" class="headerlink" title="Logback源码"></a><code>Logback</code>源码</h2><p><code>logback</code>类中的简单工厂模式主要体现在<code>ch.qos.logback.classic.LoggerContext#getLogger(String)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Logger <span class="title">getLogger</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;name argument cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断log类型返回root节点的logger</span></span><br><span class="line">    <span class="keyword">if</span> (Logger.ROOT_LOGGER_NAME.equalsIgnoreCase(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Logger logger = root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果缓存中已经存在的指定的logger，直接返回childLogger</span></span><br><span class="line">    Logger childLogger = (Logger) loggerCache.get(name);</span><br><span class="line">    <span class="comment">// if we have the child， then let us return it without wasting time</span></span><br><span class="line">    <span class="keyword">if</span> (childLogger != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> childLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下是创建logger的逻辑</span></span><br><span class="line">    String childName;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> h = LoggerNameUtil.getSeparatorIndexOf(name， i);</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>) &#123;</span><br><span class="line">            childName = name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childName = name.substring(<span class="number">0</span>， h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// move i left of the last point</span></span><br><span class="line">        i = h + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (logger) &#123;</span><br><span class="line">            childLogger = logger.getChildByName(childName);</span><br><span class="line">            <span class="keyword">if</span> (childLogger == <span class="keyword">null</span>) &#123;</span><br><span class="line">                childLogger = logger.createChildByName(childName);</span><br><span class="line">                loggerCache.put(childName， childLogger);</span><br><span class="line">                incSize();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        logger = childLogger;</span><br><span class="line">        <span class="keyword">if</span> (h == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> childLogger;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个典型的简单工厂方法</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;定义与类型&quot;&gt;&lt;a href=&quot;#定义与类型&quot; class=&quot;headerlink&quot; title=&quot;定义与类型&quot;&gt;&lt;/a&gt;定义与类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:由一个工厂对象决定创建出哪一种产品类的实例&lt;/li&gt;
&lt;li&gt;类型:创建型，但不属于GOF23种设计模式&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="设计模式" scheme="https://gcdd1993.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二）设计模式原则</title>
    <link href="https://gcdd1993.github.io/p/64818/"/>
    <id>https://gcdd1993.github.io/p/64818/</id>
    <published>2019-07-27T17:34:12.000Z</published>
    <updated>2021-06-19T15:18:16.367Z</updated>
    
    <content type="html"><![CDATA[<p>学习Java设计模式之前，有必要先了解设计模式原则。<span id="more"></span></p><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭</p></li><li><p>用抽象构建框架，用实现扩展细节</p></li><li><p>优点：提高软件系统的可复用性及可维护性</p></li></ul><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Double <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ICourse iCourse = <span class="keyword">new</span> JavaCourse(<span class="number">96</span>， <span class="string">&quot;我的Java课程&quot;</span>， <span class="number">348d</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;课程ID: &quot;</span> + iCourse.getId() + <span class="string">&quot; 课程名称： &quot;</span> + iCourse.getName() + <span class="string">&quot;课程价格： &quot;</span> + iCourse.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">课程ID: 96 课程名称： 我的Java课程课程价格： 348.0</span><br></pre></td></tr></table></figure><p>如果现在要打折出售课程，按照开闭原则来设计，对扩展开放，对修改关闭。</p><p>创建打折类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDiscountCourse</span> <span class="keyword">extends</span> <span class="title">JavaCourse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaDiscountCourse</span><span class="params">(Integer id， String name， Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id， name， price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getOriginPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() * <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改应用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ICourse javaCourse = <span class="keyword">new</span> JavaDiscountCourse(<span class="number">96</span>， <span class="string">&quot;我的Java课程&quot;</span>， <span class="number">348d</span>);</span><br><span class="line"></span><br><span class="line">        JavaDiscountCourse iCourse = (JavaDiscountCourse) javaCourse;</span><br><span class="line">        System.out.println(<span class="string">&quot;课程ID: &quot;</span> + iCourse.getId() + <span class="string">&quot; 课程名称： &quot;</span> + iCourse.getName() + <span class="string">&quot;课程原价： &quot;</span> + iCourse.getOriginPrice() + <span class="string">&quot; 课程折后价格： &quot;</span> + iCourse.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">课程ID: 96 课程名称： 我的Java课程课程原价： 348.0 课程折后价格： 278.40000000000003</span><br></pre></td></tr></table></figure><p>这里有个要注意的地方，<code>Double * 0.8</code>后输出的浮点数精度有丢失的情况，可以使用<code>BigDecimal</code>的<code>String</code>构造器<code>public BigDecimal(String val)</code>来解决。</p><p>修改<code>JavaDiscountCourse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDiscountCourse</span> <span class="keyword">extends</span> <span class="title">JavaCourse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaDiscountCourse</span><span class="params">(Integer id， String name， Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id， name， price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getOriginPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="keyword">super</span>.getPrice().toString()).multiply(<span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.8&quot;</span>)).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">课程ID: 96 课程名称： 我的Java课程课程原价： 348.0 课程折后价格： 278.4</span><br></pre></td></tr></table></figure><h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><ul><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节;细节应该依赖抽象</li><li>针对接口编程，不要针对实现编程</li><li>优点:可以减少类间的耦合性、提高系统稳定性，提高代码可读性和可维护性，可降低修改程序所造成的风险</li></ul><h2 id="Coding-1"><a href="#Coding-1" class="headerlink" title="Coding"></a>Coding</h2><h3 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h3><p>创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geely</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyJavaCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Geely在学习Java课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyFECourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Geely在学习FE课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyPythonCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Geely在学习Python课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// v1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Geely geely = <span class="keyword">new</span> Geely();</span><br><span class="line">        geely.studyFECourse();</span><br><span class="line">        geely.studyJavaCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Geely在学习FE课程</span><br><span class="line">Geely在学习Java课程</span><br></pre></td></tr></table></figure><p>这时候，如果我们要让Geely学习Ruby课程，我们只能在<code>Geely</code>类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyRubyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Geely在学习Ruby课程&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在Test类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geely.studyRubyCourse();</span><br></pre></td></tr></table></figure><div class="note warning"><p>不符合依赖倒置原则</p></div><h3 id="正例"><a href="#正例" class="headerlink" title="正例"></a>正例</h3><p>创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类，带有成员变量<code>ICourse course</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geely</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> ICourse course;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyImoocCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        course.studyCourse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FECourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Geely在学习FE课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Geely在学习Java课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Geely在学习Python课程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Geely geely = <span class="keyword">new</span> Geely(<span class="keyword">new</span> JavaCourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line"></span><br><span class="line">        geely.setCourse(<span class="keyword">new</span> FECourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Geely在学习Java课程</span><br><span class="line">Geely在学习FE课程</span><br></pre></td></tr></table></figure><p>这样一来，如果要添加新的课程，只需要创建实现类即可。然后应用类设置实现类，无需改动其他代码，符合依赖倒置原则。</p><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><ul><li>不要存在多于一个导致类变更的原因</li><li>一个类/接口/方法只负责一项职责</li><li>优点:降低类的复杂度、提高类的可读性、提高系统的可维护性、降低变更引起的风险</li></ul><h2 id="Coding-2"><a href="#Coding-2" class="headerlink" title="Coding"></a>Coding</h2><h3 id="反例-1"><a href="#反例-1" class="headerlink" title="反例"></a>反例</h3><p>创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainMoveMode</span><span class="params">(String birdName)</span> </span>&#123;</span><br><span class="line">        System.out.println(birdName + <span class="string">&quot; 用翅膀飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bird bird = <span class="keyword">new</span> Bird();</span><br><span class="line">        bird.mainMoveMode(<span class="string">&quot;大雁&quot;</span>);</span><br><span class="line">        bird.mainMoveMode(<span class="string">&quot;鸵鸟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大雁 用翅膀飞</span><br><span class="line">鸵鸟 用翅膀飞</span><br></pre></td></tr></table></figure><p>鸵鸟是用脚走的，所以我们更改Bird类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainMoveMode</span><span class="params">(String birdName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;鸵鸟&quot;</span>.equals(birdName)) &#123;</span><br><span class="line">            System.out.println(birdName + <span class="string">&quot; 用脚走&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(birdName + <span class="string">&quot; 用翅膀飞&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有更多的鸟类，我们还要写更多的else代码。</p><h3 id="正例-1"><a href="#正例-1" class="headerlink" title="正例"></a>正例</h3><p>我们修改下反例中的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyBird</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainMoveMode</span><span class="params">(String birdName)</span> </span>&#123;</span><br><span class="line">        System.out.println(birdName + <span class="string">&quot; 用翅膀飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WalkBird</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mainMoveMode</span><span class="params">(String birdName)</span> </span>&#123;</span><br><span class="line">        System.out.println(birdName + <span class="string">&quot; 用脚走&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyBird flyBird = <span class="keyword">new</span> FlyBird();</span><br><span class="line">        flyBird.mainMoveMode(<span class="string">&quot;大雁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        WalkBird walkBird = <span class="keyword">new</span> WalkBird();</span><br><span class="line">        walkBird.mainMoveMode(<span class="string">&quot;鸵鸟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大雁 用翅膀飞</span><br><span class="line">鸵鸟 用脚走</span><br></pre></td></tr></table></figure><p>再举一个例子</p><p>创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * Created on 2019/7/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourseContent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getCoursName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] getCourseVideo();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * Created on 2019/7/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourseManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refundCourse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类，有着课程内容和课程管理两种职能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseImpl</span> <span class="keyword">implements</span> <span class="title">ICourseContent</span>， <span class="title">ICourseManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCoursName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getCourseVideo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refundCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><ul><li>用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口</li><li>一个类对一个类的依赖应该建立在最小的接口上</li><li>建立单一接口，不要建立庞大臃肿的接口</li><li>尽量细化接口，接口中的方法尽量少</li><li>优点:符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性。</li></ul><div class="note warning"><p>注意适度原则，一定要适度</p></div><h2 id="Coding-3"><a href="#Coding-3" class="headerlink" title="Coding"></a>Coding</h2><h3 id="反例-2"><a href="#反例-2" class="headerlink" title="反例"></a>反例</h3><p>创建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAnimalAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">IAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟 吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟 飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 鸟不会游泳，空实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">IAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗 吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 狗不会飞，空实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗 游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看出，鸟和狗实现了接口后，各自都有无用的接口，所以违反了接口隔离原则，只能采取空实现的方式。但是对于使用方来说，还是可以调用狗的fly方法，得到空的实现。</p><h3 id="正例-2"><a href="#正例-2" class="headerlink" title="正例"></a>正例</h3><p>将反例中的接口接口拆分为三个独立的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEatAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFlyAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISwimAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dog</code>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">IEatAnimalAction</span>，<span class="title">ISwimAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗 吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗 游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Bird</code>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">IEatAnimalAction</span>，<span class="title">IFlyAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟 吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟 飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就成功的将一个大接口，优化为分摊职责的小接口，实现类可以根据需要实现多个职能接口。</p><h1 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h1><h2 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h2><ul><li>一个对象应该对其他对象保持最少的了解。又叫最少知道原则</li><li>尽量降低类与类之间的耦合</li><li>优点:降低类之间的耦合</li></ul><h2 id="Coding-4"><a href="#Coding-4" class="headerlink" title="Coding"></a>Coding</h2><h3 id="反例-3"><a href="#反例-3" class="headerlink" title="反例"></a>反例</h3><p>创建课程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建项目经理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamLeader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNumberOfCourse</span><span class="params">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在线课程的数量是 ：&quot;</span> + courseList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建老板类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commandCheckNumber</span><span class="params">(TeamLeader teamLeader)</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            courseList.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        teamLeader.checkNumberOfCourse(courseList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在线课程的数量是 ：<span class="number">20</span></span><br></pre></td></tr></table></figure><p>我们仔细分析一下，其实老板并不需要知道课程的细节，只需要问一下项目经理，有多少课程，项目经理直接告诉老板有20节在线课程。而不是老板将课程列出，让项目经理统计。</p><p>我们看下UML类图</p><p><img data-src="https://i.loli.net/2019/07/28/5d3c9e390ca6837252.png"></p><h3 id="正例-3"><a href="#正例-3" class="headerlink" title="正例"></a>正例</h3><p>项目经理类修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamLeader</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNumberOfCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            courseList.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;在线课程的数量是 ：&quot;</span> + courseList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老板类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commandCheckNumber</span><span class="params">(TeamLeader teamLeader)</span> </span>&#123;</span><br><span class="line">        teamLeader.checkNumberOfCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候运行一下，结果一样。但是从UML类图上来看，是有很大的优化的。</p><p><img data-src="https://i.loli.net/2019/07/28/5d3c9cf88cb0392036.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习Java设计模式之前，有必要先了解设计模式原则。</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="设计模式" scheme="https://gcdd1993.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="UML" scheme="https://gcdd1993.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（一）UML总结</title>
    <link href="https://gcdd1993.github.io/p/63230/"/>
    <id>https://gcdd1993.github.io/p/63230/</id>
    <published>2019-07-27T16:02:06.000Z</published>
    <updated>2021-06-19T15:18:16.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>统一建模语言(英语: Unified Modeling Language ，缩写UML)是非专利的第三代建模和规约语言。</p><span id="more"></span><h1 id="UML特点"><a href="#UML特点" class="headerlink" title="UML特点"></a>UML特点</h1><ul><li>UML是一种开放的方法</li><li>用于说明、可视化、构建和编写一个正在开发的面向对象的、软件密集系统的制品的开放方法。</li><li>UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。</li></ul><h1 id="UML2-2分类"><a href="#UML2-2分类" class="headerlink" title="UML2.2分类"></a>UML2.2分类</h1><p>UML2.2中一共定义了14种图示，分类如下:</p><ul><li>结构式图形：强调的是系统式的建模<ul><li>静态图(类图，对象图，包图)</li><li>实现图(组件图，部署图)</li><li>剖面图</li><li>复合结构图</li></ul></li><li>行为式图形：强调系统模型中触发的事件<ul><li>活动图</li><li>状态图</li><li>用例图</li></ul></li><li>交互式图形：属于行为式图形子集合，强调系统模型中的资料流程<ul><li>通信图</li><li>交互概述图(UML2.0)</li><li>时序图(UML2.0)</li><li>时间图(UML2.0)</li></ul></li></ul><h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>Class Diagram:用于表示类、接口、实例等之间相互的静态关系。虽然名字叫类图，但类图中并不只有类（也包括权限，属性，方法等）。</p><h2 id="记忆技巧"><a href="#记忆技巧" class="headerlink" title="记忆技巧"></a>记忆技巧</h2><h3 id="箭头方向"><a href="#箭头方向" class="headerlink" title="箭头方向"></a>箭头方向</h3><ul><li>定义子类时需要通过extends关键字指定父类</li><li>子类一定是知道父类定义的，但父类并不知道子类的定义</li><li>只有知道对方信息时才能指向对方</li><li>所以箭头方向是<strong>从子类指向父类</strong></li></ul><h3 id="实线-继承-虚线-实现"><a href="#实线-继承-虚线-实现" class="headerlink" title="实线-继承|虚线-实现"></a>实线-继承|虚线-实现</h3><p><img data-src="https://i.loli.net/2019/07/28/5d3c7b0d81dbf76419.png"></p><ul><li>空心三角箭头:继承或实现</li><li>实线继承， is a关系，扩展目的，不虚，很结实</li><li>虚线-实现，虚线代表“虚”，无实体</li></ul><h3 id="实线-关联-虚线-依赖"><a href="#实线-关联-虚线-依赖" class="headerlink" title="实线-关联|虚线-依赖"></a>实线-关联|虚线-依赖</h3><p><img data-src="https://i.loli.net/2019/07/28/5d3c7b7e556e646414.png"></p><ul><li>实线-关联关系:关系稳定，实打实的关系，铁哥们</li><li>表示一个类对象和另一个类对象有关联</li><li>通常是一个类中有另一个类对象做为属性</li></ul><p><img data-src="https://i.loli.net/2019/07/28/5d3c7b8f3d0d786176.png"></p><ul><li>虚线-依赖关系:临时用一下，若即若离，虚无缥缈，若有若无</li><li>表示一种使用关系，一个类需要借助另一个类来实现功能</li><li>一般是一个类使用另一个类做为参数使用，或作为返回值</li></ul><h3 id="空心菱形-聚合-实心菱形-组合"><a href="#空心菱形-聚合-实心菱形-组合" class="headerlink" title="空心菱形-聚合|实心菱形-组合"></a>空心菱形-聚合|实心菱形-组合</h3><ul><li>菱形就是一个盛东西的器皿(例如盘子)</li><li>聚合:代表空器皿里可以放很多相同东西，聚在一起(箭头方向所指的类)</li><li>组合:代表满器皿里已经有实体结构的存在，生死与共</li></ul><p><img data-src="https://i.loli.net/2019/07/28/5d3c7eaf0d25040127.png"></p><ul><li>整体和局部的关系，两者有着独立的生命周期，是has a的关系</li><li>弱关系</li><li>消极的词:弱-空</li></ul><p><img data-src="https://i.loli.net/2019/07/28/5d3c7ed2ce90136239.png"></p><ul><li>整体与局部的关系，和聚合的关系相比，关系更加强烈</li><li>两者有相同的生命周期， contains-a的关系</li><li>强关系</li><li>积极的词:强-满</li></ul><h4 id="常见数字表达及含义，假设有A类和B类，数字标记在A类侧"><a href="#常见数字表达及含义，假设有A类和B类，数字标记在A类侧" class="headerlink" title="常见数字表达及含义，假设有A类和B类，数字标记在A类侧"></a>常见数字表达及含义，假设有A类和B类，数字标记在A类侧</h4><ul><li>0..1:0或1个实例.</li><li>0..*:0或多个实例.</li><li>1..1:1个实例.</li><li>1:只能有一个实例.</li><li>1..*:至少有一个实例.</li></ul><h2 id="类图详解"><a href="#类图详解" class="headerlink" title="类图详解"></a>类图详解</h2><p><img data-src="https://i.loli.net/2019/07/28/5d3c82bc3713e90509.png"></p><p>类图从上到下包含：</p><ul><li>类名：抽象类使用斜体表示，接口用&lt;<interface xxx>&gt;表示</li><li>属性：访问权限+属性名：属性类型<ul><li><code>+：public</code></li><li><code>-：private</code></li><li><code>#：protected</code></li><li><code>~：default</code></li><li>下横线表示static</li></ul></li><li>方法: 访问权限+方法名：返回值类型<ul><li><code>+：public</code></li><li><code>-：private</code></li><li><code>#：protected</code></li><li><code>~：default</code></li><li>下横线表示static</li><li>斜体表示抽象方法</li></ul></li></ul><p>典型的类图表示：</p><p><img data-src="https://i.loli.net/2019/07/28/5d3c8422bfd5d69590.png"></p><h1 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h1><p>Sequence Diagram :是显示对象之间交互的图，这些对象是按时间顺序排列的。</p><p>时序图中包括的建模元素主要有:</p><ul><li>对象(Actor)</li><li>生命线(Lifeline)</li><li>控制焦点(Focus of control)</li><li>消息(Message)等</li></ul><p>典型的一个时序图如下：</p><p><img data-src="https://i.loli.net/2019/07/28/5d3c82384ae5224680.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;统一建模语言(英语: Unified Modeling Language ，缩写UML)是非专利的第三代建模和规约语言。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="设计模式" scheme="https://gcdd1993.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="UML" scheme="https://gcdd1993.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Spring Mvc Http 400 Bad Request问题排查</title>
    <link href="https://gcdd1993.github.io/p/6604/"/>
    <id>https://gcdd1993.github.io/p/6604/</id>
    <published>2019-07-26T10:32:46.000Z</published>
    <updated>2021-06-19T15:18:16.371Z</updated>
    
    <content type="html"><![CDATA[<p>如果遇到了Spring MVC报错400，而且没有返回任何信息的情况下该如何排查问题？<span id="more"></span></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一直都没毛病的接口，今天测试的时候突然报错<code>400 Bad Request</code>，而且Response没有返回任何信息。</p><p><img data-src="https://i.loli.net/2019/07/26/5d3ae61b24ab372943.png"></p><p><img data-src="https://i.loli.net/2019/07/26/5d3ad97a0da2b22891.png"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>尝试了一下午，终于找到了排查这类问题的办法。</p><p>我们知道，在Spring MVC里面，<br><code>org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler</code><br>负责所有异常的统一处理。我们只要在方法<code>handleException</code>打上断点即可。</p><p><img data-src="https://i.loli.net/2019/07/26/5d3ada319940784853.png"></p><p>点开发现，原来是Lombok的问题。报错如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Could not read JSON document: Can not construct instance of xxx: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)</span><br><span class="line"> at [Source: java.io.PushbackInputStream@12544acd; line: 2, column: 5]</span><br></pre></td></tr></table></figure><p>Lombok没有为我们自动生成类的构造函数。我们在目标类加上<code>@NoArgsConstructor</code>即可解决。</p><h1 id="刨根问底"><a href="#刨根问底" class="headerlink" title="刨根问底"></a>刨根问底</h1><p>为什么Lombok自动生成的类，没有可供Jackson反序列化的构造函数呢？我看了一下生成的字节码文件，里面确实不存在无参构造和全参构造函数，唯一的构造函数是带一个参数的。</p><p>目标类使用了<code>@Data</code>注解，而<code>@Data</code>注解的声明如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generates getters for all fields, a useful toString method, and hashCode and equals implementations that check</span></span><br><span class="line"><span class="comment"> * all non-transient fields. Will also generate setters for all non-final fields, as well as a constructor.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Equivalent to &#123;<span class="doctag">@code</span> <span class="doctag">@Getter</span> <span class="doctag">@Setter</span> <span class="doctag">@RequiredArgsConstructor</span> <span class="doctag">@ToString</span> <span class="doctag">@EqualsAndHashCode</span>&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Complete documentation is found at &lt;a href=&quot;https://projectlombok.org/features/Data&quot;&gt;the project lombok features page for &amp;#64;Data&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Getter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Setter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> RequiredArgsConstructor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ToString</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EqualsAndHashCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> lombok.Value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Data &#123;</span><br><span class="line"><span class="function">String <span class="title">staticConstructor</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，<code>@Data</code>包含了以下注解的功能</p><ul><li>@Getter</li><li>@Setter</li><li>@RequiredArgsConstructor</li><li>@ToString</li><li>@EqualsAndHashCode</li></ul><p>而“罪魁祸首”就是<code>@RequiredArgsConstructor</code>了，它的作用是</p><blockquote><p>为每个需要特殊处理的字段（final修饰的或者是@NotNull注释的字段）生成一个带有1个参数的构造函数。</p></blockquote><p>而目标类恰巧有一个字段就是<code>@NotNull</code>注解修饰的，所以生成了单参构造函数。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://projectlombok.org/features/all">Lombok Features</a></li><li><a href="https://www.baeldung.com/global-error-handler-in-a-spring-rest-api">Spring MVC自定义全局异常处理</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果遇到了Spring MVC报错400，而且没有返回任何信息的情况下该如何排查问题？</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置Https指南</title>
    <link href="https://gcdd1993.github.io/p/17023/"/>
    <id>https://gcdd1993.github.io/p/17023/</id>
    <published>2019-07-24T08:42:05.000Z</published>
    <updated>2021-06-19T15:18:16.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是对Nginx配置SSL证书的总结。<span id="more"></span></p><h1 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h1><blockquote><p>你可以从任何证书提供商处申请证书，这里以<a href="https://console.aliyun.com/">阿里云</a>为例。</p></blockquote><h2 id="打开阿里云SSL证书控制台，点击购买证书"><a href="#打开阿里云SSL证书控制台，点击购买证书" class="headerlink" title="打开阿里云SSL证书控制台，点击购买证书"></a>打开阿里云SSL证书控制台，点击购买证书</h2><p><img data-src="https://i.loli.net/2019/07/24/5d381c3210a9e21599.png"></p><h2 id="选择免费型一年期的证书，点击立即购买"><a href="#选择免费型一年期的证书，点击立即购买" class="headerlink" title="选择免费型一年期的证书，点击立即购买"></a>选择免费型一年期的证书，点击立即购买</h2><div class="note warning"><p>注意，1年到期后别忘记重新申请证书！</p></div><p><img data-src="https://i.loli.net/2019/07/24/5d381c61c4d0546560.png"></p><h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><p>放心大胆的支付吧，不用钱！</p><p><img data-src="https://i.loli.net/2019/07/24/5d381d0b2668081706.png"></p><h1 id="验证SSL证书"><a href="#验证SSL证书" class="headerlink" title="验证SSL证书"></a>验证SSL证书</h1><h2 id="购买完成之后，返回SSL证书控制台，你应该会看到刚才购买的证书。我们点击申请"><a href="#购买完成之后，返回SSL证书控制台，你应该会看到刚才购买的证书。我们点击申请" class="headerlink" title="购买完成之后，返回SSL证书控制台，你应该会看到刚才购买的证书。我们点击申请"></a>购买完成之后，返回SSL证书控制台，你应该会看到刚才购买的证书。我们点击申请</h2><p><img data-src="https://i.loli.net/2019/07/24/5d381d59ca32b79031.png"></p><h2 id="填写域名（必须是你自己的或者有管理权的域名）和相关信息，完成后点击下一步。"><a href="#填写域名（必须是你自己的或者有管理权的域名）和相关信息，完成后点击下一步。" class="headerlink" title="填写域名（必须是你自己的或者有管理权的域名）和相关信息，完成后点击下一步。"></a>填写域名（必须是你自己的或者有管理权的域名）和相关信息，完成后点击下一步。</h2><div class="note warning"><p>注意，免费型证书只支持单个域名！例如你要为<a href="http://www.example.com申请证书,你必须填写www.example.com,而不能是example.com./">www.example.com申请证书，你必须填写www.example.com，而不能是example.com。</a></p></div><p><img data-src="https://i.loli.net/2019/07/24/5d381dd8a4b6091205.png"></p><h2 id="在DNS服务商处配置阿里云提供的验证信息。"><a href="#在DNS服务商处配置阿里云提供的验证信息。" class="headerlink" title="在DNS服务商处配置阿里云提供的验证信息。"></a>在DNS服务商处配置阿里云提供的验证信息。</h2><p>例如<a href="https://www.dnspod.cn/console/dashboard">DNSPod</a>，填写主机记录，记录值和记录类型，然后点击保存。</p><p><img data-src="https://i.loli.net/2019/07/24/5d381f607ee9d69062.png"></p><div class="note info"><p>耐心等待TTL刷新（一般为10分钟，也可能花不了10分钟）。</p></div><p>回到阿里云SSL证书申请页面，点击验证。</p><p><img data-src="https://i.loli.net/2019/07/24/5d381ebc2cb3f86338.png"></p><h2 id="签发域名"><a href="#签发域名" class="headerlink" title="签发域名"></a>签发域名</h2><p>验证通过后，证书提供商将会为你的域名颁发证书。在阿里云SSL证书控制台的已签发列表下可以找到你的域名对应的SSL证书。</p><p><img data-src="https://i.loli.net/2019/07/24/5d382048c586e43053.png"></p><h2 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h2><p>下载Nginx对应的SSL证书<code>xx_nginx.zip</code>，准备配置Nginx。</p><p><img data-src="https://i.loli.net/2019/07/24/5d3821f82182787100.png"></p><h1 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h1><div class="note info"><p>如果你还没有安装Nginx，可以参考<a href="https://gcdd1993.github.io/p/8505/#Nginx">部署Nginx</a></p></div><h2 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /etc/nginx/certs</span><br><span class="line">$ sudo <span class="built_in">cd</span> /etc/nginx/certs</span><br><span class="line"><span class="comment">## 上传你的证书至此目录</span></span><br><span class="line">$ sudo ls -l</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul 24 17:15 ./</span><br><span class="line">drwxr-xr-x 7 root root 4096 Jul 24 17:15 ../</span><br><span class="line">-rw-r--r-- 1 root root 4053 Jul 24 16:49 xx_nginx.zip</span><br><span class="line">$ sudo unzip xx_nginx.zip</span><br><span class="line">$ sudo ls -l</span><br><span class="line">-rw-r--r-- 1 root root 1679 Jul 24 16:48 xx.key <span class="comment">## ssl cert key</span></span><br><span class="line">-rw-r--r-- 1 root root 3667 Jul 24 16:48 xx.pem <span class="comment">## ssl cert</span></span><br></pre></td></tr></table></figure><p>一切准备就绪后，可以开始修改我们的<code>Nginx</code>配置文件了。</p><h2 id="修改Nginx配置文件"><a href="#修改Nginx配置文件" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h2><p>将Http修改为Https非常简单，只需要修改一处内容，并添加若干代码。</p><ol><li>将<code>listen 80;</code>修改为<code>listen 443;</code></li><li>在<code>server</code>块中添加以下代码</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_certificate</span> certs/xx.pem;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> certs/xx.key;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br></pre></td></tr></table></figure><p>修改完成后，重启Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx reload</span><br><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><p>好了，使用Https访问你的网站吧。</p><h2 id="Http强制转向Https"><a href="#Http强制转向Https" class="headerlink" title="Http强制转向Https"></a>Http强制转向Https</h2><div class="note warning"><p>注意，以上修改完成后，只能使用Https访问了，但是往往我们不希望用户使用Http访问的时候出现404的情况。那么，我们可以简单的将80端口的用户转发到443端口，来达到Http和Https共存的状态。</p></div><p>在Nginx配置文件中添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> xx.xx.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是对Nginx配置SSL证书的总结。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Nginx" scheme="https://gcdd1993.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用Hyper-V替代VMware</title>
    <link href="https://gcdd1993.github.io/p/14834/"/>
    <id>https://gcdd1993.github.io/p/14834/</id>
    <published>2019-07-19T05:52:46.000Z</published>
    <updated>2021-06-19T15:18:16.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hyper-V是什么"><a href="#Hyper-V是什么" class="headerlink" title="Hyper-V是什么"></a>Hyper-V是什么</h1><blockquote><p>Hyper-V硬件要求为Windows 10 企业版、专业版或教育版，如果你使用的是Mac或者Linux的电脑，可以不往下看了。</p></blockquote><p>虚拟机大家都懂吧，简单来说，Hyper-V就是虚拟机管理工具。如果你使用过<a href="https://www.vmware.com/products/workstation-pro.html">VMware Workstation Pro</a>或者是<a href="https://www.virtualbox.org/">VirtualBox</a>，那你一定不陌生了。</p><span id="more"></span><p>具体来说，Hyper-V 提供硬件虚拟化。 这意味着每个虚拟机都在虚拟硬件上运行。 Hyper-V 允许你创建虚拟硬盘驱动器、虚拟交换机以及许多其他虚拟设备，所有这些都可以添加到虚拟机中。</p><h1 id="为什么要使用Hyper-V而不是VMware？"><a href="#为什么要使用Hyper-V而不是VMware？" class="headerlink" title="为什么要使用Hyper-V而不是VMware？"></a>为什么要使用Hyper-V而不是VMware？</h1><p>首先为什么要使用虚拟机？</p><ul><li>运行需要早期版本的Windows 操作系统或非Windows 操作系统的软件。</li><li>实验其他操作系统。 通过虚拟机，可轻松创建和删除不同的操作系统。</li><li>使用多个虚拟机在多个操作系统上测试软件。 通过虚拟机，可以在一部台式机或便携式计算机上运行所有内容。</li></ul><p>那么，为什么要使用Hyper-V？</p><ol><li>首先，Hyper-V是Windows 10 专业版自带的功能，无需安装其他任何工具</li><li><a href="https://hub.docker.com/?overlay=onboarding">Docker for Windows</a>推荐使用Hyper-V作为虚拟化方案</li><li>免费</li></ol><p>所以，在Hyper-V能胜任的场景下，我们应该使用Hyper-V。</p><h1 id="如何使用Hyper-V"><a href="#如何使用Hyper-V" class="headerlink" title="如何使用Hyper-V"></a>如何使用Hyper-V</h1><h2 id="检查系统要求"><a href="#检查系统要求" class="headerlink" title="检查系统要求"></a>检查系统要求</h2><ul><li>Windows 10 <strong>企业版、专业版或教育版</strong>。</li><li>具有二级地址转换 (SLAT) 的 64 位处理器。</li><li>虚拟机监视器模式扩展的 CPU 支持 (Intel Cpu 上的 VT-c)。</li><li>最小 4 GB 内存。</li></ul><div class="note warning"><p>注意：系统必须是Windows 10企业版、专业版或教育版。</p></div><h2 id="开启Hyper-V"><a href="#开启Hyper-V" class="headerlink" title="开启Hyper-V"></a>开启Hyper-V</h2><h3 id="使用-PowerShell-启用-Hyper-V"><a href="#使用-PowerShell-启用-Hyper-V" class="headerlink" title="使用 PowerShell 启用 Hyper-V"></a>使用 PowerShell 启用 Hyper-V</h3><ol><li>以管理员身份打开 PowerShell 控制台。</li><li>运行以下命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Hyper</span><span class="literal">-V</span> <span class="literal">-All</span></span><br></pre></td></tr></table></figure><p>如果无法找到此命令，请确保你以管理员身份运行 PowerShell。</p><div class="note warning"><p>安装完成后，请重启。</p></div><h3 id="使用-CMD-和-DISM-启用-Hyper-V"><a href="#使用-CMD-和-DISM-启用-Hyper-V" class="headerlink" title="使用 CMD 和 DISM 启用 Hyper-V"></a>使用 CMD 和 DISM 启用 Hyper-V</h3><p>部署映像服务和管理工具 (DISM) 可帮助配置 Windows 和 Windows 映像。 在众多应用程序中，DISM 可以在操作系统运行时启用 Windows 功能。</p><p>使用 DISM 启用 Hyper-V 角色：</p><ol><li>以管理员身份打开 PowerShell 或 CMD 会话。</li><li>键入下列命令：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISM /Online /<span class="built_in">Enable-Feature</span> /All /FeatureName:Microsoft<span class="literal">-Hyper</span><span class="literal">-V</span></span><br></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2019/07/19/5d316faceaaa555921.png"></p><h3 id="通过“设置”启用-Hyper-V-角色"><a href="#通过“设置”启用-Hyper-V-角色" class="headerlink" title="通过“设置”启用 Hyper-V 角色"></a>通过“设置”启用 Hyper-V 角色</h3><p>推荐使用这种方式</p><ol><li>右键单击 Windows 按钮并选择“应用和功能”。</li><li>在 “相关设置” 下的右侧选择 “<strong>程序和功能</strong>“。</li><li>选择“<strong>打开或关闭 Windows 功能</strong>”。</li><li>选择 <strong>Hyper-V</strong>，然后单击<strong>确定</strong>。</li></ol><p><img data-src="https://i.loli.net/2019/07/19/5d317018d187515264.png"></p><div class="note warning"><p>同样的，安装完成后，请重启。</p></div><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>在开始菜单找到并打开<strong>Hyper-V管理器</strong>，它应该位于Windows管理工具文件夹下面。</p><p>或者直接搜索<code>Hyper-V</code></p><p><img data-src="https://i.loli.net/2019/07/19/5d317163c37fc46784.png"></p><p>打开后界面如下，我觉得比VMware界面好看点。</p><p><img data-src="https://i.loli.net/2019/07/19/5d3171f62f3db74558.png"></p><h3 id="快速创建"><a href="#快速创建" class="headerlink" title="快速创建"></a>快速创建</h3><p>点击快速创建，你将会看到</p><p><img data-src="https://i.loli.net/2019/07/19/5d31724c78a8053748.png"></p><p>类似于在线安装，比较简单。</p><p>我尝试了导入本地安装源安装Ubuntu 16.04，但是启动报错，找不到Boot信息。</p><div class="note info"><p>可能原因是：我的电脑不支持第二代虚拟机世代（是一种较新的虚拟化功能）</p></div><h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><p>点击新建虚拟机，你将会进入一下界面</p><p><img data-src="https://i.loli.net/2019/07/19/5d31739e288e621269.png"></p><p>跟着一步步来吧，首先你得准备好一个系统镜像（ISO结尾的系统镜像文件）</p><p><img data-src="https://i.loli.net/2019/07/19/5d31745826fc036003.png"></p><p><img data-src="https://i.loli.net/2019/07/19/5d317487c047867319.png"></p><p><img data-src="https://i.loli.net/2019/07/19/5d3174d7987ff97371.png"></p><p><img data-src="https://i.loli.net/2019/07/19/5d317516e579835760.png"></p><p><img data-src="https://i.loli.net/2019/07/19/5d317561c1c2357128.png"></p><p>点击下一步，完成。</p><p><img data-src="https://i.loli.net/2019/07/19/5d31761f0c16026230.png"></p><p>接着，就进入了Ubuntu系统安装环节，省略了，大家应该都会装的。</p><h3 id="导入虚拟机"><a href="#导入虚拟机" class="headerlink" title="导入虚拟机"></a>导入虚拟机</h3><p>除了自己创建，我们还可以导入别人创建好的虚拟机</p><p>点击导入虚拟机</p><p><img data-src="https://i.loli.net/2019/07/19/5d31781f6a53f37502.png"></p><p><img data-src="https://i.loli.net/2019/07/19/5d31785537ce278225.png"></p><p>以下是我创建的Ubuntu 16.04虚拟机，你可以直接导入使用。</p><p><a href="https://1drv.ms/f/s!AjfBPvEeW2r2hukqwAdOrPSMPpKZ4A">https://1drv.ms/f/s!AjfBPvEeW2r2hukqwAdOrPSMPpKZ4A</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/about/">Windows 10 上的 Hyper-V 简介</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Hyper-V是什么&quot;&gt;&lt;a href=&quot;#Hyper-V是什么&quot; class=&quot;headerlink&quot; title=&quot;Hyper-V是什么&quot;&gt;&lt;/a&gt;Hyper-V是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Hyper-V硬件要求为Windows 10 企业版、专业版或教育版，如果你使用的是Mac或者Linux的电脑，可以不往下看了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虚拟机大家都懂吧，简单来说，Hyper-V就是虚拟机管理工具。如果你使用过&lt;a href=&quot;https://www.vmware.com/products/workstation-pro.html&quot;&gt;VMware Workstation Pro&lt;/a&gt;或者是&lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;，那你一定不陌生了。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://gcdd1993.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Hyper-V" scheme="https://gcdd1993.github.io/tags/Hyper-V/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 搭建phpcms</title>
    <link href="https://gcdd1993.github.io/p/5357/"/>
    <id>https://gcdd1993.github.io/p/5357/</id>
    <published>2019-06-24T09:50:42.000Z</published>
    <updated>2021-06-19T15:18:16.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Apache2"><a href="#安装Apache2" class="headerlink" title="安装Apache2"></a>安装Apache2</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update -y</span><br><span class="line">$ sudo apt-get install apache2 -y</span><br><span class="line">$ sudo systemctl start apache2.service</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install mysql-server -y</span><br><span class="line">$ sudo /usr/bin/mysql_secure_installation</span><br><span class="line"><span class="comment">## 都选y就行</span></span><br><span class="line">$ mysql -u root -p </span><br><span class="line">mysql&gt; CREATE DATABASE js_website;</span><br><span class="line"><span class="comment">## 导入数据</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /tmp/jskj.sql;</span><br><span class="line">mysql&gt; \q;</span><br></pre></td></tr></table></figure><h1 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install php -y;</span><br><span class="line">$ sudo apt-get install -y php-&#123;bcmath,bz2,intl,gd,mbstring,mcrypt,mysql,zip&#125; &amp;&amp; sudo apt-get install libapache2-mod-php -y;</span><br></pre></td></tr></table></figure><h1 id="部署PHP官网"><a href="#部署PHP官网" class="headerlink" title="部署PHP官网"></a>部署PHP官网</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /var/www/html/phpcms</span><br><span class="line">$ <span class="built_in">cd</span> /var/www/html/phpcms</span><br><span class="line"><span class="comment"># 上传phpcms.zip包至此目录</span></span><br><span class="line">$ unzip phpcms.zip</span><br><span class="line">$ ls -l</span><br><span class="line">drwxr-xr-x 11 root root      4096 Jun 24 17:21 ./</span><br><span class="line">drwxr-xr-x  3 root root      4096 Jun 24 17:21 ../</span><br><span class="line">-rw-r--r--  1 root root        48 Jun 24 15:53 admin.php</span><br><span class="line">drwxr-xr-x  3 root root      4096 Jun 24 15:53 api/</span><br><span class="line">-rw-r--r--  1 root root       991 Jun 24 15:53 api.php</span><br><span class="line">drwxr-xr-x 18 root root      4096 Jun 24 15:53 caches/</span><br><span class="line">-rw-r--r--  1 root root       104 Jun 24 15:53 crossdomain.xml</span><br><span class="line">drwxr-xr-x  6 root root      4096 Jun 24 15:53 custom/</span><br><span class="line">-rw-r--r--  1 root root      3158 Jun 24 15:53 favicon.ico</span><br><span class="line">drwxr-xr-x  2 root root      4096 Jun 24 15:53 html/</span><br><span class="line">-rw-r--r--  1 root root      4444 Jun 24 15:53 index.htm</span><br><span class="line">-rw-r--r--  1 root root     22758 Jun 24 15:53 index.html</span><br><span class="line">-rw-r--r--  1 root root       318 Jun 24 15:53 index.php</span><br><span class="line">-rw-r--r--  1 root root       523 Jun 24 15:53 js.html</span><br><span class="line">drwxr-xr-x  8 root root      4096 Jun 24 15:53 mes/</span><br><span class="line">drwxr-xr-x  8 root root      4096 Jun 24 15:53 phpcms/</span><br><span class="line">-rw-r--r--  1 root root 168191200 Jun 24 16:38 phpcms.zip</span><br><span class="line">drwxr-xr-x  7 root root      4096 Jun 24 15:53 phpsso_server/</span><br><span class="line">-rw-r--r--  1 root root      3621 Jun 24 15:53 plugin.php</span><br><span class="line">-rw-r--r--  1 root root       170 Jun 24 15:53 robots.txt</span><br><span class="line">drwxr-xr-x  6 root root      4096 Jun 24 15:53 statics/</span><br><span class="line">drwxr-xr-x  4 root root      4096 Jun 24 15:53 uploadfile/</span><br></pre></td></tr></table></figure><p>👉这里的zip压缩包，是已经install后的phpcms，因为项目经理给我的就是安装好的，所以就直接用了。</p><p>反正原理都一样，配置Apache解析域名指向路径就行。</p><h2 id="配置Apache"><a href="#配置Apache" class="headerlink" title="配置Apache"></a>配置Apache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/phpcms.conf</span><br><span class="line">$ cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/phpcms-mes.conf</span><br><span class="line">$ ln -s /etc/apache2/sites-available/phpcms.conf /etc/apache2/sites-enabled/phpcms.conf</span><br><span class="line">$ ln -s /etc/apache2/sites-available/phpcms-mes.conf /etc/apache2/sites-enabled/phpcms-mes.conf</span><br><span class="line">$ vim /etc/apache2/sites-available/phpcms.conf</span><br><span class="line">ServerName js.dbpe-cps.com</span><br><span class="line"><span class="comment"># ServerAdmin webmaster@localhost</span></span><br><span class="line">DocumentRoot /var/www/html/phpcms</span><br><span class="line">$ vim /etc/apache2/sites-available/phpcms-mes.conf</span><br><span class="line">ServerName mes.js.dbpe-cps.com</span><br><span class="line"><span class="comment"># ServerAdmin webmaster@localhost</span></span><br><span class="line">DocumentRoot /var/www/html/phpcms/mes</span><br><span class="line"></span><br><span class="line">$ service apache2 restart</span><br></pre></td></tr></table></figure><h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><p>配置你的域名指向你的服务器就行。这里略过。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Apache常用命令"><a href="#Apache常用命令" class="headerlink" title="Apache常用命令"></a>Apache常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 重启Apache2</span></span><br><span class="line">$ service apache2 restart </span><br><span class="line">$ service apache2 status</span><br><span class="line">$ service apache2 start</span><br></pre></td></tr></table></figure><h2 id="Apache目录"><a href="#Apache目录" class="headerlink" title="Apache目录"></a>Apache目录</h2><ul><li>配置目录：<code>/etc/apache2</code></li><li>默认www目录：<code>/var/www/html</code></li></ul><p>这一点跟其他的不一样，我也是看到配置文件才知道是这个目录的</p><p><img data-src="https://i.loli.net/2019/06/24/5d109f0e7b96224648.png"></p><p>/etc/apache2/apache2.conf</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;安装Apache2&quot;&gt;&lt;a href=&quot;#安装Apache2&quot; class=&quot;headerlink&quot; title=&quot;安装Apache2&quot;&gt;&lt;/a&gt;安装Apache2&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get update -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install apache2 -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo systemctl start apache2.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="phpcms" scheme="https://gcdd1993.github.io/tags/phpcms/"/>
    
  </entry>
  
  <entry>
    <title>发布开源项目到Jcenter</title>
    <link href="https://gcdd1993.github.io/p/53809/"/>
    <id>https://gcdd1993.github.io/p/53809/</id>
    <published>2019-06-10T08:44:17.000Z</published>
    <updated>2021-06-19T15:18:16.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>为了将<a href="https://gcdd1993.github.io/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/">阿里云短信开箱即用</a>发布到Jcenter仓库，前前后后花费了1天半的时间，把端午节都搭进去了。终于今天收到了Jcenter的消息，自己发布的包被添加到了Jcenter仓库，也算给开源社区做了次小贡献😁😁😁。</p></blockquote><span id="more"></span><p><img data-src="https://i.loli.net/2019/06/10/5cfe1b03c61ee37109.png"></p><p>现在记录下踩过的坑。</p><h1 id="注册Jcenter账号"><a href="#注册Jcenter账号" class="headerlink" title="注册Jcenter账号"></a>注册Jcenter账号</h1><p>要注意的地方，Jcenter账号跟国内一样分为社区版和企业版，企业版当然是要付费的，而且很坑的是点进Bintray官网，首先映入眼帘的就是大大的<code>Start Your Free Trial</code>（开始免费试用），一开始我就注册了企业版账号，后来删号重建了😂。我们应该点这里：</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe1c155f37b42837.png"></p><p>填写信息后注册，我是直接使用的Github账号注册。</p><h1 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h1><p>点击右上角<code>View Profile</code></p><p><img data-src="https://i.loli.net/2019/06/10/5cfe1cd1576dc26645.png"></p><p>在账号信息下方，我们点击<code>Add New Repository</code>，创建新的仓库。</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe1d28b975050822.png"></p><p>在填写信息的时候，选择Public（Private是需要付钱的，大家都懂），如果你是maven项目，仓库名最好填写maven，因为我在申请<code>Add To Jcenter</code>时，第一次失败了，要求我把项目放在maven路径下。</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe224c9096c25001.png"></p><h1 id="创建Package"><a href="#创建Package" class="headerlink" title="创建Package"></a>创建Package</h1><p>创建完仓库，就是创建包了，没什么好说的，你的应用叫啥名，包就叫啥名就行。</p><p>创建完可以看到包的基本信息：</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe238ec652b53623.png"></p><h1 id="打包上传"><a href="#打包上传" class="headerlink" title="打包上传"></a>打包上传</h1><p>这里使用的是开源项目<a href="https://github.com/novoda/bintray-release">bintray-release</a>，官方文档<a href="%5Bhttps://github.com/novoda/bintray-release/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3HOME%5D(https://github.com/novoda/bintray-release/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3HOME)">bintray-release/wiki</a></p><p>主要在<code>build.gradle</code>里添加如下信息</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.novoda:bintray-release:0.9.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.novoda.bintray-release&#x27;</span></span><br><span class="line"></span><br><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">&#x27;你的Bintray用户名&#x27;</span></span><br><span class="line">    groupId = <span class="string">&#x27;应用的groupId，例如：io.github.gcdd1993&#x27;</span></span><br><span class="line">    artifactId = <span class="string">&#x27;应用的名称，例如：ali-sms-spring-boot-starter&#x27;</span></span><br><span class="line">    publishVersion = <span class="string">&#x27;应用的版本号，例如：1.0.0.RELEASE&#x27;</span></span><br><span class="line">    desc = <span class="string">&#x27;一句话概述你的应用干啥的&#x27;</span></span><br><span class="line">    website = <span class="string">&#x27;应用链接，一般写github地址就行，例如：https://github.com/gcdd1993/ali-sms-spring-boot-starter&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以下是我自己加的</span></span><br><span class="line"><span class="comment"> * 第一个解决Gradle Task:jar skipped的问题</span></span><br><span class="line"><span class="comment"> * 第二个解决javaDoc &#x27;UTF-8&#x27;乱码问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jar &#123;</span><br><span class="line">    enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来执行<code>gradle</code>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=false</span><br></pre></td></tr></table></figure><p>本地测试可以把<code>-PdryRun=false</code>改为<code>-PdryRun=true</code>，这样就不会帮你上传到Bintray，其他的都执行。</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe29fbd33a449878.png"></p><p>看到以上信息，证明发布成功了。</p><h1 id="Add-To-Jcenter"><a href="#Add-To-Jcenter" class="headerlink" title="Add To Jcenter"></a>Add To Jcenter</h1><p>发布成功后，你应该会在Package的Files标签下看到你上传的文件</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe2aa92b4af15397.png"></p><p>我们点击右上角Actions下的Add To Jcenter</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe2b006401429419.png"></p><p>填写信息，两个复选框我都勾选了，然后填写Group Id，填上应用说明（最好用英文），然后等着就行了。</p><p>一般来说1~3天你将会收到一封邮件，通知你的申请通过没有，如下</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe2ba396f2386226.png"></p><p>👉如果没有通过，也会告诉你怎么改，所以不用担心。</p><p>这时候再打开Bintray的Package页面，会发现<code>Included In Jcenter</code>，证明已经被Jcenter收录了，其他人就可以正常使用啦。</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe2c01e777524132.png"></p><h1 id="Travis-CI持续集成"><a href="#Travis-CI持续集成" class="headerlink" title="Travis CI持续集成"></a>Travis CI持续集成</h1><p>Travis CI是什么就不介绍了，不明白的可以看下<a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">阮一峰的网络日志-持续集成服务 Travis CI 教程</a>，Github公开仓库免费的持续集成工具。</p><p>项目根目录添加<code>.travis.yml</code>，填入以下信息（针对Gradle搭建的Java项目适用）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">java</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">xenial</span></span><br><span class="line"><span class="attr">jdk:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">openjdk8</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">before_cache:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-f</span>  <span class="string">$HOME/.gradle/caches/modules-2/modules-2.lock</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-fr</span> <span class="string">$HOME/.gradle/caches/*/plugin-resolution/</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$HOME/.gradle/caches/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$HOME/.gradle/wrapper/</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./gradlew</span> <span class="string">jar</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./gradlew</span> <span class="string">bintrayUpload</span> <span class="string">-PbintrayUser=$&#123;bintray_user&#125;</span> <span class="string">-PbintrayKey=$&#123;bintray_key&#125;</span> <span class="string">-PdryRun=false</span></span><br></pre></td></tr></table></figure><p>其中变量<code>$&#123;bintray_user&#125;</code>和<code>$&#123;bintray_key&#125;</code>是Travis CI运行时环境变量，请到<a href="https://travis-ci.org/%7Byour-travis-ci-username%7D/ali-sms-spring-boot-starter/settings">Travis CI Settings</a>填写。</p><p><img data-src="https://i.loli.net/2019/06/10/5cfe28657c37a76232.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><p><a href="https://github.com/HailouWang/bintray-release/wiki">bintray-release-wiki</a></p></li><li><p><a href="https://docs.gradle.org/current/userguide/publishing_maven.html">Maven Publish Plugin</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">阮一峰的网络日志-持续集成服务 Travis CI 教程</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了将&lt;a href=&quot;https://gcdd1993.github.io/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/&quot;&gt;阿里云短信开箱即用&lt;/a&gt;发布到Jcenter仓库，前前后后花费了1天半的时间，把端午节都搭进去了。终于今天收到了Jcenter的消息，自己发布的包被添加到了Jcenter仓库，也算给开源社区做了次小贡献😁😁😁。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Jcenter" scheme="https://gcdd1993.github.io/tags/Jcenter/"/>
    
  </entry>
  
  <entry>
    <title>阿里云短信开箱即用</title>
    <link href="https://gcdd1993.github.io/p/28056/"/>
    <id>https://gcdd1993.github.io/p/28056/</id>
    <published>2019-06-07T15:52:16.000Z</published>
    <updated>2021-06-19T15:18:16.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>使用<code>SpringBoot</code>自动装配简化对接阿里云短信过程。</p></blockquote><p><strong>小工具一枚，欢迎使用和Star支持，如使用过程中碰到问题，可以提出Issue，我会尽力完善该Starter。</strong></p><span id="more"></span><h1 id="版本基础"><a href="#版本基础" class="headerlink" title="版本基础"></a>版本基础</h1><p><code>aliyun-java-sdk-core:4.1.0</code></p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.gcdd1993<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-sms-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">&#x27;io.github.gcdd1993:ali-sms-spring-boot-starter:1.0.0.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure><p>👉注意：需要引入<code>Jcenter</code>仓库</p><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>以<code>application.yml</code>举例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ali:</span></span><br><span class="line">  <span class="attr">sms:</span></span><br><span class="line">  <span class="attr">domain:</span> <span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span> <span class="comment">## 默认dysmsapi.aliyuncs.com</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;2017-05-25&quot;</span> <span class="comment">## 默认2017-05-25</span></span><br><span class="line">  <span class="attr">action:</span> <span class="string">&quot;SendSms&quot;</span> <span class="comment">## 默认SendSms</span></span><br><span class="line">    <span class="attr">access-key:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">&quot;$&#123;阿里云短信AccessKeyId&#125;&quot;</span></span><br><span class="line">      <span class="attr">secret:</span> <span class="string">&quot;$&#123;阿里云短信AccessKeySecret&#125;&quot;</span></span><br><span class="line">    <span class="attr">region-id:</span> <span class="string">&quot;$&#123;阿里云短信地域&#125;&quot;</span></span><br><span class="line">    <span class="attr">sign-name:</span> <span class="string">&quot;$&#123;阿里云短信签名&#125;&quot;</span> <span class="comment">## 如果不填，必须在发送方法中指定</span></span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="同步发送短信"><a href="#同步发送短信" class="headerlink" title="同步发送短信"></a>同步发送短信</h3><p>为了方便使用，接口上进行了方法的重载，提供5种不同的参数列表供选择，你可以自行选择使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步发送短信</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     参数1：使用的短信模板ID</span></span><br><span class="line"><span class="comment"> *     参数2：接收者的手机号，如&quot;17602526129,17602923211&quot;</span></span><br><span class="line"><span class="comment"> *     参数3：Map，key对应模板中的参数名，value对应值（这里是使用Jackson来序列化）</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SmsResponse smsResponse = sendService.sendSync(TEMPLATE_ID, PHONE_NUMBER, MAP);</span><br><span class="line">    Assert.assertTrue(smsResponse.isSuccess());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步发送短信</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     参数1：使用的短信模板ID</span></span><br><span class="line"><span class="comment"> *     参数2：接收者的手机号，如&quot;17602526129,17602923211&quot;</span></span><br><span class="line"><span class="comment"> *     参数3：要发送的短信写入值，你可以自己进行json的拼装。注意要进行json的转义，例如：&quot;&#123;\&quot;code\&quot;:\&quot;112233\&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSync1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SmsResponse smsResponse = sendService.sendSync(TEMPLATE_ID, PHONE_NUMBER, <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;112233\&quot;&#125;&quot;</span>);</span><br><span class="line">    Assert.assertTrue(smsResponse.isSuccess());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步发送短信</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     参数1：短信签名，适用于同一模板需要有不同短信签名的</span></span><br><span class="line"><span class="comment"> *     参数2：使用的短信模板ID</span></span><br><span class="line"><span class="comment"> *     参数3：接收者的手机号，如&quot;17602526129,17602923211&quot;</span></span><br><span class="line"><span class="comment"> *     参数4：Map，key对应模板中的参数名，value对应值（这里是使用Jackson来序列化）</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSync2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SmsResponse smsResponse = sendService.sendSync(SIGN_NAME, TEMPLATE_ID, PHONE_NUMBER, MAP);</span><br><span class="line">    Assert.assertTrue(smsResponse.isSuccess());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步发送短信</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     参数1：短信签名，适用于同一模板需要有不同短信签名的</span></span><br><span class="line"><span class="comment"> *     参数2：使用的短信模板ID</span></span><br><span class="line"><span class="comment"> *     参数3：接收者的手机号，如&quot;17602526129,17602923211&quot;</span></span><br><span class="line"><span class="comment"> *     参数4：要发送的短信写入值，你可以自己进行json的拼装。注意要进行json的转义，例如：&quot;&#123;\&quot;code\&quot;:\&quot;112233\&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSync3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SmsResponse smsResponse = sendService.sendSync(SIGN_NAME, TEMPLATE_ID, PHONE_NUMBER, <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;112233\&quot;&#125;&quot;</span>);</span><br><span class="line">    Assert.assertTrue(smsResponse.isSuccess());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一个提供了一个参数对象来定义短信发送请求，如果不嫌麻烦，可以使用这个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云短信请求体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收短信的手机号码。以英文逗号（,）分隔。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumbers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信签名名称。请在控制台签名管理页面签名名称一列查看。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String signName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信模板ID，前缀为SMS_</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer templateId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云短信内容,key:短信模板中的字段名，value：短信模板字段对应值</span></span><br><span class="line"><span class="comment">     * 使用此字段需要&#123;<span class="doctag">@link</span> com.fasterxml.jackson.databind.ObjectMapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; params;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json str of  &#123;<span class="doctag">@link</span> #getParams()&#125;</span></span><br><span class="line"><span class="comment">     * 使用此字段请设置params为Null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String paramStr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSync4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SmsRequest smsRequest = <span class="keyword">new</span> SmsRequest();</span><br><span class="line">    smsRequest.setPhoneNumbers(PHONE_NUMBER);</span><br><span class="line">    smsRequest.setTemplateId(TEMPLATE_ID);</span><br><span class="line">    smsRequest.setParams(MAP);</span><br><span class="line">    SmsResponse smsResponse = sendService.sendSync(smsRequest);</span><br><span class="line">    Assert.assertTrue(smsResponse.isSuccess());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步发送短信"><a href="#异步发送短信" class="headerlink" title="异步发送短信"></a>异步发送短信</h3><blockquote><p>考虑到发短信的需求，一般来说都需要异步加持，对以上5种方法分别提供了异步接口<code>sendAsync</code>，使用方法基本一致，唯一不同的是，你可以异步处理短信发送返回值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;SmsResponse&gt; smsResponse = sendService.sendAsync(TEMPLATE_ID, PHONE_NUMBER, MAP);</span><br><span class="line">smsResponse.thenAcceptAsync(sr -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (sr.isSuccess()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送到消息队列，准备重试此次短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>除了使用以上方法发送短信外，你还可以使用官方的<code>IAcsClient</code>来发送短信，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.gcdd1993.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.request;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.CommonResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.http.MethodType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> io.github.gcdd1993.alisms.domain.SmsRequest;</span><br><span class="line"><span class="keyword">import</span> io.github.gcdd1993.alisms.domain.SmsResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAcsClient acsClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SmsResponse <span class="title">sendSync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">            request.setMethod(MethodType.POST);</span><br><span class="line">            request.setDomain(<span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span>);</span><br><span class="line">            request.setVersion(<span class="string">&quot;2017-05-25&quot;</span>);</span><br><span class="line">            request.setAction(<span class="string">&quot;SendSms&quot;</span>);</span><br><span class="line">            request.putQueryParameter(<span class="string">&quot;RegionId&quot;</span>, <span class="string">&quot;region&quot;</span>);</span><br><span class="line">            request.putQueryParameter(<span class="string">&quot;PhoneNumbers&quot;</span>, <span class="string">&quot;1771636783&quot;</span>);</span><br><span class="line">            request.putQueryParameter(<span class="string">&quot;SignName&quot;</span>, <span class="string">&quot;SignName&quot;</span>);</span><br><span class="line">            request.putQueryParameter(<span class="string">&quot;TemplateCode&quot;</span>, <span class="string">&quot;SMS_12345678&quot;</span>);</span><br><span class="line">            request.putQueryParameter(<span class="string">&quot;TemplateParam&quot;</span>, <span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;112233\&quot;&#125;&quot;</span>);</span><br><span class="line">            CommonResponse commonResponse = acsClient.getCommonResponse(request);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> SmsResponse.SmsResponseBuilder.build(commonResponse);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;send msg error.&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> SmsResponse.SmsResponseBuilder.buildFail(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;write json failed.&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> SmsResponse.SmsResponseBuilder.buildFail(<span class="string">&quot;短信参数在json序列化时出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Licenses"><a href="#Licenses" class="headerlink" title="Licenses"></a>Licenses</h1><p><a href="http://www.apache.org/licenses/LICENSE-2.0.txt">The Apache License, Version 2.0</a></p><h1 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h1><p><a href="https://github.com/gcdd1993/ali-sms-spring-boot-starter/issues">Issues Welcome</a></p><h1 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h1><ul><li>Click <a href="https://github.com/gcdd1993/ali-sms-spring-boot-starter">Github</a> to star, Thanks!</li></ul><h1 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h1><p><a href="https://help.aliyun.com/document_detail/101300.html">阿里云短信服务API参考</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;SpringBoot&lt;/code&gt;自动装配简化对接阿里云短信过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;小工具一枚，欢迎使用和Star支持，如使用过程中碰到问题，可以提出Issue，我会尽力完善该Starter。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Spring Boot" scheme="https://gcdd1993.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>分布式任务调度XXL-JOB初体验</title>
    <link href="https://gcdd1993.github.io/p/29085/"/>
    <id>https://gcdd1993.github.io/p/29085/</id>
    <published>2019-06-05T05:19:33.000Z</published>
    <updated>2021-06-19T15:18:16.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="http://www.xuxueli.com/xxl-job/#/">XXL-JOB</a>是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。<span id="more"></span></p><p>官方文档很完善，不多赘述。本文主要是搭建<code>XXL-JOB</code>和简单使用的记录。</p><h1 id="搭建xxl-job-admin管理端"><a href="#搭建xxl-job-admin管理端" class="headerlink" title="搭建xxl-job-admin管理端"></a>搭建xxl-job-admin管理端</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>Ubuntu 16.04 64位</li><li>Mysql 5.7</li></ul><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置mysql，主要是安全方面的，密码策略等</span></span><br><span class="line">$ mysql_secure_installation</span><br><span class="line"><span class="comment">## 配置远程访问</span></span><br><span class="line">$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">$ sudo service mysql restart</span><br><span class="line">$ sudo service mysql status</span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2019-06-05 13:23:41 HKT; 45s ago</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE database <span class="keyword">if</span> NOT EXISTS `xxl-job` default character <span class="built_in">set</span> utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE USER <span class="string">&#x27;xxl-job&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;xxlJob2019@&#x27;</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON `xxl-job`.* TO <span class="string">&#x27;xxl-job&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="本地测试xxl-job-admin"><a href="#本地测试xxl-job-admin" class="headerlink" title="本地测试xxl-job-admin"></a>本地测试xxl-job-admin</h2><h3 id="拉取最新源码"><a href="#拉取最新源码" class="headerlink" title="拉取最新源码"></a>拉取最新源码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:xuxueli/xxl-job.git</span><br><span class="line">$ <span class="built_in">cd</span> xxl-job</span><br></pre></td></tr></table></figure><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>我比较熟悉<code>Idea</code>开发工具，所以这里使用<code>Idea</code>的<code>Gradle</code>项目进行演示。</p><p>打开<code>xxl-job</code>，项目结构如下</p><p><img data-src="https://i.loli.net/2019/06/05/5cf75c6d3250b91960.png"></p><h3 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h3><p>打开<code>xxl-job-admin/resources/application.properties</code>，修改mysql连接信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### xxl-job, datasource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.32.129:3306/xxl-job?Unicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">xxl-job</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">xxlJob2019@</span></span><br></pre></td></tr></table></figure><p>使用<code>/xxl-job/doc/db/tables_xxl_job.sql</code>初始化数据库，初始化完应该如下图</p><p><img data-src="https://i.loli.net/2019/06/05/5cf75ee24c52a19926.png"></p><p>准备就绪后，就可以启动项目了，然后打开地址<a href="http://localhost:8080/xxl-job-admin%E5%B0%86%E4%BC%9A%E7%9C%8B%E5%88%B0%E9%A6%96%E9%A1%B5">http://localhost:8080/xxl-job-admin将会看到首页</a></p><p><img data-src="https://i.loli.net/2019/06/05/5cf77d0844d8895768.png"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="打包调度中心"><a href="#打包调度中心" class="headerlink" title="打包调度中心"></a>打包调度中心</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /xxl-job</span><br><span class="line">$ mvn install</span><br><span class="line">...</span><br><span class="line">[INFO] xxl-job ............................................ SUCCESS [  0.513 s]</span><br><span class="line">[INFO] xxl-job-core ....................................... SUCCESS [  4.258 s]</span><br><span class="line">[INFO] xxl-job-admin ...................................... SUCCESS [  5.525 s]</span><br><span class="line">[INFO] xxl-job-executor-samples ........................... SUCCESS [  0.016 s]</span><br><span class="line">[INFO] xxl-job-executor-sample-spring ..................... SUCCESS [  2.188 s]</span><br><span class="line">[INFO] xxl-job-executor-sample-springboot ................. SUCCESS [  0.892 s]</span><br><span class="line">[INFO] xxl-job-executor-sample-jfinal ..................... SUCCESS [  1.753 s]</span><br><span class="line">[INFO] xxl-job-executor-sample-nutz ....................... SUCCESS [  1.316 s]</span><br><span class="line">[INFO] xxl-job-executor-sample-frameless .................. SUCCESS [  0.358 s]</span><br><span class="line">[INFO] xxl-job-executor-sample-jboot ...................... SUCCESS [  1.279 s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  18.549 s</span><br><span class="line">[INFO] Finished at: 2019-06-05T14:40:25+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>看到以上信息，说明我们打包成功了，在<code>/xxl-job/xxl-job-admin</code>目录下会存在jar文件：<code>xxl-job-admin-2.1.0-SNAPSHOT.jar</code></p><h3 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install openjdk-8-jdk</span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_212&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_212-8u212-b03-0ubuntu1.16.04.1-b03)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.212-b03, mixed mode)</span><br><span class="line"></span><br><span class="line">$ sudo mkdir -p /data/xxl-job</span><br><span class="line">$ sudo <span class="built_in">cd</span> /data/xxl-job</span><br><span class="line"><span class="comment">## 上传我们打包好的jar至此目录，并添加软连接</span></span><br><span class="line">$ sudo ln -s xxl-job-admin-2.1.0-SNAPSHOT.jar current.jar</span><br><span class="line"></span><br><span class="line"><span class="comment">## 注册为system服务，可以达到异常重启，开机自启等目的</span></span><br><span class="line">$ sudo vim /etc/systemd/system/xxl-job.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=xxl-job Service Daemon</span><br><span class="line">After=mysql.service</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;JAVA_OPTS= -Xmx1024m -Xms1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:NewRatio=3 -Dserver.port=8081&quot;</span></span><br><span class="line"><span class="comment"># java要写绝对路径</span></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/jdk/bin/java -jar /data/xxl-job/current.jar</span><br><span class="line">Restart=always</span><br><span class="line">WorkingDirectory=/data/xxl-job/</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> xxl-job.service</span><br><span class="line">$ sudo service xxl-job start</span><br><span class="line">$ sudo service xxl-job status</span><br><span class="line">● xxl-job.service - xxl-job Service Daemon</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/xxl-job.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2019-07-18 18:19:08 CST; 2min 19s ago</span><br><span class="line"> Main PID: 27572 (java)</span><br><span class="line">   CGroup: /system.slice/xxl-job.service</span><br><span class="line">           └─27572 /usr/<span class="built_in">local</span>/jdk/bin/java -jar /data/xxl-job/current.jar</span><br></pre></td></tr></table></figure><p>我们访问一下<a href="http://192.168.32.129:8080/xxl-job-admin%EF%BC%9A">http://192.168.32.129:8080/xxl-job-admin：</a></p><p><img data-src="https://i.loli.net/2019/06/05/5cf7706901fb080448.png"></p><h1 id="测试任务调度"><a href="#测试任务调度" class="headerlink" title="测试任务调度"></a>测试任务调度</h1><p>以上，我们的任务调度管理端已经搭建完成，接下来，让我们测试下任务调度。</p><p>直接使用自带的<code>SpringBoot</code>测试项目<code>xxl-job-executor-sample-springboot</code>进行测试，修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">xxl-job-executor-sample-springboot</span>=<span class="string">http://192.168.32.129:8080/xxl-job-admin</span></span><br></pre></td></tr></table></figure><h2 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h2><p>编写一个简单的任务，打印100次当前序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.executor.service.jobhandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.biz.model.ReturnT;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.IJobHandler;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.annotation.JobHandler;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.log.XxlJobLogger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JobHandler(value=&quot;gcddJobHandler&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GcddJobHandler</span> <span class="keyword">extends</span> <span class="title">IJobHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title">execute</span><span class="params">(String param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            XxlJobLogger.log(<span class="string">&quot;XXL-JOB, print &quot;</span> + i);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动执行器"><a href="#启动执行器" class="headerlink" title="启动执行器"></a>启动执行器</h2><p>然后启动执行器，启动完成后，我们会发现管理页面的执行器列表会多出我们刚才启动的执行器</p><p><img data-src="https://i.loli.net/2019/06/05/5cf7737de7cad58644.png"></p><h2 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h2><p><img data-src="https://i.loli.net/2019/06/05/5cf776088e84c40188.png"></p><p><img data-src="https://i.loli.net/2019/06/05/5cf77809c3c2d16509.png"></p><h2 id="查看任务执行日志"><a href="#查看任务执行日志" class="headerlink" title="查看任务执行日志"></a>查看任务执行日志</h2><p><img data-src="https://i.loli.net/2019/06/05/5cf7782580be085791.png"></p><p>可以看到，任务已经按照我们的规划执行成功了，非常的方便。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>想要了解更详细的内容，请访问<a href="http://www.xuxueli.com/xxl-job/#/">xxl-job官网</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.xuxueli.com/xxl-job/#/&quot;&gt;XXL-JOB&lt;/a&gt;是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="xxl-job" scheme="https://gcdd1993.github.io/tags/xxl-job/"/>
    
    <category term="分布式" scheme="https://gcdd1993.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>手写IOC容器</title>
    <link href="https://gcdd1993.github.io/p/11305/"/>
    <id>https://gcdd1993.github.io/p/11305/</id>
    <published>2019-06-02T11:59:52.000Z</published>
    <updated>2021-06-19T15:18:16.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是为了学习<code>Spring IOC</code>容器的执行过程而写，不能完全代表<code>Spring IOC</code>容器，只是简单实现了容器的<strong>依赖注入</strong>和<strong>控制反转</strong>功能，无法用于生产，只能说对理解Spring容器能够起到一定的作用。</p><span id="more"></span><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建Gradle项目，并修改<code>build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&quot;io.franzbecker.gradle-lombok&quot;</span> version <span class="string">&quot;3.1.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;io.github.gcdd1993&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.12&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建BeanFactory"><a href="#创建BeanFactory" class="headerlink" title="创建BeanFactory"></a>创建<code>BeanFactory</code></h2><p><code>BeanFactory</code>是IOC中用于存放bean实例以及获取bean的核心接口，它的核心方法是<code>getBean</code>以及<code>getBean</code>的重载方法，这里简单实现两个<code>getBean</code>的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.gcdd1993.ioc.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bean factory interface</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过bean名称获取bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name bean名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过bean类型获取bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass bean类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型T</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; tClass)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建ApplicationContext上下文"><a href="#创建ApplicationContext上下文" class="headerlink" title="创建ApplicationContext上下文"></a>创建<code>ApplicationContext</code>上下文</h2><p><code>ApplicationContext</code>，即我们常说的应用上下文，实际就是Spring容器本身了。</p><p>我们创建<code>ApplicationContext</code>类，并实现<code>BeanFactory</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> <span class="keyword">implements</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getBean方法"><a href="#getBean方法" class="headerlink" title="getBean方法"></a><code>getBean</code>方法</h3><p>既然说是容器，那肯定要有地方装我们的bean实例吧，使用两个Map作为容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按照beanName分组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; beanByNameMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按照beanClass分组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Object&gt; beanByClassMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>然后，我们可以先完成我们的<code>getBean</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> beanByNameMap.get(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; tClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tClass.cast(beanByClassMap.get(tClass));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接从Map中获取bean实例，是不是很简单？当然了，在真实的Spring容器中，是不会这么简单啦，不过我们这次是要化繁为简，理解IOC容器。</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>Spring提供了<code>@ComponentScan</code>来扫描包下的<code>Component</code>，我们为了简便，直接在构造器中指定要扫描的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; basePackages;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认构造器，默认扫描当前所在包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> HashSet&lt;&gt;(Collections.singletonList(ApplicationContext.class.getPackage().getName())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全参构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> basePackages 扫描的包名列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApplicationContext</span><span class="params">(Set&lt;String&gt; basePackages)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.basePackages = basePackages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="refresh方法"><a href="#refresh方法" class="headerlink" title="refresh方法"></a><code>refresh</code>方法</h3><p>refresh的过程基本按照以下流程来走</p><p><img data-src="https://i.loli.net/2019/06/02/5cf3c4c4b465587417.png"></p><ol><li>扫描指定的包下所有带<code>@Bean</code>注解（Spring中是<code>@Component</code>注解）的类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Class&gt; beanClasses = PackageScanner.findClassesWithAnnotation(packageName, Bean.class);</span><br><span class="line">System.out.println(<span class="string">&quot;scan classes with Bean annotation : &quot;</span> + beanClasses.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Class beanClass : beanClasses) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        createBean(beanClass);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>遍历类，获取类的构造器以及所有字段。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor = beanClass.getDeclaredConstructor();</span><br><span class="line">Object object = constructor.newInstance();</span><br><span class="line">Field[] fields = beanClass.getDeclaredFields();</span><br></pre></td></tr></table></figure><ol start="3"><li><p>判断字段是依赖注入的还是普通字段。</p></li><li><p>如果是普通字段，通过字段类型初始化该字段，并尝试从<code>@Value</code>注解获取值塞给字段。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Value value = field.getAnnotation(Value.class);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 注入</span></span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 需要做一些类型转换，从String转为对应的类型</span></span><br><span class="line">    field.set(object, value.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>如果是依赖注入的字段，尝试从<code>beanByClassMap</code>中获取对应的实例，如果没有，就先要去实例化该字段对应的类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Autowired autowired = field.getAnnotation(Autowired.class);</span><br><span class="line"><span class="keyword">if</span> (autowired != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 依赖注入</span></span><br><span class="line">    String name = autowired.name();</span><br><span class="line">    <span class="comment">// 按照名称注入</span></span><br><span class="line">    Object diObj;</span><br><span class="line">    <span class="keyword">if</span> (!name.isEmpty()) &#123;</span><br><span class="line">        diObj = beanByNameMap.get(name) == <span class="keyword">null</span> ?</span><br><span class="line">                createBean(name) :</span><br><span class="line">                beanByNameMap.get(name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 按照类型注入</span></span><br><span class="line">        Class&lt;?&gt; aClass = field.getType();</span><br><span class="line">        diObj = beanByClassMap.get(aClass) == <span class="keyword">null</span> ?</span><br><span class="line">                createBean(aClass) :</span><br><span class="line">                beanByClassMap.get(aClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注入</span></span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    field.set(object, diObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试我们的IOC容器"><a href="#测试我们的IOC容器" class="headerlink" title="测试我们的IOC容器"></a>测试我们的IOC容器</h2><p>创建<code>Address</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;2222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String longitude;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;1111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String latitude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>Person</code>并注入<code>Address</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;gaochen&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;27&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类<code>ApplicationContextTest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; basePackages = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        basePackages.add(<span class="string">&quot;io.github.gcdd1993.ioc&quot;</span>);</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ApplicationContext(basePackages);</span><br><span class="line">        ctx.refresh();</span><br><span class="line"></span><br><span class="line">        Person person = ctx.getBean(Person.class);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        Object person1 = ctx.getBean(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台将会输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scan classes with Bean annotation : [class io.github.gcdd1993.ioc.util.Address, class io.github.gcdd1993.ioc.util.Person]</span><br><span class="line">scan classes with Bean annotation : [class io.github.gcdd1993.ioc.util.Address, class io.github.gcdd1993.ioc.util.Person]</span><br><span class="line">Person(address=Address(longitude=2222, latitude=1111), name=gaochen, age=27)</span><br><span class="line">Person(address=Address(longitude=2222, latitude=1111), name=gaochen, age=27)</span><br></pre></td></tr></table></figure><p>可以看到，我们成功将Address实例注入到了Person实例中，并且将它们存储在了我们自己的IOC容器中。其实，Spring容器的原理大致就是如此，只不过为了应对企业级开发，提供了很多便捷的功能，例如bean的作用域、bean的自定义方法等等。</p><h1 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h1><p>完整源码可以在我的<code>github</code>仓库获取👉<a href="https://github.com/gcdd1993/Simple-IOC-Container">Simple-IOC-Container</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是为了学习&lt;code&gt;Spring IOC&lt;/code&gt;容器的执行过程而写，不能完全代表&lt;code&gt;Spring IOC&lt;/code&gt;容器，只是简单实现了容器的&lt;strong&gt;依赖注入&lt;/strong&gt;和&lt;strong&gt;控制反转&lt;/strong&gt;功能，无法用于生产，只能说对理解Spring容器能够起到一定的作用。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>使用Tesseract-Ocr识别数字</title>
    <link href="https://gcdd1993.github.io/p/5479/"/>
    <id>https://gcdd1993.github.io/p/5479/</id>
    <published>2019-06-01T17:59:30.000Z</published>
    <updated>2021-06-19T15:18:16.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/tesseract-ocr/tesseract">Tesseract-Ocr</a>是我在编写爬虫项目中，用来识别图片（不是验证码）的本地解决方案（因为客户不想使用API识别，太贵），识别率目前达到了100%，可以说是相当了得，当然了，这取决于使用的<code>traineddata</code>。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>Tesseract最初是在1985年至1994年间在Hewlett-Packard Laboratories Bristol和Greeley Colorado的Hewlett-Packard Co开发的，1996年进行了一些更改，移植到Windows，并且随着C++在1998年兴起。2005年Tesseract由惠普开源，然后从2006年至今，由谷歌继续开发。</p></blockquote><p>Tesseract-Ocr并不是一个软件，它是一个软件包，包含了一个OCR引擎【libtesseract】和一个命令行程序 【tesseract】。Tesseract 4增加了一个基于OCR引擎的新神经网络（LSTM），该引擎专注于行级识别，但仍然支持Tesseract 3的传统Tesseract OCR引擎，该引擎通过识别字符模式来工作。</p><p>要启用与Tesseract 3的兼容性，你需要使用Legacy OCR Engine模式（–oem 0）。它还需要支持传统引擎的traineddata（训练好的数据文件），这些文件可以从<a href="https://github.com/tesseract-ocr/tessdata">tessdata存储库</a>的文件获取。</p><p>Tesseract支持识别unicode（UTF-8），可以“开箱即用”识别100多种语言。</p><p>Tesseract支持多种输出格式：纯文本，hOCR（HTML），PDF，TSV。主分支还具有ALTO（XML）输出的实验支持。</p><p>⭐️⭐️⭐️ 具体介绍可以上<a href="https://github.com/tesseract-ocr/tesseract/wiki">tesseract-wiki</a>查看。</p><h1 id="在Java上使用"><a href="#在Java上使用" class="headerlink" title="在Java上使用"></a>在Java上使用</h1><h2 id="创建项目，并引入Jar包"><a href="#创建项目，并引入Jar包" class="headerlink" title="创建项目，并引入Jar包"></a>创建项目，并引入Jar包</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tess4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">&#x27;net.sourceforge.tess4j:tess4j:4.3.1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="导入traineddata"><a href="#导入traineddata" class="headerlink" title="导入traineddata"></a>导入traineddata</h2><p><code>traineddata</code>是使用<code>Tesseract-Ocr</code>训练好的数据文件，可以直接使用。这些文件你可以去<a href="https://github.com/tesseract-ocr/tessdata">tessdata存储库</a>查找，也可以去谷歌搜索，当然了，你也可以自己训练😂。</p><p><code>traineddata</code>通常以<code>*.traineddata</code>命名，其中*指的是支持的语言类型。在<a href="https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-400-november-29-2016">这里</a>你可以看到4.0.0版本支持的语言以及<code>traineddata</code>列表。</p><p>这次，我们选择<code>eng.traineddata</code>进行测试。下载<a href="https://www.lanzous.com/i4en81a">eng.traineddata</a>放入<code>/resources/traineddata</code>目录，如下图所示。</p><p><img data-src="https://i.loli.net/2019/06/02/5cf2c4189371f48480.png"></p><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><h3 id="初始化Tesseract引擎"><a href="#初始化Tesseract引擎" class="headerlink" title="初始化Tesseract引擎"></a>初始化Tesseract引擎</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TesseractTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ITesseract tesseract;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tesseract = <span class="keyword">new</span> Tesseract();</span><br><span class="line">        System.out.println(<span class="string">&quot;tesseract init done...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，上面的代码是无法正常运行的，因为找不到指定语言版本的<code>traineddata</code>文件。</p><p><code>net.sourceforge.tess4j:tess4j:4.1.1</code>提供的API并不好，在<code>Tesseract</code>构造函数中，没有提供可选参数的构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tesseract</span> <span class="keyword">implements</span> <span class="title">ITesseract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tesseract使用的语言版本，用以选择traineddata</span></span><br><span class="line">    <span class="keyword">private</span> String language = <span class="string">&quot;eng&quot;</span>;</span><br><span class="line">    <span class="comment">// traineddata目录，里面放*.traineddata数据文件</span></span><br><span class="line">    <span class="keyword">private</span> String datapath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tesseract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 默认从系统环境变量获取traineddata目录</span></span><br><span class="line">            datapath = System.getenv(<span class="string">&quot;TESSDATA_PREFIX&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (datapath == <span class="keyword">null</span>) &#123;</span><br><span class="line">                datapath = <span class="string">&quot;./&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets language for OCR.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> language the language code, which follows ISO 639-3 standard.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLanguage</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.language = language;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets path to &lt;code&gt;tessdata&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datapath the tessdata path to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatapath</span><span class="params">(String datapath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.datapath = datapath;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我们可以选择设置环境变量<code>TESSDATA_PREFIX</code>为数据目录，或者通过Java编码的方式来设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tesseract.setLanguage(<span class="string">&quot;eng&quot;</span>); <span class="comment">// 默认就是eng，你可以选择其他lang</span></span><br><span class="line">tesseract.setDatapath(TesseractTest.class.getResource(<span class="string">&quot;/traineddata&quot;</span>).getPath().substring(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h3 id="OCR识别测试"><a href="#OCR识别测试" class="headerlink" title="OCR识别测试"></a>OCR识别测试</h3><p><code>tesseract</code>提供了一系列<code>doOcr</code>方法的重载，我们可以方便的进行OCR识别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(File imageFile)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(File imageFile, Rectangle rect)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(BufferedImage bi)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(BufferedImage bi, Rectangle rect)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(List&lt;IIOImage&gt; imageList, Rectangle rect)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(List&lt;IIOImage&gt; imageList, String filename, Rectangle rect)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(<span class="keyword">int</span> xsize, <span class="keyword">int</span> ysize, ByteBuffer buf, Rectangle rect, <span class="keyword">int</span> bpp)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">doOCR</span><span class="params">(<span class="keyword">int</span> xsize, <span class="keyword">int</span> ysize, ByteBuffer buf, String filename, Rectangle rect, <span class="keyword">int</span> bpp)</span> <span class="keyword">throws</span> TesseractException</span>;</span><br></pre></td></tr></table></figure><p>可以看出，<code>doOcr</code>方法支持多种图片识别方式，如图片文件、多个图片文件、图片文件局部处理等等方式。</p><p>为了方便测试，我们选取最简单的图片文件方式测试。</p><p><a href="http://static8.ziroom.com/phoenix/pc/images/price/aacd14fbc53a106c7f0f0d667535683as.png">图片</a>是个URL链接，如下所示</p><p><img data-src="https://i.loli.net/2019/06/02/5cf2c992174bd56164.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOcr</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TesseractException </span>&#123;</span><br><span class="line">    BufferedImage image = ImageIO.read(<span class="keyword">new</span> URL(<span class="string">&quot;http://static8.ziroom.com/phoenix/pc/images/price/aacd14fbc53a106c7f0f0d667535683as.png&quot;</span>));</span><br><span class="line">    String ocr = tesseract.doOCR(image);</span><br><span class="line">    System.out.println(<span class="string">&quot;ocr result : &quot;</span> + ocr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tesseract init done...</span><br><span class="line">ocr result : 2710386495</span><br></pre></td></tr></table></figure><p>识别准确率，主要在于<strong>你选择的训练数据文件</strong>，我使用的是数据文件是<a href="https://www.lanzous.com/i4en81a">这个</a>，对于数字的准确率基本上是100%。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>如果你遭遇<code>Invalid memory access</code>异常，这是由于找不到对应lang的<code>*.traineddata</code>文件，请修改<code>language</code>和<code>datapath</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Invalid memory access</span><br><span class="line">java.lang.Error: Invalid memory access</span><br><span class="line">at com.sun.jna.Native.invokePointer(Native Method)</span><br><span class="line">at com.sun.jna.Function.invokePointer(Function.java:470)</span><br><span class="line">at com.sun.jna.Function.invoke(Function.java:404)</span><br><span class="line">at com.sun.jna.Function.invoke(Function.java:315)</span><br><span class="line">at com.sun.jna.Library<span class="variable">$Handler</span>.invoke(Library.java:212)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy9</span>.TessBaseAPIGetUTF8Text(Unknown Source)</span><br><span class="line">at net.sourceforge.tess4j.Tesseract.getOCRText(Tesseract.java:495)</span><br><span class="line">at net.sourceforge.tess4j.Tesseract.doOCR(Tesseract.java:321)</span><br><span class="line">at net.sourceforge.tess4j.Tesseract.doOCR(Tesseract.java:293)</span><br><span class="line">at net.sourceforge.tess4j.Tesseract.doOCR(Tesseract.java:274)</span><br><span class="line">at net.sourceforge.tess4j.Tesseract.doOCR(Tesseract.java:258)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="训练工具"><a href="#训练工具" class="headerlink" title="训练工具"></a>训练工具</h1><p><a href="https://github.com/tesseract-ocr/tesseract/wiki/AddOns">https://github.com/tesseract-ocr/tesseract/wiki/AddOns</a></p><h1 id="训练数据仓库"><a href="#训练数据仓库" class="headerlink" title="训练数据仓库"></a>训练数据仓库</h1><ul><li><a href="https://github.com/tesseract-ocr/tessdata_best">tessdata_best</a>：基于LSTM引擎的训练数据，最佳最准确的</li><li><a href="https://github.com/tesseract-ocr/tessdata_fast">tessdata_fast</a>：基于LSTM引擎的训练数据，快速（精简）版本</li><li><a href="https://github.com/tesseract-ocr/tessdata">tessdata</a>：支持双引擎（LSTM和传统引擎），但LSTM训练数据不是最新的版本</li></ul><p>推荐使用<a href="https://github.com/tesseract-ocr/tessdata_best">tessdata_best</a>，虽然识别速度相对于<a href="https://github.com/tesseract-ocr/tessdata_fast">tessdata_fast</a>稍慢，但是准确率可以保证。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/tesseract-ocr/tesseract/wiki">tesseract-ocr-wiki</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tesseract-ocr/tesseract&quot;&gt;Tesseract-Ocr&lt;/a&gt;是我在编写爬虫项目中，用来识别图片（不是验证码）的本地解决方案（因为客户不想使用API识别，太贵），识别率目前达到了100%，可以说是相当了得，当然了，这取决于使用的&lt;code&gt;traineddata&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Tesseract-Ocr" scheme="https://gcdd1993.github.io/tags/Tesseract-Ocr/"/>
    
  </entry>
  
  <entry>
    <title>理解一致性Hash算法</title>
    <link href="https://gcdd1993.github.io/p/61241/"/>
    <id>https://gcdd1993.github.io/p/61241/</id>
    <published>2019-05-29T09:13:47.000Z</published>
    <updated>2021-06-19T15:18:16.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>一致性哈希算法在1997年由麻省理工学院的Karger等人在解决分布式Cache中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简单哈希算法带来的问题，使得DHT可以在P2P环境中真正得到应用。</p></blockquote><p>现在一致性hash算法在分布式系统中也得到了广泛应用，研究过memcached缓存数据库的人都知道，memcached服务器端本身不提供分布式cache的一致性，而是由客户端来提供，具体在计算一致性hash时采用如下步骤：</p><span id="more"></span><ol><li><p>首先求出memcached服务器（节点）的哈希值，并将其配置到0～2^32的圆（continuum）上。</p></li><li><p>采用同样的方法求出存储数据的键的哈希值，并映射到相同的圆上。</p></li><li><p>从数据映射到的位置开始<strong>顺时针</strong>查找，将数据保存到找到的第一个服务器上。如果超过2^32仍然找不到服务器，就会保存到第一台memcached服务器上。</p></li></ol><p><img data-src="https://i.loli.net/2019/05/29/5cee559706c3135766.png"></p><p>从上图的状态中添加一台memcached服务器。余数分布式算法由于保存键的服务器会发生巨大变化而影响缓存的命中率，但Consistent Hashing中，只有在圆（continuum）上增加服务器的地点逆时针方向的第一台服务器上的键会受到影响，如下图所示：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee508b7cfab34733.png"></p><h1 id="一致性Hash性质"><a href="#一致性Hash性质" class="headerlink" title="一致性Hash性质"></a>一致性Hash性质</h1><blockquote><p>考虑到分布式系统每个节点都有可能<strong>失效</strong>，并且<strong>新的节点</strong>很可能动态的增加进来，如何保证当系统的节点数目发生变化时仍然能够对外提供良好的服务，这是值得考虑的。</p><p>尤其是在设计分布式缓存系统时，如果某台服务器失效，对于整个系统来说如果不采用合适的算法来保证一致性，那么缓存于系统中的所有数据都可能会失效（即由于系统节点数目变少，客户端在请求某一对象时需要重新计算其hash值（通常与系统中的节点数目有关），由于hash值已经改变，所以很可能找不到保存该对象的服务器节点），因此一致性hash就显得至关重要。</p></blockquote><p>良好的分布式cahce系统中的一致性hash算法应该满足以下几个方面：</p><ul><li><strong>平衡性(Balance)</strong></li></ul><blockquote><p>平衡性是指<strong>哈希的结果能够尽可能分布到所有的缓冲中去</strong>，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</p></blockquote><ul><li><strong>单调性(Monotonicity)</strong></li></ul><blockquote><p>单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲区加入到系统中，那么哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲区中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</p><p>简单的哈希算法往往不能满足单调性的要求，如最简单的线性哈希<code>x = (ax + b) mod (P)</code>，在上式中，P表示全部缓冲的大小。不难看出，当缓冲大小发生变化时(从P1到P2)，原来所有的哈希结果均会发生变化，从而不满足单调性的要求。</p><p>哈希结果的变化意味着当缓冲空间发生变化时，所有的映射关系需要在系统内全部更新。而在P2P系统内，缓冲的变化等价于Peer加入或退出系统，这一情况在P2P系统中会频繁发生，因此会带来极大计算和传输负荷。<strong>单调性就是要求哈希算法能够应对这种情况</strong>。</p></blockquote><ul><li><strong>分散性(Spread)</strong></li></ul><blockquote><p>在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。</p><p>当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。</p><p>分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是<strong>尽量降低分散性</strong>。</p></blockquote><ul><li><strong>负载(Load)</strong></li></ul><blockquote><p>负载问题实际上是从另一个角度看待分散性问题。</p><p>既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同的内容。</p><p>与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够<strong>尽量降低缓冲的负荷</strong>。</p></blockquote><ul><li><strong>平滑性(Smoothness)</strong></li></ul><blockquote><p>平滑性是指缓存服务器的数目平滑改变和缓存对象的平滑改变是一致的。</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一致性哈希算法（Consistent Hashing）最早在论文《<a href="https://link.juejin.im/?target=http://dl.acm.org/citation.cfm?id=258660">Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</a>》中被提出。</p><p>简单来说，一致性哈希将整个哈希值空间组织成一个<strong>虚拟的圆环</strong>，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形），整个哈希空间环如下：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee54431b19c11690.png"></p><p>整个空间按顺时针方向组织。0和2^32-1在零点中方向重合。</p><p>下一步将各个服务器使用Hash进行一个哈希，具体可以选择<strong>服务器的ip或主机名</strong>作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置，这里假设将上文中四台服务器使用ip地址哈希后在环空间的位置如下：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee5564c55f998409.png"></p><p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环<strong>顺时针</strong>“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p><p>例如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee55cfac53c21054.png"></p><p>根据一致性哈希算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。</p><h2 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h2><p>现假设Node C不幸宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。</p><p>一般的，在一致性哈希算法中，<strong>如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</strong></p><h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>如果在系统中增加一台服务器Node X，如下图所示：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee566ef2a4232874.png"></p><p>此时对象Object A、B、D不受影响，只有对象C需要重定位到新的Node X 。</p><p>一般的，在一致性哈希算法中，<strong>如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。</strong></p><p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p><h2 id="数据倾斜问题"><a href="#数据倾斜问题" class="headerlink" title="数据倾斜问题"></a>数据倾斜问题</h2><p>另外，一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee56cb65e7138601.png"></p><p>此时必然造成大量数据集中到Node A上，而只有极少量会定位到Node B上。</p><p>为了解决这种数据倾斜问题，一致性哈希算法引入了<strong>虚拟节点机制</strong>，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。</p><p>具体做法可以在服务器ip或主机名的后面增加编号来实现。例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “Node A#1”、“Node A#2”、“Node A#3”、“Node B#1”、“Node B#2”、“Node B#3”的哈希值，于是形成六个虚拟节点：</p><p><img data-src="https://i.loli.net/2019/05/29/5cee56f99435a20863.png"></p><p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Node A#1”、“Node A#2”、“Node A#3”三个虚拟节点的数据均定位到Node A上。这样就解决了服务节点少时数据倾斜的问题。</p><p>在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p><h1 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h1><p>一致性Hash模拟类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一致性Hash</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHash</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点的复制因子,实际节点个数 * numberOfReplicas</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> numberOfReplicas;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 虚拟节点个数,存储虚拟节点的hash值到真实节点的映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, T&gt; circle = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsistentHash</span><span class="params">(<span class="keyword">int</span> numberOfReplicas, Collection&lt;T&gt; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberOfReplicas = numberOfReplicas;</span><br><span class="line">        <span class="keyword">for</span> (T node : nodes) &#123;</span><br><span class="line">            add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加一个节点</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 对于一个实际机器节点 node, 对应 numberOfReplicas 个虚拟节点</span></span><br><span class="line"><span class="comment">     * 不同的虚拟节点(i不同)有不同的hash值,但都对应同一个实际机器node</span></span><br><span class="line"><span class="comment">     * 虚拟node一般是均衡分布在环上的,数据存储在顺时针方向的虚拟node上</span></span><br><span class="line"><span class="comment">     * &lt;/P&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 哈希环节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReplicas; i++) &#123;</span><br><span class="line">            String nodestr = node.toString() + i;</span><br><span class="line">            <span class="keyword">int</span> hashcode = nodestr.hashCode();</span><br><span class="line">            System.out.println(<span class="string">&quot;hashcode:&quot;</span> + hashcode);</span><br><span class="line">            circle.put(hashcode, node);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 待删除节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfReplicas; i++) &#123;</span><br><span class="line">            circle.remove((node.toString() + i).hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得一个最近的顺时针节点,根据给定的key 取Hash</span></span><br><span class="line"><span class="comment">     * 然后再取得顺时针方向上最近的一个虚拟节点对应的实际节点</span></span><br><span class="line"><span class="comment">     * 再从实际节点中取得 数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 模拟缓存Key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (circle.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// node 用String来表示,获得node在哈希环中的hashCode</span></span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;hashcode-----&gt;:&quot;</span> + hash);</span><br><span class="line">        <span class="comment">//数据映射在两台虚拟机器所在环之间,就需要按顺时针方向寻找机器</span></span><br><span class="line">        <span class="keyword">if</span> (!circle.containsKey(hash)) &#123;</span><br><span class="line">            SortedMap&lt;Integer, T&gt; tailMap = circle.tailMap(hash);</span><br><span class="line">            hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circle.get(hash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前哈希环节点数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 哈希环节点数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> circle.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看表示整个哈希环中各个虚拟节点位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得TreeMap中所有的Key</span></span><br><span class="line">        Set&lt;Integer&gt; sets = circle.keySet();</span><br><span class="line">        <span class="comment">//将获得的Key集合排序</span></span><br><span class="line">        SortedSet&lt;Integer&gt; sortedSets = <span class="keyword">new</span> TreeSet&lt;Integer&gt;(sets);</span><br><span class="line">        <span class="keyword">for</span> (Integer hashCode : sortedSets) &#123;</span><br><span class="line">            System.out.println(hashCode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----each location &#x27;s distance are follows: ----&quot;</span>);</span><br><span class="line">        <span class="comment">//查看相邻两个hashCode的差值</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = sortedSets.iterator();</span><br><span class="line">        Iterator&lt;Integer&gt; it2 = sortedSets.iterator();</span><br><span class="line">        <span class="keyword">if</span> (it2.hasNext()) &#123;</span><br><span class="line">            it2.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> keyPre, keyAfter;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext() &amp;&amp; it2.hasNext()) &#123;</span><br><span class="line">            keyPre = it.next();</span><br><span class="line">            keyAfter = it2.next();</span><br><span class="line">            System.out.println(keyAfter - keyPre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConsistentHash&lt;String&gt; consistentHash;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; nodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        consistentHash = <span class="keyword">new</span> ConsistentHash&lt;&gt;(<span class="number">2</span>, nodes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 分配三个节点</span></span><br><span class="line">        consistentHash.add(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">        consistentHash.add(<span class="string">&quot;C1&quot;</span>);</span><br><span class="line">        consistentHash.add(<span class="string">&quot;D1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hash circle size: &quot;</span> + consistentHash.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;location of each node are follows: &quot;</span>);</span><br><span class="line"><span class="comment">//        consistentHash.showBalance();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// hash值在当前哈希环内</span></span><br><span class="line">        <span class="keyword">final</span> String key1 = <span class="string">&quot;A31&quot;</span>;</span><br><span class="line">        <span class="comment">// hash值超出了当前哈希环</span></span><br><span class="line">        <span class="keyword">final</span> String key2 = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; keys = Arrays.asList(key1, key2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟节点分配</span></span><br><span class="line">        showAllocate(keys);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟增加节点, A31被分配到更近的B1节点</span></span><br><span class="line">        consistentHash.add(<span class="string">&quot;B1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加节点B1&quot;</span>);</span><br><span class="line">        showAllocate(keys);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟删除节点, A31被分配到更近的C1节点</span></span><br><span class="line">        consistentHash.remove(<span class="string">&quot;B1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除节点B1&quot;</span>);</span><br><span class="line">        showAllocate(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟缓存分配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys 缓存键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showAllocate</span><span class="params">(List&lt;String&gt; keys)</span> </span>&#123;</span><br><span class="line">        keys.forEach(key -&gt; &#123;</span><br><span class="line">            String node = consistentHash.get(key);</span><br><span class="line">            <span class="comment">// A31被分配到更近的C1节点</span></span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;key %s is allocated to node %s&quot;</span>, key, node));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hashcode:64032</span><br><span class="line">hashcode:64033</span><br><span class="line">hashcode:65954</span><br><span class="line">hashcode:65955</span><br><span class="line">hashcode:66915</span><br><span class="line">hashcode:66916</span><br><span class="line"><span class="built_in">hash</span> circle size: 6</span><br><span class="line">location of each node are follows: </span><br><span class="line">hashcode-----&gt;:64095</span><br><span class="line">key A31 is allocated to node C1</span><br><span class="line">hashcode-----&gt;:63476538</span><br><span class="line">key Apple is allocated to node A1</span><br><span class="line">hashcode:64993</span><br><span class="line">hashcode:64994</span><br><span class="line">增加节点B1</span><br><span class="line">hashcode-----&gt;:64095</span><br><span class="line">key A31 is allocated to node B1</span><br><span class="line">hashcode-----&gt;:63476538</span><br><span class="line">key Apple is allocated to node A1</span><br><span class="line">-------------------------------------</span><br><span class="line">删除节点B1</span><br><span class="line">hashcode-----&gt;:64095</span><br><span class="line">key A31 is allocated to node C1</span><br><span class="line">hashcode-----&gt;:63476538</span><br><span class="line">key Apple is allocated to node A1</span><br></pre></td></tr></table></figure><p>可以看出，增加或删除节点，只会影响到节点与上一个节点之间的元素，所以一致性Hash算法在容错性和可扩展性上面较普通Hash是有巨大提升的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.im/post/5ae1476ef265da0b8d419ef2#heading-4">五分钟看懂一致性哈希算法</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">维基百科-散列函数</a></p><p><a href="http://blog.codinglabs.org/articles/consistent-hashing.html">一致性哈希算法及其在分布式系统中的应用</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一致性哈希算法在1997年由麻省理工学院的Karger等人在解决分布式Cache中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简单哈希算法带来的问题，使得DHT可以在P2P环境中真正得到应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在一致性hash算法在分布式系统中也得到了广泛应用，研究过memcached缓存数据库的人都知道，memcached服务器端本身不提供分布式cache的一致性，而是由客户端来提供，具体在计算一致性hash时采用如下步骤：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="一致性Hash" scheme="https://gcdd1993.github.io/tags/%E4%B8%80%E8%87%B4%E6%80%A7Hash/"/>
    
  </entry>
  
  <entry>
    <title>理解Nginx负载均衡</title>
    <link href="https://gcdd1993.github.io/p/52703/"/>
    <id>https://gcdd1993.github.io/p/52703/</id>
    <published>2019-05-29T02:30:45.000Z</published>
    <updated>2021-06-19T15:18:16.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作以来，一直都在使用Nginx作为负载均衡服务器，但是关于Nginx的负载均衡算法一直没有深入理解过，这次好好的整理下。</p><span id="more"></span><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><blockquote><p>搭建三台用于测试的虚拟机</p></blockquote><table><thead><tr><th>名称</th><th>IP</th><th>服务</th></tr></thead><tbody><tr><td>node01</td><td>192.168.198.131</td><td>Nginx、模拟业务（8080）</td></tr><tr><td>node02</td><td>192.168.198.130</td><td>模拟业务（8080）</td></tr><tr><td>node03</td><td>192.168.198.132</td><td>模拟业务（8080）</td></tr></tbody></table><p>修改<code>hostname</code>和<code>hosts</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/hosts</span><br><span class="line">192.168.198.131 node01</span><br><span class="line">$ vim /etc/hostname</span><br><span class="line">node01</span><br><span class="line">$ reboot</span><br><span class="line"><span class="comment">## 其余两台也改下，并重启使配置生效</span></span><br></pre></td></tr></table></figure><p>在node01上<a href="https://gcdd1993.github.io/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/#Nginx">安装Nginx服务</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;deb http://nginx.org/packages/ubuntu/ <span class="subst">$(lsb_release -cs)</span> nginx\ndeb-src http://nginx.org/packages/ubuntu/ <span class="subst">$(lsb_release -cs)</span> nginx&quot;</span> | sudo tee /etc/apt/sources.list.d/nginx.list</span><br><span class="line">$ wget -O- http://nginx.org/keys/nginx_signing.key | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="模拟业务"><a href="#模拟业务" class="headerlink" title="模拟业务"></a>模拟业务</h2><p>使用<a href="https://start.spring.io/">https://start.spring.io</a>快速新建<code>Spring Boot</code>项目，添加Web模块，并编写以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is : &quot;</span> + Inet4Address.getLocalHost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包并部署到服务器，我使用的是<a href="https://docs.gradle.org/current/userguide/application_plugin.html">The Application Plugin</a>，部署完毕启动</p><p><img data-src="https://i.loli.net/2019/05/29/5cedfb9fdb17458291.png"></p><p>测试下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## node01</span></span><br><span class="line">$ curl 192.168.198.131:8080/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br><span class="line"><span class="comment">## node02</span></span><br><span class="line">$ curl 192.168.198.130:8080/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node02/192.168.198.130</span><br><span class="line"><span class="comment">## node03</span></span><br><span class="line">$ curl 192.168.198.132:8080/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br></pre></td></tr></table></figure><h1 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h1><h2 id="Round-Robin（轮询）"><a href="#Round-Robin（轮询）" class="headerlink" title="Round Robin（轮询）"></a><strong>Round Robin</strong>（轮询）</h2><blockquote><p>请求在服务器之间均匀分布，<strong>可以设置服务器权重</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf/demo.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line">server 192.168.198.131:8080;</span><br><span class="line">server 192.168.198.132:8080;</span><br><span class="line">server 192.168.198.130:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name 192.168.198.131;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131 <span class="comment"># node01</span></span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132 <span class="comment"># node03</span></span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.130 <span class="comment"># node02</span></span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131 <span class="comment"># node01</span></span><br></pre></td></tr></table></figure><p>可以看到，每台服务器访问到的次数是相等的。</p><h2 id="Least-Connections"><a href="#Least-Connections" class="headerlink" title="Least Connections"></a><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html?&_ga=2.118306121.1736170978.1559096932-1620268891.1559096932#least_conn"><strong>Least Connections</strong></a></h2><blockquote><p>请求分配到连接数最少的服务器，<strong>可以设置服务器权重</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf/demo.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line">least_conn;</span><br><span class="line">server 192.168.198.131:8080;</span><br><span class="line">server 192.168.198.132:8080;</span><br><span class="line">server 192.168.198.130:8080;</span><br><span class="line">&#125;</span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><p>这个不知道怎么模拟出连接数最少场景。</p><h2 id="IP-Hash"><a href="#IP-Hash" class="headerlink" title="IP Hash"></a><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash"><strong>IP Hash</strong></a></h2><blockquote><p>从客户端的IP地址来确定请求应该发送给哪台服务器。在这种情况下，使用IPv4地址的前三个八位字节或整个IPv6地址来计算散列值。该方法能保证来自同一地址的请求分配到同一台服务器，除非该服务器不可用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf/demo.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.198.131:8080;</span><br><span class="line">server 192.168.198.132:8080;</span><br><span class="line">server 192.168.198.130:8080;</span><br><span class="line">&#125;</span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br></pre></td></tr></table></figure><p>可以看到，请求都被分配到node01节点。</p><p>接下来，将node01节点关闭，看看会发生什么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef | grep demo</span><br><span class="line">root       3343   1764  0 11:52 pts/0    00:00:23 java -jar /home/demo/demo-boot-0.0.1-SNAPSHOT/lib/demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">root       4529   1764  0 13:11 pts/0    00:00:00 grep --color=auto demo</span><br><span class="line">$ <span class="built_in">kill</span> -9 3343</span><br><span class="line">$ ps -ef | grep demo</span><br><span class="line">root       4529   1764  0 13:11 pts/0    00:00:00 grep --color=auto demo</span><br><span class="line"></span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br></pre></td></tr></table></figure><p>由于node01节点不可用，请求都被分配到node03节点。</p><h2 id="Generic-Hash"><a href="#Generic-Hash" class="headerlink" title="Generic Hash"></a>Generic <a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#hash"><strong>Hash</strong></a></h2><blockquote><p>与上面的IP_HASH类似，通用HASH按照用户定义的参数来计算散列值，参数可以是文本字符串，变量或组合。例如，参数可以是远端地址：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf/demo.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">server 192.168.198.131:8080;</span><br><span class="line">server 192.168.198.132:8080;</span><br><span class="line">server 192.168.198.130:8080;</span><br><span class="line">&#125;</span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node02/192.168.198.130</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node02/192.168.198.130</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node02/192.168.198.130</span><br></pre></td></tr></table></figure><p>可以看到，请求都被分配到了<code>node02</code>节点。</p><p>👉上面的<code>consistent</code>是可选参数，如果设置了，将采用<a href="http://blog.codinglabs.org/articles/consistent-hashing.html">Ketama一致性hash算法</a>计算散列值。</p><p>关于一致性Hash，可以查看我的另一篇博客：<a href="https://gcdd1993.github.io/%E7%90%86%E8%A7%A3%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95">理解一致性Hash算法</a></p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a><a href="https://nginx.org/en/docs/http/ngx_http_upstream_module.html#random"><strong>Random</strong></a></h2><blockquote><p>请求会被随机分配到一台服务器，<strong>可以设置服务器权重</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf/demo.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line">random;</span><br><span class="line">server 192.168.198.131:8080;</span><br><span class="line">server 192.168.198.132:8080;</span><br><span class="line">server 192.168.198.130:8080;</span><br><span class="line">&#125;</span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node02/192.168.198.130</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.130</span><br></pre></td></tr></table></figure><p>可以看到，请求是被随机分配到三台服务器的。</p><h2 id="Weights"><a href="#Weights" class="headerlink" title="Weights"></a>Weights</h2><blockquote><p>除了设置负载均衡算法，我们还可以为服务器设置权重，权重默认值是1</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf/demo.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line">server 192.168.198.131:8080 weight=5;</span><br><span class="line">server 192.168.198.132:8080 weight=10;</span><br><span class="line">server 192.168.198.130:8080;</span><br><span class="line">&#125;</span><br><span class="line">$ service nginx restart</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node03/192.168.198.132</span><br><span class="line">$ curl 192.168.198.131/<span class="built_in">test</span></span><br><span class="line">...</span><br><span class="line">this is : node01/192.168.198.131</span><br></pre></td></tr></table></figure><p>可以看到，5次请求中，<code>node03(weight=10)</code>占了3次，<code>node01(weight=5)</code>占了2次，<code>node02(weight=1)</code>1次都没有。</p><p>理论上来说，上面的配置，访问16次，node03应被分配10次，node01应被分配5次，node02应被分配1次。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/#overview">http-load-balancer</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作以来，一直都在使用Nginx作为负载均衡服务器，但是关于Nginx的负载均衡算法一直没有深入理解过，这次好好的整理下。&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Nginx" scheme="https://gcdd1993.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Redis 常用命令</title>
    <link href="https://gcdd1993.github.io/p/1091/"/>
    <id>https://gcdd1993.github.io/p/1091/</id>
    <published>2019-05-26T03:41:40.000Z</published>
    <updated>2021-06-19T15:18:16.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis提供了丰富的命令（command）对数据库和各种数据类型进行操作，这些command可以在Linux终端使用。在编程时，比如各类语言包，这些命令都有对应的方法。下面将Redis提供的命令做一总结。</p><span id="more"></span> <h1 id="键值相关命令"><a href="#键值相关命令" class="headerlink" title="键值相关命令"></a>键值相关命令</h1><h2 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h2><blockquote><p>返回满足给定pattern的所有key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) <span class="string">&quot;mylist4&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;myset7&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;myset3&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;myset2&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;mylist2&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;mylist6&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;name&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;myhash&quot;</span></span><br><span class="line">10) <span class="string">&quot;mylist7&quot;</span></span><br><span class="line">11) <span class="string">&quot;key1&quot;</span></span><br><span class="line">12) <span class="string">&quot;mylist5&quot;</span></span><br><span class="line">13) <span class="string">&quot;mylist8&quot;</span></span><br><span class="line">14) <span class="string">&quot;myzset2&quot;</span></span><br><span class="line">15) <span class="string">&quot;myzset3&quot;</span></span><br><span class="line">16) <span class="string">&quot;myzset&quot;</span></span><br><span class="line">17) <span class="string">&quot;myset5&quot;</span></span><br><span class="line">18) <span class="string">&quot;myset4&quot;</span></span><br><span class="line">19) <span class="string">&quot;mylist3&quot;</span></span><br><span class="line">20) <span class="string">&quot;myset&quot;</span></span><br><span class="line">21) <span class="string">&quot;myset6&quot;</span></span><br><span class="line">22) <span class="string">&quot;age&quot;</span></span><br><span class="line">23) <span class="string">&quot;mylist&quot;</span></span><br><span class="line">24) <span class="string">&quot;key2&quot;</span></span><br></pre></td></tr></table></figure><p>用表达式*，代表取出所有的key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys mylist*</span><br><span class="line">1) <span class="string">&quot;mylist4&quot;</span></span><br><span class="line">2) <span class="string">&quot;mylist2&quot;</span></span><br><span class="line">3) <span class="string">&quot;mylist6&quot;</span></span><br><span class="line">4) <span class="string">&quot;mylist7&quot;</span></span><br><span class="line">5) <span class="string">&quot;mylist5&quot;</span></span><br><span class="line">6) <span class="string">&quot;mylist8&quot;</span></span><br><span class="line">7) <span class="string">&quot;mylist3&quot;</span></span><br><span class="line">8) <span class="string">&quot;mylist&quot;</span></span><br></pre></td></tr></table></figure><p>用表达式mylist*，代表取出所有以mylist开头的key。</p><h2 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h2><blockquote><p>确认一个key是否存在</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists HongWan</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>从结果来数据库中不存在HongWan这个key，但是age这个key是存在的。</p><h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><blockquote><p>删除一个key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><h2 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h2><blockquote><p>设置一个key的过期时间(单位:秒)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists addr</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl addr</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; expire addr 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl addr</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl addr</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl addr</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ttl addr</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; exists addr</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>可以看到，未设置过期时间时，ttl值为-1，设置10s过期后，不断地使用ttl获取key的有效时长，当值为-2时，表示已过期并被删除。</p><h2 id="move"><a href="#move" class="headerlink" title="move"></a>move</h2><blockquote><p>将当前数据库中的key转移到其它数据库中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 30</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;30&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; move age 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; get age</span><br><span class="line"><span class="string">&quot;30&quot;</span></span><br></pre></td></tr></table></figure><p>在本例中，我先显式的选择了数据库0，然后在这个库中设置一个key，接下来我们将这个key从数据库0移到数据库1，之后我们确认在数据库0中无此key了, 但在数据库1中存在这个key，说明我们转移成功了 。</p><h2 id="persist"><a href="#persist" class="headerlink" title="persist"></a>persist</h2><blockquote><p>移除给定key的过期时间</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; expire age 300</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 296</span><br><span class="line">127.0.0.1:6379[1]&gt; persist age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br></pre></td></tr></table></figure><p>在这个例子中，我们手动的将未到过期时间的key，成功设置为过期。</p><h2 id="randomkey"><a href="#randomkey" class="headerlink" title="randomkey"></a>randomkey</h2><blockquote><p>随机返回key空间的一个key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; randomkey</span><br><span class="line"><span class="string">&quot;mylist5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; randomkey</span><br><span class="line"><span class="string">&quot;myzset2&quot;</span></span><br></pre></td></tr></table></figure><p>通过结果可以看到取key的规则是随机的。</p><h2 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h2><blockquote><p>重命名key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379[1]&gt; rename age age_new</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age_new&quot;</span></span><br></pre></td></tr></table></figure><p>age成功的被我们改名为age_new了。</p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><blockquote><p>返回值的类型</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> myset</span><br><span class="line"><span class="built_in">set</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> myzset</span><br><span class="line">zset</span><br></pre></td></tr></table></figure><h1 id="服务器相关命令"><a href="#服务器相关命令" class="headerlink" title="服务器相关命令"></a>服务器相关命令</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><blockquote><p>测试连接是否存活</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">// 执行下面命令之前，我们停止redis服务器</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br><span class="line">// 执行下面命令之前，我们启动redis服务器</span><br><span class="line">not connected&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><blockquote><p>在命令行打印一些内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">echo</span> HongWan</span><br><span class="line"><span class="string">&quot;HongWan&quot;</span></span><br></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><blockquote><p>选择数据库。Redis数据库编号从0~15，我们可以选择任意一个数据库来进行数据的存取</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 16</span><br><span class="line">(error) ERR invalid DB index</span><br></pre></td></tr></table></figure><h2 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h2><blockquote><p>退出连接</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; quit</span><br><span class="line">root@test01:~<span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="dbsize"><a href="#dbsize" class="headerlink" title="dbsize"></a>dbsize</h2><blockquote><p>返回当前数据库中key的数目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 23</span><br></pre></td></tr></table></figure><p>结果说明此库中有23个key。</p><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><blockquote><p>获取服务器的信息和统计</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:3.0.6</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:28b6715d3583bf8e</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 4.4.0-148-generic x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">gcc_version:5.4.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此结果用于说明服务器的基础信息，包括版本、启动时间等。</p><h2 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h2><blockquote><p>实时转储收到的请求</p></blockquote><p>先在终端1输入monitor命令，将会进入等待状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; monitor</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>新建一个终端，输入一些redis命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"> 1) <span class="string">&quot;myset3&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;myset2&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;mylist7&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;mylist4&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;key1&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;myset7&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;mylist6&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;myzset&quot;</span></span><br><span class="line">10) <span class="string">&quot;mylist2&quot;</span></span><br><span class="line">11) <span class="string">&quot;myset&quot;</span></span><br><span class="line">12) <span class="string">&quot;mylist&quot;</span></span><br><span class="line">13) <span class="string">&quot;myhash&quot;</span></span><br><span class="line">14) <span class="string">&quot;myset4&quot;</span></span><br><span class="line">15) <span class="string">&quot;name&quot;</span></span><br><span class="line">16) <span class="string">&quot;myset5&quot;</span></span><br><span class="line">17) <span class="string">&quot;myzset3&quot;</span></span><br><span class="line">18) <span class="string">&quot;mylist3&quot;</span></span><br><span class="line">19) <span class="string">&quot;mylist5&quot;</span></span><br><span class="line">20) <span class="string">&quot;myzset2&quot;</span></span><br><span class="line">21) <span class="string">&quot;mylist8&quot;</span></span><br><span class="line">22) <span class="string">&quot;key2&quot;</span></span><br><span class="line">23) <span class="string">&quot;myset6&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get addr</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>回到终端1中，我们将会看到打印出了刚才我们在终端2中敲入的redis命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; monitor</span><br><span class="line">OK</span><br><span class="line">1558844434.297954 [0 127.0.0.1:34926] <span class="string">&quot;keys&quot;</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">1558844444.673315 [0 127.0.0.1:34926] <span class="string">&quot;get&quot;</span> <span class="string">&quot;addr&quot;</span></span><br></pre></td></tr></table></figure><h2 id="config-get"><a href="#config-get" class="headerlink" title="config get"></a>config get</h2><blockquote><p>获取服务器配置信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/var/lib/redis&quot;</span></span><br></pre></td></tr></table></figure><p>本例中我们获取了dir这个参数配置的值，如果想获取全部参数据的配置值也很简单，只需<br>执行”config get *”即可将全部的值都显示出来。</p><h2 id="flushdb"><a href="#flushdb" class="headerlink" title="flushdb"></a>flushdb</h2><blockquote><p>删除当前选择数据库中的所有key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 23</span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>在本例中我们将0号数据库中的key都清除了。</p><h2 id="flushall"><a href="#flushall" class="headerlink" title="flushall"></a>flushall</h2><blockquote><p>删除所有数据库中的所有key</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>在本例中我们先查看了一个1号数据库中有一个key，然后我切换到0号库执行flushall命令，结果1号库中的key也被清除了，说明此命令工作正常。</p><h1 id="数据相关命令"><a href="#数据相关命令" class="headerlink" title="数据相关命令"></a>数据相关命令</h1><p>👉<a href="https://gcdd1993.github.io/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C/">Redis-数据类型及操作</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Redis提供了丰富的命令（command）对数据库和各种数据类型进行操作，这些command可以在Linux终端使用。在编程时，比如各类语言包，这些命令都有对应的方法。下面将Redis提供的命令做一总结。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://gcdd1993.github.io/tags/Redis/"/>
    
    <category term="NoSql" scheme="https://gcdd1993.github.io/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>Redis 数据类型及操作</title>
    <link href="https://gcdd1993.github.io/p/38807/"/>
    <id>https://gcdd1993.github.io/p/38807/</id>
    <published>2019-05-25T15:59:44.000Z</published>
    <updated>2021-06-19T15:18:16.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为Key-value型数据库，Redis也提供了键（Key）和键值（Value）的映射关系。但是，除了常规的数值或<a href="#strings%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89">字符串</a>，Redis的键值还可以是以下形式之一：<span id="more"></span></p><ul><li>[Lists （可重复列表） ](#Lists （可重复列表） )</li><li>[Sets （不可重复集合） ](#Sets （不可重复集合）)</li><li>[Sorted sets （不可重复有序集合） ](#Sorted sets （不可重复有序集合）)</li><li>[Hashes （哈希表）](#Hashes （哈希表）)</li></ul><p>键值的数据类型决定了该键值支持的操作。Redis支持诸如列表、集合或有序集合的交集、并集、查集等高级原子操作；同时，如果键值的类型是普通数字，Redis则提供自增等原子操作。</p><h1 id="strings（字符串）"><a href="#strings（字符串）" class="headerlink" title="strings（字符串）"></a>strings（字符串）</h1><blockquote><p>string类型是二进制安全的。意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象。</p></blockquote><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><blockquote><p>设置key对应的值为string类型的value。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name wwl</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h2><blockquote><p>设置key对应的值为string类型的value。如果key已经存在，返回0，nx是not exist的意思。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;wwl&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx name HongWan_new</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;HongWan&quot;</span></span><br></pre></td></tr></table></figure><p>由于原来name有一个对应的值，所以本次的修改不生效，且返回码是0。</p><h2 id="setex"><a href="#setex" class="headerlink" title="setex"></a>setex</h2><blockquote><p>设置key对应的值为string类型的value，并指定此键值对应的有效期。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex haircolor 10 red </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get haircolor</span><br><span class="line"><span class="string">&quot;red&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get haircolor</span><br><span class="line"><span class="string">&quot;red&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get haircolor</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>可见由于最后一次的调用是10秒以后了，所以取不到haicolor这个键对应的值。</p><h2 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h2><blockquote><p>设置指定key的value值的子字符串。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name <span class="string">&#x27;HongWan@126.com&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;HongWan@126.com&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;  setrange name 8 gmail.com </span><br><span class="line">(<span class="built_in">integer</span>) 17</span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;HongWan@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><p>其中的8是指从下标为8（包含8）的字符开始替换。</p><h2 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h2><blockquote><p>一次设置多个key的值，成功返回ok表示所有的值都设置了，失败返回0表示没有任何值被设置。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset key1 HongWan1 key2 HongWan2 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1 </span><br><span class="line"><span class="string">&quot;HongWan1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;HongWan2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="msetnx"><a href="#msetnx" class="headerlink" title="msetnx"></a>msetnx</h2><blockquote><p>一次设置多个key的值，成功返回ok表示所有的值都设置了，失败返回0表示没有任何值被设置，但是不会覆盖已经存在的key。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;HongWan1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;HongWan2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx key2 HongWan2_new key3 HongWan3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get key2 </span><br><span class="line"><span class="string">&quot;HongWan2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>可以看出如果这条命令返回0，那么里面操作都会回滚，都不会被执行。</p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><blockquote><p>获取key对应的string值,如果key不存在返回nil。 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;HongWan_new&quot;</span></span><br><span class="line"><span class="comment">## 我们获取一个库中不存在的键name1，那么它会返回一个nil以表时无此键值对 </span></span><br><span class="line">redis 127.0.0.1:6379&gt; get name1 </span><br><span class="line">(nil) </span><br></pre></td></tr></table></figure><h2 id="getset"><a href="#getset" class="headerlink" title="getset"></a>getset</h2><blockquote><p>设置key的值，并返回key的旧值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;HongWan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset name HongWan_new </span><br><span class="line"><span class="string">&quot;HongWan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;HongWan_new&quot;</span></span><br></pre></td></tr></table></figure><p>如果key不存在，将返回nil，并会设置新值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; getset name1 aaa</span><br><span class="line">(nil) </span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><h2 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h2><blockquote><p>获取指定key的value值的子字符串。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;HongWan_new&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getrange name 0 6 </span><br><span class="line"><span class="string">&quot;HongWan&quot;</span></span><br><span class="line"><span class="comment">## 字符串左面下标是从0开始的</span></span><br><span class="line">127.0.0.1:6379&gt; getrange name -7 -1</span><br><span class="line"><span class="string">&quot;Wan_new&quot;</span></span><br><span class="line"><span class="comment">## 字符串右面下标是从-1开始的</span></span><br><span class="line">127.0.0.1:6379&gt; getrange name 7 100 </span><br><span class="line"><span class="string">&quot;_new&quot;</span></span><br><span class="line"><span class="comment">## 当下标超出字符串长度时，将默认为是同方向的最大下标</span></span><br></pre></td></tr></table></figure><h2 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h2><blockquote><p>一次获取多个key的值，如果对应key不存在，则对应返回nil。 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget key1 key2 key3 </span><br><span class="line">1) <span class="string">&quot;HongWan1&quot;</span></span><br><span class="line">2) <span class="string">&quot;HongWan2&quot;</span></span><br><span class="line">3) (nil)</span><br><span class="line"><span class="comment">## key3由于没有这个键定义，所以返回nil。 </span></span><br></pre></td></tr></table></figure><h2 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h2><blockquote><p>对key的值做加加操作,并返回新的值。注意incr一个不是int的value会返回错误，incr一个不存在的key，则设置key为1 。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr age </span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;21&quot;</span></span><br></pre></td></tr></table></figure><h2 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h2><blockquote><p>同incr类似，加指定值 ，key不存在时候会设置key，并认为原来的value是 0 。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age </span><br><span class="line"><span class="string">&quot;21&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby age 5</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;HongWan_new&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;26&quot;</span></span><br></pre></td></tr></table></figure><h2 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h2><blockquote><p>对key的值做的是减减操作，decr一个不存在key，则设置key为-1。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;26&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decr age</span><br><span class="line">(<span class="built_in">integer</span>) 25</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;25&quot;</span></span><br></pre></td></tr></table></figure><h2 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h2><blockquote><p>同decr，减指定值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;25&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; decrby age 5</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;20&quot;</span></span><br></pre></td></tr></table></figure><p>decrby完全是为了可读性，我们完全可以通过incrby一个负值来实现同样效果，反之一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;20&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; incrby age -5</span><br><span class="line">(<span class="built_in">integer</span>) 15</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;15&quot;</span></span><br></pre></td></tr></table></figure><h2 id="append"><a href="#append" class="headerlink" title="append"></a>append</h2><blockquote><p>给指定key的字符串值追加value,返回新字符串值的长度。 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;HongWan_new&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; append name @126.com</span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;HongWan_new@126.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h2><blockquote><p>取指定key的value值的长度。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;HongWan_new@126.com&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen name</span><br><span class="line">(<span class="built_in">integer</span>) 19</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line"><span class="string">&quot;15&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen age</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h1 id="Lists-（可重复列表）"><a href="#Lists-（可重复列表）" class="headerlink" title="Lists （可重复列表）"></a>Lists （可重复列表）</h1><p>list是一个链表结构，主要功能是push、pop、获取一个范围的所有值等等，操作中key理解为链表的名字。</p><p>Redis的list类型其实就是一个每个子元素都是string类型的双向链表。链表的最大长度是(2^32)。我们可以通过push,pop操作从链表的头部或者尾部添加删除元素。这使得list既可以用作栈，也可以用作队列。 </p><h2 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h2><blockquote><p>在key对应list的头部添加字符串元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush mylist <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush mylist <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt;  lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><p>在此处我们先插入了一个world，然后在world的头部插入了一个hello。其中lrange是用于获取mylist的内容。</p><h2 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h2><blockquote><p>在key对应list的尾部添加字符串元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist2 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist2 <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><p>在此处我们先插入了一个hello，然后在hello的尾部插入了一个world。</p><h2 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h2><blockquote><p>在key对应list的特定位置之前或之后添加字符串元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist3 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist3 <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; linsert mylist3 before <span class="string">&quot;world&quot;</span> <span class="string">&quot;there&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist3 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;there&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><p>在此处我们先插入了一个hello，然后在hello的尾部插入了一个world，然后又在world的前面插入了there。</p><h2 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h2><blockquote><p>设置list中指定下标的元素值(下标从0开始) 。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist4 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist4 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist4 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lset mylist4 0 <span class="string">&quot;four&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lset mylist4 -2 <span class="string">&quot;five&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist4 0 -1</span><br><span class="line">1) <span class="string">&quot;four&quot;</span></span><br><span class="line">2) <span class="string">&quot;five&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><p>在此处我们依次插入了one,two,three，然后将标是0的值设置为four，再将下标是-2的值设置为five。</p><h2 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h2><blockquote><p>从key对应list中删除count个和value相同的元素。</p></blockquote><p>count&gt;0时，按从头到尾的顺序删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;foo&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist5 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrem mylist5 2 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>count&lt;0时，按从尾到头的顺序删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;foo&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist6 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrem mylist6 -2 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist6 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure><p>count=0时，删除全部。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;foo&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist7 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrem mylist7 0 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist7 0 -1</span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h2 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h2><blockquote><p>保留指定key 的值范围内的数据。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist8 <span class="string">&quot;four&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ltrim mylist8 1 -1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist8 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;four&quot;</span></span><br></pre></td></tr></table></figure><h2 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h2><blockquote><p>从list的头部删除元素，并返回删除元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lpop mylist</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><h2 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h2><blockquote><p>从list的尾部删除元素，并返回删除元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpop mylist2</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist2 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h2 id="rpoplpush"><a href="#rpoplpush" class="headerlink" title="rpoplpush"></a>rpoplpush</h2><blockquote><p>从第一个list的尾部移除元素并添加到第二个list的头部,最后返回被移除的元素值，整个操作是原子的。如果第一个list是空或者不存在返回nil。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist6 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;foo&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush mylist5 mylist6</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist6 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h2 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h2><blockquote><p>返回名称为key的list中index位置的元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange mylist5 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;foo&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex mylist5 0</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lindex mylist5 1</span><br><span class="line"><span class="string">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h2 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h2><blockquote><p>返回key对应list的长度。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen mylist5</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h1 id="Sets-（不可重复集合）"><a href="#Sets-（不可重复集合）" class="headerlink" title="Sets （不可重复集合）"></a>Sets （不可重复集合）</h1><p>Redis的set是string类型的无序集合。set元素最大可以包含(2^32)个元素。</p><p>set的是通过hash table实现的，所以添加、删除和查找的复杂度都是O(1)。hash table会随着添加或者删除自动的调整大小。</p><h2 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h2><blockquote><p>向名称为key的set中添加元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>本例中，我们向myset中添加了三个元素，但由于第三个元素跟第二个元素是相同的，所以第三个元素没有添加成功，最后我们用smembers来查看myset中的所有元素。</p><h2 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h2><blockquote><p>删除名称为key的set中的元素member。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset2 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; srem myset2 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; srem myset2 <span class="string">&quot;four&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><p>本例中，我们向myset2中添加了三个元素后，再调用srem来删除one和four，但由于元素中没有four所以，此条srem命令执行失败。</p><h2 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h2><blockquote><p>随机返回并删除名称为key的set中一个元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset3 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset3 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset3 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; spop myset3</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><p>本例中，我们向myset3中添加了三个元素后，再调用spop来随机删除一个元素，可以看到three元素被删除了。</p><h2 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff"></a>sdiff</h2><blockquote><p>返回所有给定key与第一个key的差集。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff myset2 myset3</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><p>本例中，我们可以看到myset2中的元素与myset3中不同的只是three，所以只有three被查出来了，而不是three和one，因为one是myset3的元素。 </p><p>我们也可以将myset2和myset3换个顺序来看一下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiff myset3 myset2</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><p>这个结果中只显示了，myset3中的元素与myset2中不同的元素。</p><h2 id="sdiffstore"><a href="#sdiffstore" class="headerlink" title="sdiffstore"></a>sdiffstore</h2><p>返回所有给定key与第一个key的差集，并将结果存为另一个key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sdiffstore myset4 myset2 myset3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset4</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><h2 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h2><blockquote><p>返回所有给定key的交集。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter myset2 myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><p>通过本例的结果可以看出, myset2和myset3的交集two被查出来了。</p><h2 id="sinterstore"><a href="#sinterstore" class="headerlink" title="sinterstore"></a>sinterstore</h2><blockquote><p>返回所有给定key的交集，并将结果存为另一个key。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinterstore myset5 myset2 myset3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset5</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><p>通过本例的结果可以看出, myset2和myset3的交集被保存到myset5中了。</p><h2 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h2><blockquote><p>返回所有给定key的并集。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion myset2 myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><p>通过本例的结果可以看出, myset2和myset3的并集被查出来了。</p><h2 id="sunionstore"><a href="#sunionstore" class="headerlink" title="sunionstore"></a>sunionstore</h2><blockquote><p>返回所有给定key的并集，并将结果存为另一个key。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunionstore myset6 myset2 myset3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers myset6</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br></pre></td></tr></table></figure><p>通过本例的结果可以看出, myset2和myset3的并集被保存到myset6中了。</p><h2 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h2><blockquote><p>从第一个key对应的set中移除member并添加到第二个对应set中。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; smove myset2 myset7 three</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset7</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br></pre></td></tr></table></figure><p>通过本例可以看到，myset2的three被移到myset7中了。</p><h2 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h2><blockquote><p>返回名称为key的set的元素个数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard myset2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h2 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h2><blockquote><p>测试member是否是名称为key的set的元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember myset2 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember myset2 one</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>通过本例可以看到，two是myset2的成员，而one不是。</p><h2 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h2><blockquote><p>随机返回名称为key的set的一个元素，但是不删除元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; smembers myset3</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset3</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset3</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember myset3</span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><p>通过本例可以看到，第二次返回了元素”one”，但是并没有删除”one”元素。</p><h1 id="Sorted-sets-（不可重复有序集合）"><a href="#Sorted-sets-（不可重复有序集合）" class="headerlink" title="Sorted sets （不可重复有序集合）"></a>Sorted sets （不可重复有序集合）</h1><p>sorted set是set的一个升级版本，它在set的基础上增加了一个顺序属性，这一属性在添加修改元素的时候可以指定，每次指定后，zset会自动重新按新的值调整顺序。可以理解为有两列的mysql表，一列存value，一列存顺序。</p><p>和set一样sorted set也是string类型元素的集合，不同的是每个元素都会关联一个double类型的score。sorted set的实现是skip list和hash table的混合体。</p><h2 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h2><blockquote><p>向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset 1 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 2 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset 3 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><h2 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h2><blockquote><p>删除名称为key的zset中的元素member。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem myzset two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到two被删除了。</p><h2 id="zincrby"><a href="#zincrby" class="headerlink" title="zincrby"></a>zincrby</h2><blockquote><p>如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset2 1 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset2 2 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zincrby myzset2 2 <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrange myzset2 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><p>本例中将one的score从1增加了2，增加到了3。</p><h2 id="zrank"><a href="#zrank" class="headerlink" title="zrank"></a>zrank</h2><blockquote><p>返回名称为key的zset中member元素的排名(按score从小到大排序)即下标。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset3 1 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset3 2 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset3 3 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myzset3 5 <span class="string">&quot;five&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;three&quot;</span></span><br><span class="line">6) <span class="string">&quot;3&quot;</span></span><br><span class="line">7) <span class="string">&quot;five&quot;</span></span><br><span class="line">8) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrank myzset3 two</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h2 id="zrevrank"><a href="#zrevrank" class="headerlink" title="zrevrank"></a>zrevrank</h2><blockquote><p>返回名称为key的zset中member元素的排名(按score从大到小排序)即下标。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;three&quot;</span></span><br><span class="line">6) <span class="string">&quot;3&quot;</span></span><br><span class="line">7) <span class="string">&quot;five&quot;</span></span><br><span class="line">8) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrank myzset3 two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><p>按从大到小排序的话two是第三个元素，下标是2。</p><h2 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h2><blockquote><p>返回名称为key的zset（按score从大到小排序）中的index从start到end的所有元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;5&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;one&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><h2 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h2><blockquote><p>返回集合中score在给定区间的元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;three&quot;</span></span><br><span class="line">6) <span class="string">&quot;3&quot;</span></span><br><span class="line">7) <span class="string">&quot;five&quot;</span></span><br><span class="line">8) <span class="string">&quot;5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myzset3 2 3 withscores</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><h2 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h2><blockquote><p>返回集合中score在给定区间的数量。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;5&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;one&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcount myzset3 2 3</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h2 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h2><blockquote><p>返回集合中元素个数。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;5&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;one&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard myzset3</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h2 id="zscore"><a href="#zscore" class="headerlink" title="zscore"></a>zscore</h2><blockquote><p>返回给定元素对应的score。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;5&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;one&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;  zscore myzset3 two</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="zremrangebyrank"><a href="#zremrangebyrank" class="headerlink" title="zremrangebyrank"></a>zremrangebyrank</h2><blockquote><p>删除集合中排名在给定区间的元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;5&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line">7) <span class="string">&quot;one&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zremrangebyrank myzset3 3 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>在本例中我们将myzset3中按从小到大排序结果的下标为3的元素删除了。</p><h2 id="zremrangebyscore"><a href="#zremrangebyscore" class="headerlink" title="zremrangebyscore"></a>zremrangebyscore</h2><blockquote><p>删除集合中score在给定区间的元素。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zremrangebyscore myzset3 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrevrange myzset3 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><p>在本例中我们将myzset3中按从小到大排序结果的score在1~2之间的元素删除了。</p><h1 id="Hashes-（哈希表）"><a href="#Hashes-（哈希表）" class="headerlink" title="Hashes （哈希表）"></a>Hashes （哈希表）</h1><p>Redis hash是一个string类型的field和value的映射表。它的添加、删除操作都是O(1)（平均），hash特别适合用于存储对象。</p><p>相较于将对象的每个字段存成单个string类型，将一个对象存储在hash类型中会占用更少的内存，并且可以更方便的存取整个对象。</p><h2 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h2><blockquote><p>设置hash field为指定值，如果key不存在，则先创建。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash field1 Hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h2 id="hsetnx"><a href="#hsetnx" class="headerlink" title="hsetnx"></a>hsetnx</h2><blockquote><p>设置hash field为指定值，如果key不存在，则先创建。如果field已经存在，返回0，nx是not exist的意思。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hsetnx myhash field <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field <span class="string">&quot;Hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>第一次执行是成功的，但第二次执行相同的命令失败，原因是field已经存在了。 </p><h2 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h2><blockquote><p>同时设置hash的多个field。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset myhash field1 Hello field2 World</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h2><blockquote><p>获取指定的hash field。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget myhash field1</span><br><span class="line"><span class="string">&quot;Hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hget myhash field2</span><br><span class="line"><span class="string">&quot;World&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hget myhash field3</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>由于数据库没有field3，所以取到的是一个空值nil。</p><h2 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h2><blockquote><p>获取全部指定的hash filed。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget myhash field1 field2 field3</span><br><span class="line">1) <span class="string">&quot;Hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;World&quot;</span></span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure><p>由于数据库没有field3，所以取到的是一个空值nil。</p><h2 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h2><blockquote><p>给指定的hash filed 加上给定值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash field3 20</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field3 </span><br><span class="line"><span class="string">&quot;20&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field3 -8</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field3</span><br><span class="line"><span class="string">&quot;12&quot;</span></span><br></pre></td></tr></table></figure><p>在本例中我们将field3的值从20降到了12，即做了一个减8的操作。</p><h2 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h2><blockquote><p>测试指定field是否存在。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hexists myhash field1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field9</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure><p>通过上例可以说明field1存在，但field9是不存在的。</p><h2 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h2><blockquote><p>返回指定hash的field数量。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><p>通过上例可以看到myhash中有4个field。</p><h2 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h2><blockquote><p>删除指定hash的指定field。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hlen myhash</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h2 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h2><blockquote><p>返回hash的所有field。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  hkeys myhash</span><br><span class="line">1) <span class="string">&quot;field&quot;</span></span><br><span class="line">2) <span class="string">&quot;field2&quot;</span></span><br><span class="line">3) <span class="string">&quot;field3&quot;</span></span><br></pre></td></tr></table></figure><h2 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h2><blockquote><p>返回hash的所有value。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hvals myhash</span><br><span class="line">1) <span class="string">&quot;Hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;World&quot;</span></span><br><span class="line">3) <span class="string">&quot;12&quot;</span></span><br></pre></td></tr></table></figure><h2 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h2><blockquote><p>获取某个hash中全部的filed及value。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;field&quot;</span></span><br><span class="line">2) <span class="string">&quot;Hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;World&quot;</span></span><br><span class="line">5) <span class="string">&quot;field3&quot;</span></span><br><span class="line">6) <span class="string">&quot;12&quot;</span></span><br></pre></td></tr></table></figure><p>一下子将myhash中所有的field及对应的value都取出来了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为Key-value型数据库，Redis也提供了键（Key）和键值（Value）的映射关系。但是，除了常规的数值或&lt;a href=&quot;#strings%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%89&quot;&gt;字符串&lt;/a&gt;，Redis的键值还可以是以下形式之一：</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://gcdd1993.github.io/tags/Redis/"/>
    
    <category term="NoSql" scheme="https://gcdd1993.github.io/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu切换为阿里镜像源</title>
    <link href="https://gcdd1993.github.io/p/12805/"/>
    <id>https://gcdd1993.github.io/p/12805/</id>
    <published>2019-05-25T15:45:14.000Z</published>
    <updated>2021-06-19T15:18:16.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在VM虚拟机搭建Ubuntu系统学习或者测试时，常常要使用<code>apt</code>安装测试，但是由于系统自带的下载源在国外服务器上，下载速度慢的无法忍受。所以我们需要切换为国内镜像源，能显著加快安装包下载速度。</p><span id="more"></span><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/apt/</span><br><span class="line">$ cp sources.list sources.list.bak <span class="comment">## 备份系统自带的source列表</span></span><br><span class="line"><span class="comment">## 选择合适的镜像源，如阿里云的镜像 http://mirrors.aliyun.com/ubuntu</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s/^\(deb\|deb-src\) \([^ ]*\) \(.*\)/\1 http:\/\/mirrors.aliyun.com\/ubuntu \3/&#x27;</span> sources.list</span><br><span class="line"><span class="comment">## 更新apt</span></span><br><span class="line">$ apt-get update</span><br></pre></td></tr></table></figure><h1 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h1><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>阿里镜像源</td><td><a href="http://mirrors.aliyun.com/ubuntu">http://mirrors.aliyun.com/ubuntu</a></td></tr><tr><td>清华大学镜像源</td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a></td></tr><tr><td>网易镜像源</td><td><a href="https://mirrors.163.com/ubuntu/">https://mirrors.163.com/ubuntu/</a></td></tr><tr><td>东北大学镜像源</td><td><a href="http://mirror.neu.edu.cn/ubuntu/">http://mirror.neu.edu.cn/ubuntu/</a></td></tr></tbody></table><p>至于哪个源比较快，看个人的网络吧，可以自行测试下。本人使用的是阿里镜像源。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在VM虚拟机搭建Ubuntu系统学习或者测试时，常常要使用&lt;code&gt;apt&lt;/code&gt;安装测试，但是由于系统自带的下载源在国外服务器上，下载速度慢的无法忍受。所以我们需要切换为国内镜像源，能显著加快安装包下载速度。&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Ubuntu" scheme="https://gcdd1993.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Cassandra学习笔记</title>
    <link href="https://gcdd1993.github.io/p/60138/"/>
    <id>https://gcdd1993.github.io/p/60138/</id>
    <published>2019-05-22T07:42:04.000Z</published>
    <updated>2021-06-19T15:18:16.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>按照<a href="https://gcdd1993.github.io/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/#more">Cassandra集群部署</a>搭建两台测试机，环境信息如下：</p><table><thead><tr><th>名称</th><th>IP</th><th>数据中心名称</th></tr></thead><tbody><tr><td>node-01</td><td>192.168.198.130</td><td>datacenter1</td></tr><tr><td>node-02</td><td>192.168.198.131</td><td>datacenter1</td></tr></tbody></table><h1 id="Keyspace"><a href="#Keyspace" class="headerlink" title="Keyspace"></a>Keyspace</h1><h2 id="创建Keyspace"><a href="#创建Keyspace" class="headerlink" title="创建Keyspace"></a>创建Keyspace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_keyspace_statement ::=  CREATE KEYSPACE [ IF NOT EXISTS ] keyspace_name WITH options</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## 使用SimpleStrategy复制策略</span><br><span class="line">CREATE KEYSPACE excelsior</span><br><span class="line">    WITH replication = &#123;&#x27;class&#x27;: &#x27;SimpleStrategy&#x27;, &#x27;replication_factor&#x27; : 3&#125;;</span><br><span class="line"></span><br><span class="line">## 使用NetworkTopologyStrategy复制策略</span><br><span class="line"># 1. 确认分区名称</span><br><span class="line">$ nodetool status</span><br><span class="line">Datacenter: datacenter1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 2. 使用NetworkTopologyStrategy复制策略创建keyspace</span><br><span class="line">CREATE KEYSPACE excalibur</span><br><span class="line">    WITH replication = &#123;&#x27;class&#x27;: &#x27;NetworkTopologyStrategy&#x27;, &#x27;DC1&#x27; : 1, &#x27;DC2&#x27; : 3&#125;</span><br><span class="line">    AND durable_writes = false;</span><br></pre></td></tr></table></figure><h2 id="使用Keyspace"><a href="#使用Keyspace" class="headerlink" title="使用Keyspace"></a>使用Keyspace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_statement ::=  USE keyspace_name</span><br></pre></td></tr></table></figure><h2 id="修改Keyspace（replication-factor）"><a href="#修改Keyspace（replication-factor）" class="headerlink" title="修改Keyspace（replication factor）"></a>修改Keyspace（replication factor）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter_keyspace_statement ::=  ALTER KEYSPACE keyspace_name WITH options</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER KEYSPACE excelsior </span><br><span class="line">WITH replication = &#123;&#x27;class&#x27;: &#x27;SimpleStrategy&#x27;, &#x27;replication_factor&#x27; : 4&#125;;</span><br></pre></td></tr></table></figure><h2 id="查看Keyspace"><a href="#查看Keyspace" class="headerlink" title="查看Keyspace"></a>查看Keyspace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESCRIBE KEYSPACE &lt;keyspace name&gt;;</span><br></pre></td></tr></table></figure><p>使用该语句查看创建的键空间是否正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DESCRIBE KEYSPACE excelsior;</span><br><span class="line"></span><br><span class="line">CREATE KEYSPACE excelsior WITH replication = &#123;&#x27;class&#x27;: &#x27;SimpleStrategy&#x27;, &#x27;replication_factor&#x27; : 3&#125; AND durable_writes = true;</span><br></pre></td></tr></table></figure><h2 id="删除Keyspace"><a href="#删除Keyspace" class="headerlink" title="删除Keyspace"></a>删除Keyspace</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop_keyspace_statement ::=  DROP KEYSPACE [ IF EXISTS ] keyspace_name</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DROP KEYSPACE excelsior;</span><br><span class="line">DESCRIBE excelsior;</span><br><span class="line"></span><br><span class="line">&#x27;excelsior&#x27; not found in keyspaces</span><br></pre></td></tr></table></figure><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><h2 id="创建Table"><a href="#创建Table" class="headerlink" title="创建Table"></a>创建Table</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">create_table_statement ::=  CREATE TABLE [ IF NOT EXISTS ] table_name</span><br><span class="line">                            &#x27;(&#x27;</span><br><span class="line">                                column_definition</span><br><span class="line">                                ( &#x27;,&#x27; column_definition )*</span><br><span class="line">                                [ &#x27;,&#x27; PRIMARY KEY &#x27;(&#x27; primary_key &#x27;)&#x27; ]</span><br><span class="line">                            &#x27;)&#x27; [ WITH table_options ]</span><br><span class="line">column_definition      ::=  column_name cql_type [ STATIC ] [ PRIMARY KEY]</span><br><span class="line">primary_key            ::=  partition_key [ &#x27;,&#x27; clustering_columns ]</span><br><span class="line">partition_key          ::=  column_name</span><br><span class="line">                            | &#x27;(&#x27; column_name ( &#x27;,&#x27; column_name )* &#x27;)&#x27;</span><br><span class="line">clustering_columns     ::=  column_name ( &#x27;,&#x27; column_name )*</span><br><span class="line">table_options          ::=  COMPACT STORAGE [ AND table_options ]</span><br><span class="line">                            | CLUSTERING ORDER BY &#x27;(&#x27; clustering_order &#x27;)&#x27; [ AND table_options ]</span><br><span class="line">                            | options</span><br><span class="line">clustering_order       ::=  column_name (ASC | DESC) ( &#x27;,&#x27; column_name (ASC | DESC) )*</span><br></pre></td></tr></table></figure><p>创建Table必须指定主键，主键是用于在表中唯一标识某一行，可以是一列或多列。</p><p>示例，在<code>excelsior</code>键空间创建一张名为<code>excelsior_alt_stats </code>的表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE excelsior.excelsior_alt_stats (</span><br><span class="line">id UUID PRIMARY KEY,</span><br><span class="line">lastname text,</span><br><span class="line">birthday timestamp,</span><br><span class="line">nationality text,</span><br><span class="line">weight text,</span><br><span class="line">height text</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>cassandra还支持collection（map, set, 或者 list）类型作为列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE excelsior.whimsey ( </span><br><span class="line">    id UUID PRIMARY KEY, </span><br><span class="line">    lastname text, </span><br><span class="line">    excelsior_teams set&lt;text&gt;, </span><br><span class="line">    events list&lt;text&gt;, </span><br><span class="line">    teams map&lt;int,text&gt; </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>甚至是嵌套的元组类型（tuple）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE excelsior.route (</span><br><span class="line">    race_id int, </span><br><span class="line">    race_name text, </span><br><span class="line">    point_id int, </span><br><span class="line">    lat_long tuple&lt;text, tuple&lt;float,float&gt;&gt;, </span><br><span class="line">    PRIMARY KEY (race_id, point_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>更多数据类型请参阅下一节<a href="#Cassandra%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">Cassandra数据结构</a></p><h3 id="静态列"><a href="#静态列" class="headerlink" title="静态列"></a>静态列</h3><p>某些列可以在表定义中声明为STATIC。静态的列将由属于同一分区（具有相同分区键）的所有行“共享”。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t (</span><br><span class="line">    pk int,</span><br><span class="line">    t int,</span><br><span class="line">    v text,</span><br><span class="line">    s text static,</span><br><span class="line">    PRIMARY KEY (pk, t)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO t (pk, t, v, s) VALUES (0, 0, &#x27;val0&#x27;, &#x27;static0&#x27;);</span><br><span class="line">INSERT INTO t (pk, t, v, s) VALUES (0, 1, &#x27;val1&#x27;, &#x27;static1&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM t;</span><br><span class="line">   pk | t | v      | s</span><br><span class="line">  ----+---+--------+-----------</span><br><span class="line">   0  | 0 | &#x27;val0&#x27; | &#x27;static1&#x27;</span><br><span class="line">   0  | 1 | &#x27;val1&#x27; | &#x27;static1&#x27;</span><br><span class="line">   </span><br><span class="line">## 所有记录中的静态列将永远展示最后一次更新的值   </span><br></pre></td></tr></table></figure><h2 id="修改Table"><a href="#修改Table" class="headerlink" title="修改Table"></a>修改Table</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter_table_statement   ::=  ALTER TABLE table_name alter_table_instruction</span><br><span class="line">alter_table_instruction ::=  ADD column_name cql_type ( &#x27;,&#x27; column_name cql_type )*</span><br><span class="line">                             | DROP column_name ( column_name )*</span><br><span class="line">                             | WITH options</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE addamsFamily ADD gravesite varchar;</span><br><span class="line"></span><br><span class="line">ALTER TABLE addamsFamily</span><br><span class="line">       WITH comment = &#x27;A most excellent and useful table&#x27;;</span><br></pre></td></tr></table></figure><p>修改Table可以：</p><ol><li>向表中添加新列（通过ADD指令）。请注意，无法更改表的主键，因此新添加的列将不会成为主键的一部分。</li><li>从表中删除列。这会丢弃列及其所有内容。</li><li>更改一些表选项（通过WITH指令）。支持的选项与创建表时相同（在创建后无法更改的COMPACT STORAGE和CLUSTERING ORDER之外）。</li></ol><h2 id="删除Table"><a href="#删除Table" class="headerlink" title="删除Table"></a>删除Table</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop_table_statement ::=  DROP TABLE [ IF EXISTS ] table_name</span><br></pre></td></tr></table></figure><h2 id="截断Table（清空表数据）"><a href="#截断Table（清空表数据）" class="headerlink" title="截断Table（清空表数据）"></a>截断Table（清空表数据）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate_statement ::=  TRUNCATE [ TABLE ] table_name</span><br></pre></td></tr></table></figure><p>由于表是唯一可以在当前截断的对象，因此可以省略TABLE关键字。</p><p>截断表会永久删除表中的所有现有数据，但不会删除表本身。</p><h1 id="Cassandra数据结构"><a href="#Cassandra数据结构" class="headerlink" title="Cassandra数据结构"></a>Cassandra数据结构</h1><blockquote><p>CQL是一种类型化语言，支持丰富的数据类型集，包括本地类型，集合类型，用户定义类型，元组类型和自定义类型：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cql_type ::=  native_type | collection_type | user_defined_type | tuple_type | custom_type</span><br></pre></td></tr></table></figure><h2 id="本地类型（Native-Types）"><a href="#本地类型（Native-Types）" class="headerlink" title="本地类型（Native Types）"></a>本地类型（Native Types）</h2><table><thead><tr><th>类型</th><th>常量支持</th><th>说明</th></tr></thead><tbody><tr><td>ascii</td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>ASCII字符串</td></tr><tr><td><code>bigint</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a></td><td>64位无符号整数</td></tr><tr><td><code>blob</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-blob"><code>blob</code></a></td><td>任意字节（无验证）</td></tr><tr><td><code>boolean</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-boolean"><code>boolean</code></a></td><td><code>true</code>或<code>false</code></td></tr><tr><td><code>counter</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a></td><td>计数器列（64位有符号值）</td></tr><tr><td><code>date</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a>， <a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>日期（没有相应的时间值）</td></tr><tr><td><code>decimal</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a>， <a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-float"><code>float</code></a></td><td>十进制可变精度</td></tr><tr><td><code>double</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a> <a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-float"><code>float</code></a></td><td>64位IEEE-754浮点</td></tr><tr><td><code>duration</code></td><td><code>duration</code></td><td>持续时间（纳秒精度）</td></tr><tr><td><code>float</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a>， <a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-float"><code>float</code></a></td><td>32位IEEE-754浮点</td></tr><tr><td><code>inet</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>IP地址，IPv4（4字节长）或IPv6（16字节长）</td></tr><tr><td><code>int</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a></td><td>32位无符号整数</td></tr><tr><td><code>smallint</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a></td><td>16位有符号整数</td></tr><tr><td><code>text</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>UTF8编码的字符串</td></tr><tr><td><code>time</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a>， <a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>具有纳秒精度的时间（没有相应的日期值）</td></tr><tr><td><code>timestamp</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a>， <a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>时间戳（日期和时间），精度为毫秒</td></tr><tr><td><code>timeuuid</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-uuid"><code>uuid</code></a></td><td><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a>（版本1），通常用作“无冲突”时间戳</td></tr><tr><td><code>tinyint</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a></td><td>8位有符号整数</td></tr><tr><td><code>uuid</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-uuid"><code>uuid</code></a></td><td>一个<a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a>（任何版本）</td></tr><tr><td><code>varchar</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-string"><code>string</code></a></td><td>UTF8编码的字符串</td></tr><tr><td><code>varint</code></td><td><a href="http://cassandra.apache.org/doc/latest/cql/definitions.html#grammar-token-integer"><code>integer</code></a></td><td>任意精度整数</td></tr></tbody></table><p>其中需要注意的是时间类型：</p><h3 id="timestamps"><a href="#timestamps" class="headerlink" title="timestamps"></a>timestamps</h3><blockquote><p>时间戳类型的值被编码为64位有符号整数，表示自标准基准时间（称为纪元：1970年1月1日格林威治标准时间00:00:00）以来的毫秒数。</p></blockquote><ul><li><code>1299038700000</code></li><li><code>&#39;2011-02-03 04:05+0000&#39;</code></li><li><code>&#39;2011-02-03 04:05:00+0000&#39;</code></li><li><code>&#39;2011-02-03 04:05:00.000+0000&#39;</code></li><li><code>&#39;2011-02-03T04:05+0000&#39;</code></li><li><code>&#39;2011-02-03T04:05:00+0000&#39;</code></li><li><code>&#39;2011-02-03T04:05:00.000+0000&#39;</code></li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM point</span><br><span class="line">WHERE ts = &#x27;2018-11-15 00:00:30.557+0000&#x27;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM point</span><br><span class="line">WHERE ts = 1542211230557;</span><br></pre></td></tr></table></figure><p>其中，<code>+0000</code>是RFC 822 4-digit时区规范，<code>+0000</code>指GMT。美国太平洋标准时间为<code>-0800</code>，中国北京标准时间为<code>+8000</code>，官方建议<strong>每次插入查询都带上时区</strong>，不加的话，默认是使用Cassandra节点配置的时区，可能会出现时区不一致导致的查询失败问题。</p><h3 id="dates"><a href="#dates" class="headerlink" title="dates"></a>dates</h3><blockquote><p> 日期类型的值被编码为32位无符号整数，表示在该范围的中心处具有“纪元”的天数（2^31）。大纪元是1970年1月1日。</p></blockquote><p>至于时间戳，日期可以作为整数或使用日期字符串输入。在后一种情况下，格式应为<code>yyyy-mm-dd</code>（例如’2011-02-03’）。</p><h3 id="times"><a href="#times" class="headerlink" title="times"></a>times</h3><blockquote><p>时间类型的值被编码为64位有符号整数，表示自午夜以来的纳秒数。</p></blockquote><p>对于时间戳，可以以整数或表示时间的字符串的形式输入时间。在后一种情况下，格式应为<code>hh:mm:ss [.fffffffff]</code>（其中亚秒精度是可选的，如果提供，则可以小于纳秒）。例如，以下是一段时间内的有效输入：</p><ul><li><code>&#39;08:12:54&#39;</code></li><li><code>&#39;08:12:54.123&#39;</code></li><li><code>&#39;08:12:54.123456&#39;</code></li><li><code>&#39;08:12:54.123456789&#39;</code></li></ul><h3 id="durations"><a href="#durations" class="headerlink" title="durations"></a>durations</h3><blockquote><p>持续时间类型的值被编码为3个有符号整数的可变长度。这是因为一个月的天数可以改变，一天可以有23或25小时，具体取决于夏令时。</p><ul><li><p>第一个整数表示月数（32位整数）</p></li><li><p>第二个表示天数（32位整数）</p></li><li><p>第三个表示纳秒数（64位整数）</p></li></ul></blockquote><ol><li>支持的单位：</li></ol><ul><li><code>y</code>: 年(12 月)</li><li><code>mo</code>: 月 (1 月)</li><li><code>w</code>: 周(7 天)</li><li><code>d</code>: 天(1 天)</li><li><code>h</code>: 小时(3,600,000,000,000 纳秒)</li><li><code>m</code>: 分钟(60,000,000,000 纳)</li><li><code>s</code>: 秒(1,000,000,000 纳)</li><li><code>ms</code>: 毫秒(1,000,000 纳)</li><li><code>us</code> or <code>µs</code> : 微妙(1000 纳)</li><li><code>ns</code>: 纳秒(1 纳)</li></ul><ol start="2"><li>ISO 8601格式：<code>P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W</code></li><li>ISO 8601替代格式：<code>P[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss]</code></li></ol><p>插入示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO RiderResults (rider, race, result) VALUES (&#x27;Christopher Froome&#x27;, &#x27;Tour de France&#x27;, 89h4m48s);</span><br><span class="line">INSERT INTO RiderResults (rider, race, result) VALUES (&#x27;BARDET Romain&#x27;, &#x27;Tour de France&#x27;, PT89H8M53S);</span><br><span class="line">INSERT INTO RiderResults (rider, race, result) VALUES (&#x27;QUINTANA Nairo&#x27;, &#x27;Tour de France&#x27;, P0000-00-00T89:09:09);</span><br></pre></td></tr></table></figure><blockquote><p>持续时间列不能作为主键。这是由于无法精确确认持续时间。如果没有日期上下文，实际上不可能知道1个月是否大于29天。</p><p>1天的持续时间也不等于24h，因为持续时间类型需要支持夏令时。</p></blockquote><h2 id="集合类型（Collections）"><a href="#集合类型（Collections）" class="headerlink" title="集合类型（Collections）"></a>集合类型（Collections）</h2><p>cassandra支持三种类型的集合：<a href="http://cassandra.apache.org/doc/latest/cql/types.html#maps">Maps</a>, <a href="http://cassandra.apache.org/doc/latest/cql/types.html#sets">Sets</a> and <a href="http://cassandra.apache.org/doc/latest/cql/types.html#lists">Lists</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">collection_type ::=  MAP &#x27;&lt;&#x27; cql_type &#x27;,&#x27; cql_type &#x27;&gt;&#x27;</span><br><span class="line">                     | SET &#x27;&lt;&#x27; cql_type &#x27;&gt;&#x27;</span><br><span class="line">                     | LIST &#x27;&lt;&#x27; cql_type &#x27;&gt;&#x27;</span><br></pre></td></tr></table></figure><p>可以这样输入集合类型的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collection_literal ::=  map_literal | set_literal | list_literal</span><br><span class="line">map_literal        ::=  &#x27;&#123;&#x27; [ term &#x27;:&#x27; term (&#x27;,&#x27; term : term)* ] &#x27;&#125;&#x27;</span><br><span class="line">set_literal        ::=  &#x27;&#123;&#x27; [ term (&#x27;,&#x27; term)* ] &#x27;&#125;&#x27;</span><br><span class="line">list_literal       ::=  &#x27;[&#x27; [ term (&#x27;,&#x27; term)* ] &#x27;]&#x27;</span><br></pre></td></tr></table></figure><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><blockquote><p>Maps是一组（有序）键值对，其中键是唯一的，并且按其键排序。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">    id text PRIMARY KEY,</span><br><span class="line">    name text,</span><br><span class="line">    favs map&lt;text, text&gt; // A map of text keys, and text values</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO users (id, name, favs)</span><br><span class="line">           VALUES (&#x27;jsmith&#x27;, &#x27;John Smith&#x27;, &#123; &#x27;fruit&#x27; : &#x27;Apple&#x27;, &#x27;band&#x27; : &#x27;Beatles&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">// Replace the existing map entirely.</span><br><span class="line">UPDATE users SET favs = &#123; &#x27;fruit&#x27; : &#x27;Banana&#x27; &#125; WHERE id = &#x27;jsmith&#x27;;</span><br></pre></td></tr></table></figure><p>另外，Maps还具有一些高级特性：</p><ul><li>更新或插入一个或多个元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET favs[&#x27;author&#x27;] = &#x27;Ed Poe&#x27; WHERE id = &#x27;jsmith&#x27;;</span><br><span class="line">UPDATE users SET favs = favs + &#123; &#x27;movie&#x27; : &#x27;Cassablanca&#x27;, &#x27;band&#x27; : &#x27;ZZ Top&#x27; &#125; WHERE id = &#x27;jsmith&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除一个或多个元素（如果一个元素不存在，删除它是一个无效操作但不会抛出错误）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE favs[&#x27;author&#x27;] FROM users WHERE id = &#x27;jsmith&#x27;;</span><br><span class="line">UPDATE users SET favs = favs - &#123; &#x27;movie&#x27;, &#x27;band&#x27;&#125; WHERE id = &#x27;jsmith&#x27;;</span><br></pre></td></tr></table></figure><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><blockquote><p> Sets是唯一值的（已排序）集合。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">    id text PRIMARY KEY,</span><br><span class="line">    name text,</span><br><span class="line">    favs map&lt;text, text&gt; // A map of text keys, and text values</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO users (id, name, favs)</span><br><span class="line">           VALUES (&#x27;jsmith&#x27;, &#x27;John Smith&#x27;, &#123; &#x27;fruit&#x27; : &#x27;Apple&#x27;, &#x27;band&#x27; : &#x27;Beatles&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">// Replace the existing map entirely.</span><br><span class="line">UPDATE users SET favs = &#123; &#x27;fruit&#x27; : &#x27;Banana&#x27; &#125; WHERE id = &#x27;jsmith&#x27;;</span><br></pre></td></tr></table></figure><p>另外，Sets也具有一些高级特性：</p><ul><li>添加一个或多个元素（因为这是一个集合，插入一个已存在的元素是一个无效操作）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE images SET tags = tags + &#123; &#x27;gray&#x27;, &#x27;cuddly&#x27; &#125; WHERE name = &#x27;cat.jpg&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除一个或多个元素（如果一个元素不存在，删除它是一个无效操作但不会抛出错误）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE images SET tags = tags - &#123; &#x27;cat&#x27; &#125; WHERE name = &#x27;cat.jpg&#x27;;</span><br></pre></td></tr></table></figure><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><blockquote><p>Lists是非唯一值的（已排序）集合，其中元素按列表中的位置排序。它与Sets的区别就在于是否是唯一值。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE plays (</span><br><span class="line">    id text PRIMARY KEY,</span><br><span class="line">    game text,</span><br><span class="line">    players int,</span><br><span class="line">    scores list&lt;int&gt; // A list of integers</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSERT INTO plays (id, game, players, scores)</span><br><span class="line">           VALUES (&#x27;123-afde&#x27;, &#x27;quake&#x27;, 3, [17, 4, 2]);</span><br><span class="line"></span><br><span class="line">// Replace the existing list entirely</span><br><span class="line">UPDATE plays SET scores = [ 3, 9, 4] WHERE id = &#x27;123-afde&#x27;;</span><br></pre></td></tr></table></figure><p>另外，Lists同样也具有一些高级特性：</p><ul><li>在列表头或尾添加元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE plays SET players = 5, scores = scores + [ 14, 21 ] WHERE id = &#x27;123-afde&#x27;;</span><br><span class="line">UPDATE plays SET players = 6, scores = [ 3 ] + scores WHERE id = &#x27;123-afde&#x27;;</span><br></pre></td></tr></table></figure><p>💡该操作不是幂等的，特别是在其中一个操作超时时，重试操作是不安全的，可能会导致同一数据插入两次。</p><ul><li>在列表中指定下标处设置值。该列表必须长度大于此下标，否则将抛出列表太小的错误</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE plays SET scores[1] = 7 WHERE id = &#x27;123-afde&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过列表指定下标删除元素。该列表必须长度大于此下标，否则将抛出列表太小的错误。此外，当操作从列表中删除元素时，列表大小将减1，从而改变此下标之后所有元素的位置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE scores[1] FROM plays WHERE id = &#x27;123-afde&#x27;;</span><br></pre></td></tr></table></figure><ul><li>删除列表中指定下标之间的所有元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE plays SET scores = scores - [ 12, 21 ] WHERE id = &#x27;123-afde&#x27;;</span><br></pre></td></tr></table></figure><p>💡以上2,3,4操作会出现内部的<code> read-before-write</code>，会比通常的更新消耗更多的资源，所以尽量使用<a href="#Sets">Sets</a>代替Lists。</p><h2 id="用户自定义类型（User-Defined-Types）"><a href="#用户自定义类型（User-Defined-Types）" class="headerlink" title="用户自定义类型（User-Defined Types）"></a>用户自定义类型（User-Defined Types）</h2><blockquote><p>CQL支持用户定义类型（以下简称UDT）。可以使用下面<code>create_type_statement</code>，<code>alter_type_statement</code>和<code>drop_type_statement</code>创建，修改和删除此类型。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_defined_type ::=  udt_name</span><br><span class="line">udt_name          ::=  [ keyspace_name &#x27;.&#x27; ] identifier</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create_type_statement ::=  CREATE TYPE [ IF NOT EXISTS ] udt_name</span><br><span class="line">                               &#x27;(&#x27; field_definition ( &#x27;,&#x27; field_definition )* &#x27;)&#x27;</span><br><span class="line">field_definition      ::=  identifier cql_type</span><br></pre></td></tr></table></figure><p>UDT有一个名称（用于声明该类型的列），是一组命名和类型字段。字段名称可以是任何类型，包括集合或其他UDT。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TYPE phone (</span><br><span class="line">    country_code int,</span><br><span class="line">    number text,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE TYPE address (</span><br><span class="line">    street text,</span><br><span class="line">    city text,</span><br><span class="line">    zip text,</span><br><span class="line">    phones map&lt;text, phone&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    name text PRIMARY KEY,</span><br><span class="line">    addresses map&lt;text, frozen&lt;address&gt;&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>💡注意</p><ul><li>尝试创建现有类型时请使用<code>IF NOT EXISTS</code>选项，否则将会抛出错误。</li><li>UDT本质上绑定到创建它的键空间，并且只能在该键空间中使用。在创建时，如果类型名称以键空间名称为前缀，则在该键空间中创建它。否则，它将在当前键空间中创建。</li><li>从Cassandra 4.0开始，在大多数情况下必须冻结UDT，因此在上面的表定义中冻结了<code>&lt;address&gt;</code>。有关详细信息，请参阅<a href="https://docs.datastax.com/en/archived/cql/3.1/cql/cql_reference/collection_type_r.html">冻结</a>部分。</li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter_type_statement    ::=  ALTER TYPE udt_name alter_type_modification</span><br><span class="line">alter_type_modification ::=  ADD field_definition</span><br><span class="line">                             | RENAME identifier TO identifier ( identifier TO identifier )*</span><br></pre></td></tr></table></figure><p>修改一个UDT，可以：</p><ol><li>在类型中添加一个新字段</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TYPE address ADD country text</span><br></pre></td></tr></table></figure><p>请注意：新添加的字段在之前的记录中，都将被置为NULL。</p><ol start="2"><li>重命名该类型的字段</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TYPE address RENAME zip TO zipcode</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop_type_statement ::=  DROP TYPE [ IF EXISTS ] udt_name</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udt_literal ::=  &#x27;&#123;&#x27; identifier &#x27;:&#x27; term ( &#x27;,&#x27; identifier &#x27;:&#x27; term )* &#x27;&#125;&#x27;</span><br></pre></td></tr></table></figure><p>使用UDT有点像<a href="#Maps">Maps</a>，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user (name, addresses)</span><br><span class="line">          VALUES (&#x27;z3 Pr3z1den7&#x27;, &#123;</span><br><span class="line">              &#x27;home&#x27; : &#123;</span><br><span class="line">                  street: &#x27;1600 Pennsylvania Ave NW&#x27;,</span><br><span class="line">                  city: &#x27;Washington&#x27;,</span><br><span class="line">                  zip: &#x27;20500&#x27;,</span><br><span class="line">                  phones: &#123; &#x27;cell&#x27; : &#123; country_code: 1, number: &#x27;202 456-1111&#x27; &#125;,</span><br><span class="line">                            &#x27;landline&#x27; : &#123; country_code: 1, number: &#x27;...&#x27; &#125; &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#x27;work&#x27; : &#123;</span><br><span class="line">                  street: &#x27;1600 Pennsylvania Ave NW&#x27;,</span><br><span class="line">                  city: &#x27;Washington&#x27;,</span><br><span class="line">                  zip: &#x27;20500&#x27;,</span><br><span class="line">                  phones: &#123; &#x27;fax&#x27; : &#123; country_code: 1, number: &#x27;...&#x27; &#125; &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure><h2 id="元组（Tuples）"><a href="#元组（Tuples）" class="headerlink" title="元组（Tuples）"></a>元组（Tuples）</h2><blockquote><p>CQL还支持元组和元组类型（元素可以是不同类型），类似于匿名的UDT或者是Scala的Tuple类型。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple_type    ::=  TUPLE &#x27;&lt;&#x27; cql_type ( &#x27;,&#x27; cql_type )* &#x27;&gt;&#x27;</span><br><span class="line">tuple_literal ::=  &#x27;(&#x27; term ( &#x27;,&#x27; term )* &#x27;)&#x27;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE durations (</span><br><span class="line">    event text,</span><br><span class="line">    duration tuple&lt;int, text&gt;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSERT INTO durations (event, duration) VALUES (&#x27;ev1&#x27;, (3, &#x27;hours&#x27;));</span><br></pre></td></tr></table></figure><h2 id="自定义类型（Custom-Types）"><a href="#自定义类型（Custom-Types）" class="headerlink" title="自定义类型（Custom Types）"></a>自定义类型（Custom Types）</h2><blockquote><p>自定义类型主要是为了<strong>兼容老项目，不建议使用</strong>。使用已有的类型加上用户自定义类型（UDT）就够了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">custom_type ::=  string</span><br></pre></td></tr></table></figure><h1 id="数据增删改查（CRUD）"><a href="#数据增删改查（CRUD）" class="headerlink" title="数据增删改查（CRUD）"></a>数据增删改查（CRUD）</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">select_statement ::=  SELECT [ JSON | DISTINCT ] ( select_clause | &#x27;*&#x27; )</span><br><span class="line">                      FROM table_name</span><br><span class="line">                      [ WHERE where_clause ]</span><br><span class="line">                      [ GROUP BY group_by_clause ]</span><br><span class="line">                      [ ORDER BY ordering_clause ]</span><br><span class="line">                      [ PER PARTITION LIMIT (integer | bind_marker) ]</span><br><span class="line">                      [ LIMIT (integer | bind_marker) ]</span><br><span class="line">                      [ ALLOW FILTERING ]</span><br><span class="line">select_clause    ::=  selector [ AS identifier ] ( &#x27;,&#x27; selector [ AS identifier ] )</span><br><span class="line">selector         ::=  column_name</span><br><span class="line">                      | term</span><br><span class="line">                      | CAST &#x27;(&#x27; selector AS cql_type &#x27;)&#x27;</span><br><span class="line">                      | function_name &#x27;(&#x27; [ selector ( &#x27;,&#x27; selector )* ] &#x27;)&#x27;</span><br><span class="line">                      | COUNT &#x27;(&#x27; &#x27;*&#x27; &#x27;)&#x27;</span><br><span class="line">where_clause     ::=  relation ( AND relation )*</span><br><span class="line">relation         ::=  column_name operator term</span><br><span class="line">                      &#x27;(&#x27; column_name ( &#x27;,&#x27; column_name )* &#x27;)&#x27; operator tuple_literal</span><br><span class="line">                      TOKEN &#x27;(&#x27; column_name ( &#x27;,&#x27; column_name )* &#x27;)&#x27; operator term</span><br><span class="line">operator         ::=  &#x27;=&#x27; | &#x27;&lt;&#x27; | &#x27;&gt;&#x27; | &#x27;&lt;=&#x27; | &#x27;&gt;=&#x27; | &#x27;!=&#x27; | IN | CONTAINS | CONTAINS KEY</span><br><span class="line">group_by_clause  ::=  column_name ( &#x27;,&#x27; column_name )*</span><br><span class="line">ordering_clause  ::=  column_name [ ASC | DESC ] ( &#x27;,&#x27; column_name [ ASC | DESC ] )*</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, occupation FROM users WHERE userid IN (199, 200, 207);</span><br><span class="line">SELECT JSON name, occupation FROM users WHERE userid = 199;</span><br><span class="line">SELECT name AS user_name, occupation AS user_occupation FROM users;</span><br><span class="line"></span><br><span class="line">SELECT time, value</span><br><span class="line">FROM events</span><br><span class="line">WHERE event_type = &#x27;myEvent&#x27;</span><br><span class="line">  AND time &gt; &#x27;2011-02-03&#x27;</span><br><span class="line">  AND time &lt;= &#x27;2012-01-01&#x27;</span><br><span class="line"></span><br><span class="line">SELECT COUNT (*) AS user_count FROM users;</span><br></pre></td></tr></table></figure><h3 id="Allowing-filtering"><a href="#Allowing-filtering" class="headerlink" title="Allowing filtering"></a>Allowing filtering</h3><blockquote><p>默认情况下，CQL仅允许不涉及“过滤”服务器端的选择查询，原因是那些“非过滤”查询具有可预测的性能，因为它们的查询性能与Limit成比例。</p></blockquote><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">    username text PRIMARY KEY,</span><br><span class="line">    firstname text,</span><br><span class="line">    lastname text,</span><br><span class="line">    birth_year int,</span><br><span class="line">    country text</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON users(birth_year);</span><br></pre></td></tr></table></figure><p>以下两种查询是不需要添加<code>ALLOW FILTERING</code>的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users;</span><br><span class="line">SELECT * FROM users WHERE birth_year = 1981;</span><br></pre></td></tr></table></figure><p>因为在这两种情况下，Cassandra都保证这些查询性能与返回的数据量成正比。</p><p>而下面的这个查询，则需要强制添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE birth_year = 1981 AND country = &#x27;FR&#x27; ALLOW FILTERING;</span><br></pre></td></tr></table></figure><p>👉🏼 关于如何定义可预测的列，可参考<a href="http://cassandra.apache.org/doc/latest/cql/indexes.html">Cassandra中的索引</a></p><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">insert_statement ::=  INSERT INTO table_name ( names_values | json_clause )</span><br><span class="line">                      [ IF NOT EXISTS ]</span><br><span class="line">                      [ USING update_parameter ( AND update_parameter )* ]</span><br><span class="line">names_values     ::=  names VALUES tuple_literal</span><br><span class="line">json_clause      ::=  JSON string [ DEFAULT ( NULL | UNSET ) ]</span><br><span class="line">names            ::=  &#x27;(&#x27; column_name ( &#x27;,&#x27; column_name )* &#x27;)&#x27;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO NerdMovies (movie, director, main_actor, year)</span><br><span class="line">                VALUES (&#x27;Serenity&#x27;, &#x27;Joss Whedon&#x27;, &#x27;Nathan Fillion&#x27;, 2005)</span><br><span class="line">      USING TTL 86400;</span><br><span class="line"></span><br><span class="line">INSERT INTO NerdMovies JSON &#x27;&#123;&quot;movie&quot;: &quot;Serenity&quot;,</span><br><span class="line">                              &quot;director&quot;: &quot;Joss Whedon&quot;,</span><br><span class="line">                              &quot;year&quot;: 2005&#125;&#x27;;</span><br></pre></td></tr></table></figure><p>💡请注意</p><ol><li><p>与SQL不同，INSERT默认情况下不检查行的先前存在：如果之前不存在，则创建行，否则更新。此外，没有办法知道发生了哪些创建或更新。</p></li><li><p>如果要做到存在则不更新，可以使用<code>IF NOT EXISTS</code>条件。但请注意，使用<code>IF NOT EXISTS</code>将导致不可忽略的性能成本（内部使用Paxos），因此应谨慎使用。</p></li><li><p>INSERT的所有更新都以原子方式单独应用。</p></li></ol><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">update_statement ::=  UPDATE table_name</span><br><span class="line">                      [ USING update_parameter ( AND update_parameter )* ]</span><br><span class="line">                      SET assignment ( &#x27;,&#x27; assignment )*</span><br><span class="line">                      WHERE where_clause</span><br><span class="line">                      [ IF ( EXISTS | condition ( AND condition )*) ]</span><br><span class="line">update_parameter ::=  ( TIMESTAMP | TTL ) ( integer | bind_marker )</span><br><span class="line">assignment       ::=  simple_selection &#x27;=&#x27; term</span><br><span class="line">                     | column_name &#x27;=&#x27; column_name ( &#x27;+&#x27; | &#x27;-&#x27; ) term</span><br><span class="line">                     | column_name &#x27;=&#x27; list_literal &#x27;+&#x27; column_name</span><br><span class="line">simple_selection ::=  column_name</span><br><span class="line">                     | column_name &#x27;[&#x27; term &#x27;]&#x27;</span><br><span class="line">                     | column_name &#x27;.&#x27; `field_name</span><br><span class="line">condition        ::=  simple_selection operator term</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UPDATE NerdMovies USING TTL 400</span><br><span class="line">   SET director   = &#x27;Joss Whedon&#x27;,</span><br><span class="line">       main_actor = &#x27;Nathan Fillion&#x27;,</span><br><span class="line">       year       = 2005</span><br><span class="line"> WHERE movie = &#x27;Serenity&#x27;;</span><br><span class="line"></span><br><span class="line">UPDATE UserActions</span><br><span class="line">   SET total = total + 2</span><br><span class="line">   WHERE user = B70DE1D0-9908-4AE3-BE34-5573E5B09F14</span><br><span class="line">     AND action = &#x27;click&#x27;;</span><br></pre></td></tr></table></figure><p>💡请注意</p><ol><li><p>与SQL不同，UPDATE默认情况下不检查行的先前存在（除非通过IF）：如果之前不存在，则创建行，否则更新。此外，没有办法知道是否发生了创建或更新。</p></li><li><p>可以通过IF在某些列上使用条件，在这种情况下，除非满足条件，否则不会更新行。但请注意，使用IF条件会产生不可忽视的性能成本（内部使用Paxos），因此应谨慎使用。</p></li><li><p>在UPDATE语句中，同一分区键中的所有更新都以原子方式单独应用。</p></li></ol><p>此外，UPDATE操作针对某些数据类型有强制性要求：</p><ol><li><code>c = c + 3</code></li></ol><p>用于递增/递减计数器。 </p><p>‘=’符号后面的列名称必须与’=’符号前面的列名相同。请注意，<strong>仅在计数器上允许递增/递减，并且是计数器上允许的唯一更新操作</strong>。</p><ol start="2"><li><code>id = id + &lt;some-collection&gt;</code> 和<code>id[value1] = value2</code></li></ol><p>用于集合。</p><ol start="3"><li><code>id.field = 3</code></li></ol><p>在非冻结的用户定义类型上设置字段的值。</p><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delete_statement ::=  DELETE [ simple_selection ( &#x27;,&#x27; simple_selection ) ]</span><br><span class="line">                      FROM table_name</span><br><span class="line">                      [ USING update_parameter ( AND update_parameter )* ]</span><br><span class="line">                      WHERE where_clause</span><br><span class="line">                      [ IF ( EXISTS | condition ( AND condition )*) ]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM NerdMovies USING TIMESTAMP 1240003134</span><br><span class="line"> WHERE movie = &#x27;Serenity&#x27;;</span><br><span class="line"></span><br><span class="line">DELETE phone FROM Users</span><br><span class="line"> WHERE userid IN (C73DE1D3-AF08-40F3-B124-3FF3E5109F22, B70DE1D0-9908-4AE3-BE34-5573E5B09F14);</span><br></pre></td></tr></table></figure><p>💡请注意</p><ol><li><p>WHERE子句指定要删除的行。使用IN运算符可以使用一个语句删除多行。可以使用不等运算符（例如&gt;=）删除一系列行。</p></li><li><p>在DELETE语句中，同一分区键中的所有删除都以原子方式单独应用。</p></li><li><p>DELETE操作可以通过使用IF子句来条件化，类似于UPDATE和INSERT语句。但是，与INSERT和UPDATE语句一样，这将导致不可忽略的性能成本（内部，将使用Paxos），因此应谨慎使用。</p></li></ol><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><blockquote><p>批处理只允许包含UPDATE，INSERT和DELETE语句。</p><p>批处理节省客户端和服务器之间的网络资源消耗。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batch_statement        ::=  BEGIN [ UNLOGGED | COUNTER ] BATCH</span><br><span class="line">                            [ USING update_parameter ( AND update_parameter )* ]</span><br><span class="line">                            modification_statement ( &#x27;;&#x27; modification_statement )*</span><br><span class="line">                            APPLY BATCH</span><br><span class="line">modification_statement ::=  insert_statement | update_statement | delete_statement</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BEGIN BATCH</span><br><span class="line">   INSERT INTO users (userid, password, name) VALUES (&#x27;user2&#x27;, &#x27;ch@ngem3b&#x27;, &#x27;second user&#x27;);</span><br><span class="line">   UPDATE users SET password = &#x27;ps22dhds&#x27; WHERE userid = &#x27;user3&#x27;;</span><br><span class="line">   INSERT INTO users (userid, password) VALUES (&#x27;user4&#x27;, &#x27;ch@ngem3c&#x27;);</span><br><span class="line">   DELETE name FROM users WHERE userid = &#x27;user1&#x27;;</span><br><span class="line">APPLY BATCH;</span><br></pre></td></tr></table></figure><p>💡请注意</p><ol><li>属于给定分区键的BATCH中的所有更新都是单独执行的。</li><li>默认情况下，批处理中的所有操作都按记录执行，以确保所有变更都最终完成（或不执行任何操作）。类似于SQL事务，但不完全等同于SQL事务。</li></ol><h3 id="UNLOGGED-batches"><a href="#UNLOGGED-batches" class="headerlink" title="UNLOGGED batches"></a>UNLOGGED batches</h3><p>默认情况下，Cassandra使用批处理日志来确保所有变更都最终完成（或不执行任何操作）【请注意，操作仅在单个分区中隔离】。</p><p>批处理跨越多个分区时，批处理在性能上会有所损失。可以使用UNLOGGED选项来跳过批处理日志，不过，如果批处理失败，可能会造成批处理中的任务部分成功部分失败，请谨慎选择。</p><h3 id="COUNTER-batches"><a href="#COUNTER-batches" class="headerlink" title="COUNTER batches"></a>COUNTER batches</h3><p>使用COUNTER选项进行批量计数器更新。</p><p>与Cassandra中的其他更新不同，计数器更新不是幂等的。</p><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="http://cassandra.apache.org/doc/latest/">Apache Cassandra Documentation</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;按照&lt;a href=&quot;https://gcdd1993.github.io/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%A</summary>
      
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Cassandra" scheme="https://gcdd1993.github.io/tags/Cassandra/"/>
    
  </entry>
  
  <entry>
    <title>记一次Postgres CPU爆满故障</title>
    <link href="https://gcdd1993.github.io/p/7877/"/>
    <id>https://gcdd1993.github.io/p/7877/</id>
    <published>2019-05-10T05:19:22.000Z</published>
    <updated>2021-06-19T15:18:16.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>公司项目测试环境调用某些接口的时候，服务器立即崩溃，并一定时间内无法提供服务。<span id="more"></span></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><h2 id="服务器配置不够"><a href="#服务器配置不够" class="headerlink" title="服务器配置不够"></a>服务器配置不够</h2><p>第一反应是服务器需要升配啦，花钱解决一切！毕竟测试服务器配置确实不高，2CPU + 4Gib，能干啥？不过问题是今天突然发生的，而且说崩就崩。凭着严谨的态度，还是要刨根问底地找下问题。</p><h2 id="查看服务器负载"><a href="#查看服务器负载" class="headerlink" title="查看服务器负载"></a>查看服务器负载</h2><ul><li><code>free -m</code></li></ul><p>内存占用并不大，忘记截图了，反正看下来不是内存过高导致的崩溃</p><ul><li><code>top</code></li></ul><p><img data-src="https://i.loli.net/2019/05/10/5cd50e714a69f.png"></p><h2 id="数据库占用CPU过高"><a href="#数据库占用CPU过高" class="headerlink" title="数据库占用CPU过高"></a>数据库占用CPU过高</h2><h3 id="连接数过多"><a href="#连接数过多" class="headerlink" title="连接数过多"></a>连接数过多</h3><blockquote><p>业务高峰活跃连接陡增，活跃的连接数是否比平时多很多</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  COUNT(*) </span><br><span class="line">FROM </span><br><span class="line">  pg_stat_activity </span><br><span class="line">WHERE </span><br><span class="line">  STATE NOT LIKE &#x27;%idle&#x27;;</span><br></pre></td></tr></table></figure><p>查询下来只有3个连接，所以不是连接数导致的CPU过高</p><h3 id="慢SQL"><a href="#慢SQL" class="headerlink" title="慢SQL"></a>慢SQL</h3><blockquote><p>如果活跃连接数的变化处于正常范围，则可能是当时有性能很差的SQL被大量执行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">  datname, </span><br><span class="line">  usename, </span><br><span class="line">  client_addr, </span><br><span class="line">  application_name, </span><br><span class="line">  state, </span><br><span class="line">  backend_start, </span><br><span class="line">  xact_start, </span><br><span class="line">  xact_stay, </span><br><span class="line">  query_start, </span><br><span class="line">  query_stay, </span><br><span class="line">  replace(</span><br><span class="line">    query, </span><br><span class="line">    chr(10), </span><br><span class="line">    &#x27; &#x27;</span><br><span class="line">  ) as query </span><br><span class="line">from </span><br><span class="line">  (</span><br><span class="line">    select </span><br><span class="line">      pgsa.datname as datname, </span><br><span class="line">      pgsa.usename as usename, </span><br><span class="line">      pgsa.client_addr client_addr, </span><br><span class="line">      pgsa.application_name as application_name, </span><br><span class="line">      pgsa.state as state, </span><br><span class="line">      pgsa.backend_start as backend_start, </span><br><span class="line">      pgsa.xact_start as xact_start, </span><br><span class="line">      extract(</span><br><span class="line">        epoch </span><br><span class="line">        from </span><br><span class="line">          (now() - pgsa.xact_start)</span><br><span class="line">      ) as xact_stay, </span><br><span class="line">      pgsa.query_start as query_start, </span><br><span class="line">      extract(</span><br><span class="line">        epoch </span><br><span class="line">        from </span><br><span class="line">          (now() - pgsa.query_start)</span><br><span class="line">      ) as query_stay, </span><br><span class="line">      pgsa.query as query </span><br><span class="line">    from </span><br><span class="line">      pg_stat_activity as pgsa </span><br><span class="line">    where </span><br><span class="line">      pgsa.state != &#x27;idle&#x27; </span><br><span class="line">      and pgsa.state != &#x27;idle in transaction&#x27; </span><br><span class="line">      and pgsa.state != &#x27;idle in transaction (aborted)&#x27;</span><br><span class="line">  ) idleconnections </span><br><span class="line">order by </span><br><span class="line">  query_stay desc </span><br><span class="line">limit </span><br><span class="line">  5;</span><br></pre></td></tr></table></figure><p><img data-src="https://i.loli.net/2019/05/10/5cd513b65c46f.png"></p><p>可以看到，确实有一条慢SQL，而且属于奇慢无比，执行了接近1分钟还没执行完毕，基本可以定位，是慢SQL导致的CPU占用陡增。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>对于上面的方法查出来的慢SQL，首先需要做的是Kill掉他们，使业务先恢复。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select pg_cancel_backend(pid) from pg_stat_activity where  query like &#x27;%&lt;query text&gt;%&#x27; and pid != pg_backend_pid();</span><br><span class="line">select pg_terminate_backend(pid) from pg_stat_activity where  query like &#x27;%&lt;query text&gt;%&#x27; and pid != pg_backend_pid();</span><br></pre></td></tr></table></figure><p>如果这些SQL确实是业务上必需的，则需要对他们做如下优化：</p><ol><li>对查询涉及的表，执行<code>ANALYZE &lt;table&gt;</code>或<code>VACUUM ANZLYZE &lt;table&gt;</code>，更新表的统计信息，使查询计划更准确。为避免对业务影响，最好在业务低峰执行。</li><li>执行<code>explain &lt;query text&gt;</code>或<code>explain (buffers true, analyze true, verbose true) &lt;query text&gt;</code>命令，查看SQL的执行计划（前者不会实际执行SQL，后者会实际执行而且能得到详细的执行信息），对其中的Table Scan涉及的表，建立索引。</li><li>重新编写SQL，去除掉不必要的子查询、改写UNION ALL、使用JOIN CLAUSE固定连接顺序等，都是进一步深度优化SQL的手段，这里不再深入说明。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在查询语句中，尽量减少不必要的子查询，公司使用的ORM框架是Spring JPA，针对一些特别慢的HQL，可以采用直接执行SQL的方式来优化查询效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select count(*) from example_table where example_id = :exampleId&quot;, nativeQuery = true)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exampleNativeQuery</span><span class="params">(<span class="meta">@Param(&quot;exampleId&quot;)</span> Long exampleId)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://help.aliyun.com/knowledge_detail/43562.html">PostgreSQL/PPAS CPU使用率高的原因及解决办法</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;公司项目测试环境调用某些接口的时候，服务器立即崩溃，并一定时间内无法提供服务。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="数据库" scheme="https://gcdd1993.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>记一次生产事故--磁盘被占满</title>
    <link href="https://gcdd1993.github.io/p/58700/"/>
    <id>https://gcdd1993.github.io/p/58700/</id>
    <published>2019-04-18T14:08:20.000Z</published>
    <updated>2021-06-19T15:18:16.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天，跑在阿里云ECS上的生产环境，突然间访问异常，接口各种报错，无奈公司没有专业的运维人员，只能硬着头皮解决一下。<span id="more"></span></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>先从表面看起，数据库首先报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.postgresql.util.PSQLException: ERROR: could not extend file &quot;base/16385/16587_fsm&quot;: No space left on device</span><br><span class="line">  建议：Check free disk space.</span><br></pre></td></tr></table></figure><p>直观上看，设备没有可用空间，也就是磁盘满了。</p><p>进入服务器后台，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">udev                  7.9G     0  7.9G   0% /dev</span><br><span class="line">tmpfs                 1.6G  3.5M  1.6G   1% /run</span><br><span class="line">/dev/vda1              59G   56G     0 100% /</span><br><span class="line">tmpfs                 7.9G  4.0K  7.9G   1% /dev/shm</span><br><span class="line">tmpfs                 5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs                 7.9G     0  7.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/vg0-vol0 1000G   14G  937G   2% /data</span><br><span class="line">tmpfs                 1.6G     0  1.6G   0% /run/user/0</span><br></pre></td></tr></table></figure><p>发现确实磁盘满了，而且满的很彻底。系统盘占用100%，估计什么服务都跑不动了。<code>/dev/vda1              59G   56G     0 100% /</code></p><p>不过发现<code>/dev/mapper/vg0-vol0 1000G   14G  937G   2% /data</code>，1000G只用了2%</p><blockquote><p>阿里云ECS分为系统盘和数据盘，1000G的是数据盘</p></blockquote><p>第一反应，应该是搭建的PG数据库的数据没有移到数据盘上。</p><h2 id="将Postgres数据库数据目录移动到系统盘"><a href="#将Postgres数据库数据目录移动到系统盘" class="headerlink" title="将Postgres数据库数据目录移动到系统盘"></a>将Postgres数据库数据目录移动到系统盘</h2><blockquote><p>参考<a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-postgresql-data-directory-to-a-new-location-on-ubuntu-16-04">如何将PostgreSQL数据目录移动到Ubuntu 16.04上的新位置</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line">postgres<span class="comment"># SHOW data_directory; # 查看当前数据目录</span></span><br><span class="line">        data_directory        </span><br><span class="line">------------------------------</span><br><span class="line"> /var/lib/postgresql/9.5/main</span><br><span class="line">(1 row)</span><br><span class="line">postgres<span class="comment"># \q; # 退出</span></span><br><span class="line"><span class="comment"># 为了确保数据的完整性，我们将在实际更改数据目录之前关闭PostgreSQL</span></span><br><span class="line">$ sudo systemctl stop postgresql</span><br><span class="line"><span class="comment"># 确保关闭完成</span></span><br><span class="line">$ sudo systemctl status postgresql</span><br><span class="line">. . .</span><br><span class="line">Jul 22 16:22:44 ubuntu-512mb-nyc1-01 systemd[1]: Stopped PostgreSQL RDBMS.</span><br><span class="line">$ sudo rsync -av /var/lib/postgresql /data <span class="comment"># /data为要迁移到的新目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /data</span><br><span class="line">$ ls</span><br><span class="line">... postgresql</span><br><span class="line"><span class="comment"># 删除原数据目录</span></span><br><span class="line">$ sudo rm -rf /var/lib/postgresql</span><br><span class="line"><span class="comment"># 将新数据目录链接到原数据目录</span></span><br><span class="line">$ sudo ln -s /data/postgresql /var/lib/postgresql</span><br><span class="line"><span class="comment"># 重启Postgres数据库</span></span><br><span class="line">$ sudo systemctl start postgresql</span><br><span class="line">$ sudo systemctl status postgresql</span><br></pre></td></tr></table></figure><p>完成以上步骤，即将postgre数据库数据目录移到了阿里云数据盘</p><p>以为OK了，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">udev                  7.9G     0  7.9G   0% /dev</span><br><span class="line">tmpfs                 1.6G  3.5M  1.6G   1% /run</span><br><span class="line">/dev/vda1              59G   56G   51M 100% /</span><br><span class="line">tmpfs                 7.9G  4.0K  7.9G   1% /dev/shm</span><br><span class="line">tmpfs                 5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs                 7.9G     0  7.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/vg0-vol0 1000G   14G  937G   2% /data</span><br><span class="line">tmpfs                 1.6G     0  1.6G   0% /run/user/0</span><br></pre></td></tr></table></figure><p>纹丝未动。。。</p><h2 id="Ubuntu查询大文件"><a href="#Ubuntu查询大文件" class="headerlink" title="Ubuntu查询大文件"></a>Ubuntu查询大文件</h2><p>猜测是存在大文件导致磁盘被占满</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br><span class="line">$ find . -<span class="built_in">type</span> f -size +800M  -print0 | xargs -0 du -h</span><br><span class="line">5.6G ./var/<span class="built_in">log</span>/syslog.1</span><br><span class="line">6.7G ./var/<span class="built_in">log</span>/syslog</span><br><span class="line">...</span><br><span class="line">$ rm ...</span><br></pre></td></tr></table></figure><p>如果发现是log字眼的大文件，我们可以毫不留情的删掉，要是遇见一些不认识的，不要贸然删掉，一定要查清楚文件的作用，能删则删，千万不要不小心删库跑路。。。</p><p>删除完毕后，再次查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">udev                  7.9G     0  7.9G   0% /dev</span><br><span class="line">tmpfs                 1.6G  3.4M  1.6G   1% /run</span><br><span class="line">/dev/vda1              59G   45G   12G  80% /</span><br><span class="line">tmpfs                 7.9G  4.0K  7.9G   1% /dev/shm</span><br><span class="line">tmpfs                 5.0M  4.0K  5.0M   1% /run/lock</span><br><span class="line">tmpfs                 7.9G     0  7.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/vg0-vol0 1000G   14G  936G   2% /data</span><br><span class="line">tmpfs                 1.6G     0  1.6G   0% /run/user/0</span><br></pre></td></tr></table></figure><p>多出了12G。</p><h2 id="查看已删除空间却没有释放的进程"><a href="#查看已删除空间却没有释放的进程" class="headerlink" title="查看已删除空间却没有释放的进程"></a>查看已删除空间却没有释放的进程</h2><p>这时候，服务应该可以恢复成功。但你马上会发现，磁盘又被占满，而这次，日志文件却不算大。</p><p>查看已经删除的文件，空间有没有释放，没有的话kill掉pid</p><blockquote><p>使用rm删除文件的时候，虽然文件已经被删除，但是由于文件被其他进程占用，空间却没有释放</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo lsof -n |grep deleted</span><br><span class="line">java      17866                  root  237r      REG              253,1    163541    1709285 /tmp/tomcat.8250394289784312179.8080/work/Tomcat/localhost/ROOT/upload_c6db0c17_6e6a_4141_bfb6_ac1b2d8a3b0b_00000000.tmp (deleted)</span><br><span class="line">...</span><br><span class="line">$ sudo <span class="built_in">kill</span> -9 17866</span><br></pre></td></tr></table></figure><p>再次使用<code>df -h</code>命令，磁盘使用率一下子减少了好多。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>服务器系统盘被占满是非常可怕的！届时，一切服务都将变得不可用，业务系统也会莫名其妙多出奇怪的问题。所以，运维需要经常性的查看服务器磁盘占用情况，阿里云ECS用户，可以开启报警，及时发现问题，解决问题！</p></li><li><p>阿里云ECS提供了系统盘和数据盘，记住，例如Pg、Redis、Cassandra等容易占磁盘的服务，一定要将数据目录放在阿里云ECS提供的数据盘上。</p></li><li><p><code>/var/log</code>是系统日志目录，可以经常性的关注下，大容量日志尽早删除。</p></li><li><p>对待进程不停对文件写日志的操作，要释放文件占用的磁盘空间，最好的方法是在线清空这个文件，可以通过如下命令完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo &quot;&quot; &gt;/var/log/syslog</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p> 通过这种方法，磁盘空间不但可以马上释放，也可保障进程继续向文件写入日志，这种方法经常用于在线清理Apache、Tomcat、Nginx等Web服务产生的日志文件。</p></blockquote><p><strong>最后，有一个专业的运维是多么重要！</strong></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;今天，跑在阿里云ECS上的生产环境，突然间访问异常，接口各种报错，无奈公司没有专业的运维人员，只能硬着头皮解决一下。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="运维" scheme="https://gcdd1993.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>运维笔记（部署篇）</title>
    <link href="https://gcdd1993.github.io/p/8505/"/>
    <id>https://gcdd1993.github.io/p/8505/</id>
    <published>2019-04-16T07:43:58.000Z</published>
    <updated>2021-06-19T15:18:16.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>针对<code>Ubuntu 16.04</code>，汇总常用服务的搭建指南。</p><span id="more"></span><h1 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h1><blockquote><p>新买的ECS需要执行系统初始化</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt dist-upgrade</span><br><span class="line">$ sudo apt autoremove</span><br><span class="line">$ sudo apt clean</span><br><span class="line"></span><br><span class="line">$ cat /etc/hosts <span class="comment"># 修改hosts，一般将本机需要使用的外部内网服务设置映射为名称</span></span><br><span class="line">172.16.0.192    kftest-config01</span><br><span class="line"></span><br><span class="line">$ cat /etc/hostname <span class="comment"># 修改hostname，便于辨认</span></span><br><span class="line">pg_1</span><br><span class="line"></span><br><span class="line">$ reboot <span class="comment"># 修改hostname需要重启生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载数据盘，例如阿里云数据盘 https://help.aliyun.com/document_detail/25446.html</span></span><br><span class="line">$ sudo fdisk -l <span class="comment"># 查看实例上的数据盘</span></span><br><span class="line">Disk /dev/vdb: 1000 GiB, 1073741824000 bytes, 2097152000 sectors</span><br><span class="line">$ sudo fdisk -u /dev/vdb</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">... 一路enter</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"><span class="comment">## 更多参考 https://help.aliyun.com/document_detail/108501.html</span></span><br><span class="line">$ sudo fdisk -lu /dev/vdb</span><br><span class="line">Device     Boot Start        End    Sectors  Size Id Type</span><br><span class="line">/dev/vdb1        2048 2097151999 2097149952 1000G 83 Linux</span><br><span class="line">$ sudo mkfs.ext4 /dev/vdb1 <span class="comment"># 在新分区上创建一个文件系统</span></span><br><span class="line"></span><br><span class="line">$ cp /etc/fstab /etc/fstab.bak <span class="comment"># 备份 etc/fstab</span></span><br><span class="line">$ <span class="built_in">echo</span> /dev/vdb1 /data ext4 defaults 0 0 &gt;&gt; /etc/fstab <span class="comment"># 向 /etc/fstab 写入新分区信息</span></span><br><span class="line"></span><br><span class="line">$ sudo mkdir /data</span><br><span class="line">$ sudo mount /dev/vdb1 /data <span class="comment"># 挂载文件系统</span></span><br><span class="line"></span><br><span class="line">$ df -h</span><br><span class="line">/dev/vdb1       985G   72M  935G   1% /data</span><br></pre></td></tr></table></figure><h1 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h1><h2 id="安装Postgresql"><a href="#安装Postgresql" class="headerlink" title="安装Postgresql"></a>安装Postgresql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;deb http://apt.postgresql.org/pub/repos/apt/ <span class="subst">$(lsb_release -cs)</span>-pgdg main&quot;</span> | sudo tee /etc/apt/sources.list.d/pgdg.list</span><br><span class="line">$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install postgresql-9.6 <span class="comment"># 自行选择合适版本</span></span><br><span class="line"><span class="comment">## 更多参考 https://www.postgresql.org/download/linux/ubuntu/</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/postgresql/9.6/main/postgresql.conf</span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">max_connections = 1000</span><br><span class="line">logging_collector = on</span><br><span class="line"><span class="comment">## 更多参考 https://www.postgresql.org/docs/current/static/runtime-config.html</span></span><br><span class="line"> </span><br><span class="line">$ sudo vim /etc/postgresql/9.6/main/pg_hba.conf</span><br><span class="line">host    all             all             0.0.0.0/0             md5</span><br><span class="line"><span class="comment">## 更多参考 https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html</span></span><br><span class="line">   </span><br><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></table></figure><h2 id="修改默认用户Postgres的密码"><a href="#修改默认用户Postgres的密码" class="headerlink" title="修改默认用户Postgres的密码"></a>修改默认用户Postgres的密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -u postgres psql</span><br><span class="line"><span class="comment"># ALTER USER postgres WITH PASSWORD &#x27;postgres&#x27;;</span></span><br><span class="line"><span class="comment"># \q</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="搭建集群（可选）"><a href="#搭建集群（可选）" class="headerlink" title="搭建集群（可选）"></a>搭建集群（可选）</h2><table><thead><tr><th align="center">主机</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">Master节点</td><td align="center">10.10.10.10</td></tr><tr><td align="center">Slave节点</td><td align="center">10.10.10.9</td></tr></tbody></table><p>Master节点和Slave节点分别按照上述步骤安装完成<code>postgres</code>后，开始搭建集群。</p><h3 id="master节点："><a href="#master节点：" class="headerlink" title="master节点："></a>master节点：</h3><ol><li>修改配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/postgresql/9.6/main/postgresql.conf</span><br><span class="line">listen_addresses = &#x27;*&#x27;</span><br><span class="line">wal_level = hot_standby</span><br><span class="line">archive_mode = on</span><br><span class="line">archive_command = &#x27;test ! -f /var/lib/postgresql/9.6/archive/%f &amp;&amp; cp %p /var/lib/postgresql/9.6/archive/%f&#x27;</span><br><span class="line">max_wal_senders = 16</span><br><span class="line">wal_keep_segments = 100</span><br><span class="line">hot_standby = on</span><br><span class="line">logging_collector = on</span><br><span class="line">## 更多参考 https://www.postgresql.org/docs/current/static/runtime-config.html</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/postgresql/9.6/main/pg_hba.conf</span><br><span class="line">host    all             all             10.0.0.0/8              md5</span><br><span class="line">host    replication     repuser         10.0.0.0/8              md5</span><br><span class="line">## 更多参考 https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html</span><br><span class="line">  </span><br><span class="line">$ sudo -upostgres mkdir /var/lib/postgresql/9.6/archive</span><br><span class="line">$ sudo chmod 0700 /var/lib/postgresql/9.6/archive</span><br><span class="line">  </span><br><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></table></figure><ol start="2"><li>创建工作账户 repuser</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -upostgres createuser --replication repuser</span><br><span class="line">$ sudo -upostgres psql</span><br><span class="line">postgres=<span class="comment"># \password repuser</span></span><br><span class="line">&lt;password&gt;</span><br><span class="line"><span class="comment">## 更多参考 https://www.postgresql.org/docs/current/static/user-manag.html</span></span><br></pre></td></tr></table></figure><h3 id="slave节点："><a href="#slave节点：" class="headerlink" title="slave节点："></a>slave节点：</h3><ol><li>先停止服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service postgresql stop</span><br></pre></td></tr></table></figure><ol start="2"><li>由master节点导入数据（postgres 免密码登录 repuser role）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -upostgres vi /var/lib/postgresql/.pgpass</span><br><span class="line">10.10.10.10:5432:*:repuser:&lt;password&gt;</span><br><span class="line">127.0.0.1:5432:*:repuser:&lt;password&gt;</span><br><span class="line"> </span><br><span class="line">$ sudo chmod 0600 /var/lib/postgresql/.pgpass</span><br><span class="line">$ sudo mv /var/lib/postgresql/9.6/main /var/lib/postgresql/9.6/main.bak</span><br><span class="line">$ sudo -upostgres pg_basebackup -D /var/lib/postgresql/9.6/main -F p -X stream -v -R -h 10.10.10.10 -p 5432 -U repuser</span><br></pre></td></tr></table></figure><ol start="3"><li>修改配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /var/lib/postgresql/9.6/main/recovery.conf</span><br><span class="line">standby_mode = <span class="string">&#x27;on&#x27;</span></span><br><span class="line">primary_conninfo = <span class="string">&#x27;user=repuser host=10.10.10.10 port=5432&#x27;</span></span><br><span class="line">trigger_file = <span class="string">&#x27;failover.now&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更多参考 https://www.postgresql.org/docs/current/static/recovery-config.html</span></span><br><span class="line">  </span><br><span class="line">$ sudo vi /etc/postgresql/9.6/main/postgresql.conf</span><br><span class="line">hot_standby = on</span><br></pre></td></tr></table></figure><ol start="4"><li>重启并检查服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service postgresql start</span><br><span class="line">  </span><br><span class="line">$ sudo service postgresql status</span><br><span class="line">...</span><br><span class="line">Active: active (exited)</span><br><span class="line"></span><br><span class="line">$ sudo -upostgres psql</span><br><span class="line">psql (9.6.12)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><p>在master节点进行增删改操作，对照看slave节点是否能够从master节点复制操作</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service postgresql start</span><br><span class="line">$ sudo service postgresql status</span><br><span class="line">$ sudo service postgresql restart</span><br></pre></td></tr></table></figure><p>👉 <a href="https://gcdd1993.github.io/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/PG%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">PG数据库常用命令</a></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="安装Redis（单机）"><a href="#安装Redis（单机）" class="headerlink" title="安装Redis（单机）"></a>安装Redis（单机）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install redis-server</span><br><span class="line">$ sudo vim /etc/redis/redis.conf</span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line">$ sudo systemctl restart redis-server</span><br></pre></td></tr></table></figure><h2 id="安装Redis（集群）"><a href="#安装Redis（集群）" class="headerlink" title="安装Redis（集群）"></a>安装Redis（集群）</h2><table><thead><tr><th align="center">主机</th><th align="center">ip</th><th align="center">redis-server</th><th align="center">sentinel</th></tr></thead><tbody><tr><td align="center">node01</td><td align="center">10.10.10.5</td><td align="center">主</td><td align="center">√</td></tr><tr><td align="center">node02</td><td align="center">10.10.10.4</td><td align="center">从</td><td align="center">√</td></tr><tr><td align="center">node03</td><td align="center">10.10.10.6</td><td align="center">从</td><td align="center">√</td></tr></tbody></table><h3 id="安装-Redis-Server"><a href="#安装-Redis-Server" class="headerlink" title="安装 Redis-Server"></a>安装 Redis-Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">node01:</span><br><span class="line">$ sudo apt-get install redis-server</span><br><span class="line">$ sudo vi /etc/redis/redis.conf</span><br><span class="line"><span class="built_in">bind</span>: 10.10.10.5</span><br><span class="line"></span><br><span class="line">$ sudo service redis-server restart</span><br><span class="line"></span><br><span class="line">node02:</span><br><span class="line">$ sudo apt-get install redis-server</span><br><span class="line">$ sudo vi /etc/redis/redis.conf</span><br><span class="line"><span class="built_in">bind</span>: 10.10.10.4</span><br><span class="line">slaveof 10.10.10.5</span><br><span class="line"> </span><br><span class="line">$ sudo service redis-server restart</span><br><span class="line"></span><br><span class="line">node03 同node02</span><br></pre></td></tr></table></figure><h3 id="测试主从同步"><a href="#测试主从同步" class="headerlink" title="测试主从同步"></a>测试主从同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">node01:</span><br><span class="line">$ redis-cli -h 10.10.10.5 -p 6379</span><br><span class="line">10.10.10.5:6379&gt;info</span><br><span class="line">....</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=10.10.10.4,port=6379,state=online,offset=99,lag=0</span><br><span class="line">slave1:ip=10.10.10.6,port=6379,state=online,offset=99,lag=1</span><br><span class="line">master_repl_offset:99</span><br><span class="line">....</span><br><span class="line">10.10.10.5:6379&gt;<span class="built_in">set</span> testkey testvalue</span><br><span class="line">OK</span><br><span class="line">10.10.10.5:6379&gt;get testkey</span><br><span class="line"><span class="string">&quot;testvalue&quot;</span></span><br><span class="line">  </span><br><span class="line">node02:</span><br><span class="line">$ redis-cli -h 10.10.10.4 -p 6379</span><br><span class="line">10.9.8.203:6379&gt;info</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:10.10.10.5</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">...</span><br><span class="line">10.10.10.4:6379&gt;get testkey</span><br><span class="line"><span class="string">&quot;testvalue&quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置-Sentinel（可选）"><a href="#配置-Sentinel（可选）" class="headerlink" title="配置 Sentinel（可选）"></a>配置 Sentinel（可选）</h3><blockquote><p>一个稳健的 <code>Redis Sentinel</code> 集群，应该使用至少 <strong>三个</strong> <code>Sentinel</code> 实例，并且保证将这些实例放到 <strong>不同的机器</strong> 上，甚至不同的 <strong>物理区域</strong>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget http://download.redis.io/redis-stable/sentinel.conf -O /etc/redis/sentinel.conf</span><br><span class="line">$ sudo chown redis:redis /etc/redis/sentinel.conf</span><br><span class="line">$ sudo vi /etc/redis/sentinel.conf</span><br><span class="line">sentinel monitor mymaster 10.10.10.5 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"><span class="comment">## 自启动配置</span></span><br><span class="line">$ sudo vi /etc/redis/sentinel.service</span><br><span class="line">[Unit]</span><br><span class="line">Documentation=http://redis.io/topics/sentinel</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/redis-server /etc/redis/sentinel.conf --sentinel</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">  </span><br><span class="line">$ sudo ln -s /etc/redis/sentinel.service /lib/systemd/system/sentinel.service</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> sentinel.service</span><br><span class="line">$ sudo service sentinel start</span><br><span class="line"></span><br><span class="line">node02 node03 sentinel 配置同node01，所有节点配置完成，再继续下一步</span><br></pre></td></tr></table></figure><blockquote><p>配置好<code>sentinel</code>之后，<code>redis.conf</code>和<code>sentinel.conf</code>都由<code>sentinel</code>接管；<code>sentinel</code>监控主节点发生改变的话，会更改对应的配置文件<code>sentinel.conf</code>和<code>redis.conf</code>。</p></blockquote><h3 id="测试Sentinel监控、通知、自动故障转移"><a href="#测试Sentinel监控、通知、自动故障转移" class="headerlink" title="测试Sentinel监控、通知、自动故障转移"></a>测试Sentinel监控、通知、自动故障转移</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有节点哨兵配置</span></span><br><span class="line">node01,node02,node03:</span><br><span class="line">$ redis-cli -h 10.10.10.5 -p 26379</span><br><span class="line">10.10.10.5:26379&gt; info</span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line">redis_version:3.0.6</span><br><span class="line">...</span><br><span class="line">config_file:/etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">master0:name=mymaster,status=ok,address=10.10.10.5:6379,slaves=2,sentinels=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在从节点查看哨兵详情，关注主节点</span></span><br><span class="line">$ redis-cli -h 10.10.10.4 -p 26379</span><br><span class="line">10.10.10.5:26379&gt; sentinel master mymaster</span><br><span class="line"> 1) <span class="string">&quot;name&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;mymaster&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;ip&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;10.10.10.5&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;port&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;6379&quot;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止主节点所在redis-server</span></span><br><span class="line">node01:</span><br><span class="line">$ systemctl stop redis-server.service</span><br><span class="line"><span class="comment"># 查看从节点的哨兵详情，一般来说，过1分钟~2分钟，会自动选举出新的主节点，例如node03被推举为主节点</span></span><br><span class="line">node02:</span><br><span class="line">$ redis-cli -h 10.10.10.4 -p 26379</span><br><span class="line">10.10.10.4:26379&gt; info</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">master0:name=mymaster,status=ok,address=10.10.10.6:6379,slaves=2,sentinels=3</span><br><span class="line"></span><br><span class="line">$ redis-cli -h 10.10.10.6 -p 6379</span><br><span class="line">10.10.10.6:6379&gt; info</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=10.10.10.4,port=6379,state=online,offset=19874,lag=0</span><br><span class="line">master_repl_offset:19874</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动刚才被停止的原主节点redis-server，将作为从节点加入到redis集群</span></span><br><span class="line">node01:</span><br><span class="line">$ systemctl start redis-server</span><br><span class="line">$ redis-cli -h 10.10.10.5 -p 6379</span><br><span class="line">10.10.10.5:6379&gt; info</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:10.10.10.6</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ redis-cli -h 10.10.10.5 -p 26379</span><br><span class="line">10.10.10.5:26379&gt; info</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">master0:name=mymaster,status=ok,address=10.10.10.6:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><h3 id="客户端连接Sentinel"><a href="#客户端连接Sentinel" class="headerlink" title="客户端连接Sentinel"></a>客户端连接Sentinel</h3><p>配置完sentinel，客户端连接方式就改变了，拿<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#27-%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F">Redisson</a>举例，需要增加以下配置，并删除单机模式下<code>spring.redis.host</code>配置，端口号改成哨兵的端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.redis.sentinel.master=mymaster</span><br><span class="line">spring.redis.sentinel.nodes=10.10.10.4:26379,10.10.10.5:26379,10.10.10.6:26379</span><br></pre></td></tr></table></figure><p>引入的jar是</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">&quot;org.redisson:redisson-spring-boot-starter:3.9.1&quot;</span></span><br></pre></td></tr></table></figure><p>配置类所在位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisProperties.Sentinel</span><br></pre></td></tr></table></figure><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start redis</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> redis</span><br><span class="line">$ sudo systemctl restart</span><br><span class="line">$ sudo systemctl stop redis</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>有时可能会遇到关闭或重启不了，这时候可以使用<code>redis-cli</code>提供的命令行来强制关闭</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 10.10.10.5 -p 6379</span><br><span class="line">10.10.10.5:6379&gt; shutdown nosave</span><br><span class="line"><span class="comment">## 更多参考 https://redis.io/commands/SHUTDOWN</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Redis is configured to save RDB snapshots, but is currently not able to persist on disk.</li></ol><blockquote><p>Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line"><span class="comment">## 添加一行</span></span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">$ sudo sysctl -p /etc/sysctl.conf</span><br><span class="line"><span class="comment">## 重启所有节点redis-server和sentinel</span></span><br></pre></td></tr></table></figure><p>如果改好后，还不行，就需要查看下Redis的dump文件配置是不是被更改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 10.10.10.5</span><br><span class="line">10.10.10.5:6379&gt; CONFIG GET dbfilename</span><br><span class="line">1) <span class="string">&quot;dbfilename&quot;</span></span><br><span class="line">2) <span class="string">&quot;.rdb&quot;</span> <span class="comment">## 默认是dump.rdb</span></span><br><span class="line">10.10.10.5:6379&gt; CONFIG GET dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/var/spool/cron&quot;</span> <span class="comment">## 默认是dump.rdb</span></span><br></pre></td></tr></table></figure><p>以上配置，如果不是自己更改的，则可怀疑是被黑客篡改了</p><ol><li>检查Redis端口是否在公网开放，如果是，立马关闭</li><li>设置Redis访问密码</li><li>恢复Redis默认配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/redis/redis.conf</span><br><span class="line">dbfilename <span class="string">&quot;dump.rdb&quot;</span></span><br><span class="line">dir <span class="string">&quot;/var/lib/redis&quot;</span></span><br><span class="line">$ service redis-server restart</span><br><span class="line"></span><br><span class="line">node01 node02 node03均按此修改并重启</span><br><span class="line"><span class="comment">## 了解更多 https://serverfault.com/questions/800295/redis-spontaneously-failed-failed-opening-rdb-for-saving-permission-denied</span></span><br></pre></td></tr></table></figure><h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><h2 id="安装Consul（单机）"><a href="#安装Consul（单机）" class="headerlink" title="安装Consul（单机）"></a>安装Consul（单机）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /data/consul/&#123;current/&#123;bin,etc&#125;,data&#125;</span><br><span class="line">$ sudo wget https://releases.hashicorp.com/consul/1.5.3/consul_1.5.3_linux_amd64.zip -O /data/consul/consul_1.5.3_linux_amd64.zip</span><br><span class="line">$ sudo apt-get install unzip</span><br><span class="line">$ sudo unzip /data/consul/consul_1.5.3_linux_amd64.zip -d /data/consul/current/bin</span><br><span class="line">$ sudo vi /data/consul/current/etc/consul.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;bootstrap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;datacenter&quot;</span>: <span class="string">&quot;test-datacenter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data_dir&quot;</span>: <span class="string">&quot;/data/consul/data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;log_level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;client_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;start_join&quot;</span>: [<span class="string">&quot;ip:8301&quot;</span>],</span><br><span class="line">    <span class="string">&quot;enable_syslog&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 更多参考：https://www.consul.io/docs/agent/options.html#configuration_files</span></span><br><span class="line"></span><br><span class="line">$ sudo ln -s /data/consul/current/etc /data/consul/etc</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/systemd/system/consul.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=consul service</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/data/consul/current/bin/consul agent -<span class="built_in">bind</span>=&#123;ip&#125; -config-dir /data/consul/etc/consul.json</span><br><span class="line">User=root</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> consul.service</span><br><span class="line">$ sudo systemctl start consul.service</span><br></pre></td></tr></table></figure><h2 id="安装Consul（集群）"><a href="#安装Consul（集群）" class="headerlink" title="安装Consul（集群）"></a>安装Consul（集群）</h2><table><thead><tr><th align="center">主机</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">node01</td><td align="center">10.10.10.5</td></tr><tr><td align="center">node02</td><td align="center">10.10.10.4</td></tr><tr><td align="center">node03</td><td align="center">10.10.10.6</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">node01 node02 node03</span><br><span class="line">$ sudo mkdir -p /data/consul/&#123;current/&#123;bin,etc&#125;,data&#125;</span><br><span class="line">$ sudo wget https://releases.hashicorp.com/consul/1.5.3/consul_1.5.3_linux_amd64.zip -O /data/consul/consul_1.5.3_linux_amd64.zip</span><br><span class="line">$ sudo apt-get install unzip</span><br><span class="line">$ sudo unzip /data/consul/consul_1.5.3_linux_amd64.zip -d /data/consul/current/bin</span><br><span class="line">$ sudo vi /data/consul/current/etc/consul.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;datacenter&quot;</span>: <span class="string">&quot;roc-datacenter&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data_dir&quot;</span>: <span class="string">&quot;/data/consul/data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;log_level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;bootstrap_expect&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;client_addr&quot;</span>: <span class="string">&quot;10.10.10.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;start_join&quot;</span>: [<span class="string">&quot;10.10.10.4:8301&quot;</span>,<span class="string">&quot;10.10.10.5:8301&quot;</span>,<span class="string">&quot;10.10.10.6:8301&quot;</span>],</span><br><span class="line">    <span class="string">&quot;enable_syslog&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">## 更多参考：https://www.consul.io/docs/agent/options.html#configuration_files</span></span><br><span class="line"></span><br><span class="line">$ sudo ln -s /data/consul/current/etc /data/consul/etc</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/systemd/system/consul.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=consul service</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/data/consul/current/bin/consul agent -config-dir /data/consul/etc/consul.json</span><br><span class="line">User=root</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> consul.service</span><br><span class="line">$ sudo systemctl start consul.service</span><br></pre></td></tr></table></figure><p>需要开放的端口：8300, 8301, 8500，如果网络不通，则子节点将无法join到主节点，可能会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to sync remote state: No cluster leader</span><br></pre></td></tr></table></figure><p>无法选举出leader，其实是节点之间无法通信，如果通信正常，启动之时所有节点会自动推举出leader。</p><h2 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start consul.service</span><br><span class="line">$ sudo systemctl stop consul.service</span><br><span class="line">$ sudo systemctl restart consul.service</span><br><span class="line"></span><br><span class="line"><span class="comment">## 更多参考：https://www.consul.io/docs/commands/index.html</span></span><br></pre></td></tr></table></figure><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;deb http://nginx.org/packages/ubuntu/ <span class="subst">$(lsb_release -cs)</span> nginx\ndeb-src http://nginx.org/packages/ubuntu/ <span class="subst">$(lsb_release -cs)</span> nginx&quot;</span> | sudo tee /etc/apt/sources.list.d/nginx.list</span><br><span class="line">$ wget -O- http://nginx.org/keys/nginx_signing.key | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install nginx</span><br><span class="line"><span class="comment">## 更多参考：http://nginx.org/en/linux_packages.html#stable</span></span><br></pre></td></tr></table></figure><h2 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx start</span><br><span class="line">$ sudo service nginx stop</span><br><span class="line">$ sudo service nginx restart</span><br><span class="line"></span><br><span class="line">$ sudo service nginx reload <span class="comment"># 重新加载配置</span></span><br></pre></td></tr></table></figure><h1 id="Cassandra集群"><a href="#Cassandra集群" class="headerlink" title="Cassandra集群"></a>Cassandra集群</h1><table><thead><tr><th>主机</th><th>IP</th></tr></thead><tbody><tr><td>cassandra-1</td><td>192.168.0.1</td></tr><tr><td>cassandra-2</td><td>192.168.0.2</td></tr></tbody></table><h2 id="安装Cassandra"><a href="#安装Cassandra" class="headerlink" title="安装Cassandra"></a>安装Cassandra</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;deb http://www.apache.org/dist/cassandra/debian 39x main&quot;</span> | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list</span><br><span class="line">$ curl https://www.apache.org/dist/cassandra/KEYS | sudo apt-key add -</span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt -y install cassandra</span><br><span class="line">$ sudo apt install openjdk-8-jdk-headless</span><br><span class="line"><span class="comment">## 更多参考：http://cassandra.apache.org/download/#installation-from-debian-packages</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/cassandra/cassandra.yaml</span><br><span class="line"></span><br><span class="line">seed_provider:</span><br><span class="line">          - seeds: <span class="string">&quot;192.168.0.1,192.168.0.2&quot;</span></span><br><span class="line"> </span><br><span class="line">concurrent_writes: 64</span><br><span class="line">concurrent_counter_writes: 64</span><br><span class="line">concurrent_counter_writes: 64</span><br><span class="line">concurrent_materialized_view_writes: 64</span><br><span class="line">compaction_throughput_mb_per_sec: 128</span><br><span class="line">file_cache_size_in_mb: 1024</span><br><span class="line">buffer_pool_use_heap_if_exhausted: <span class="literal">true</span></span><br><span class="line">disk_optimization_strategy: spinning</span><br><span class="line"><span class="comment">#listen_address: localhost</span></span><br><span class="line">listen_interface: eth0</span><br><span class="line"><span class="comment">#rpc_address: localhost</span></span><br><span class="line">rpc_interface: eth0</span><br><span class="line">enable_user_defined_functions: <span class="literal">true</span></span><br><span class="line">auto_bootstrap: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 优化cassandra jvm配置</span></span><br><span class="line">$ sudo vi /etc/cassandra/jvm.options</span><br><span class="line"><span class="comment">#-XX:+UseParNewGC</span></span><br><span class="line"><span class="comment">#-XX:+UseConcMarkSweepGC</span></span><br><span class="line"><span class="comment">#-XX:+CMSParallelRemarkEnabled</span></span><br><span class="line"><span class="comment">#-XX:SurvivorRatio=8</span></span><br><span class="line"><span class="comment">#-XX:MaxTenuringThreshold=1</span></span><br><span class="line"><span class="comment">#-XX:CMSInitiatingOccupancyFraction=75</span></span><br><span class="line"><span class="comment">#-XX:+UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"><span class="comment">#-XX:CMSWaitDuration=10000</span></span><br><span class="line"><span class="comment">#-XX:+CMSParallelInitialMarkEnabled</span></span><br><span class="line"><span class="comment">#-XX:+CMSEdenChunksRecordAlways</span></span><br><span class="line"></span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1RSetUpdatingPauseTimePercent=5</span><br><span class="line">-XX:MaxGCPauseMillis=500</span><br><span class="line">-XX:InitiatingHeapOccupancyPercent=70</span><br><span class="line">-XX:ParallelGCThreads=16</span><br><span class="line">-XX:ConcGCThreads=16</span><br><span class="line"></span><br><span class="line">$ sudo vi /etc/cassandra/cassandra-env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置为主机内网地址</span></span><br><span class="line">JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Djava.rmi.server.hostname=192.168.0.1&quot;</span></span><br><span class="line"><span class="comment">#if [ &quot;x$LOCAL_JMX&quot; = &quot;x&quot; ]; then</span></span><br><span class="line"><span class="comment">#      LOCAL_JMX=yes</span></span><br><span class="line"><span class="comment">#  fi</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;x<span class="variable">$LOCAL_JMX</span>&quot;</span> = <span class="string">&quot;x&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      LOCAL_JMX=no</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=true&quot;</span></span><br><span class="line">JVM_OPTS=<span class="string">&quot;<span class="variable">$JVM_OPTS</span> -Dcom.sun.management.jmxremote.authenticate=false&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#JVM_OPTS=&quot;$JVM_OPTS -Dcom.sun.management.jmxremote.password.file=/etc/cassandra/jmxremote.password&quot;</span></span><br><span class="line"></span><br><span class="line">$ sudo systemctl stop cassandra</span><br></pre></td></tr></table></figure><h2 id="迁移配置导数据盘（可选）"><a href="#迁移配置导数据盘（可选）" class="headerlink" title="迁移配置导数据盘（可选）"></a>迁移配置导数据盘（可选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv /var/lib/cassandra /data/cassandra</span><br><span class="line">$ sudo ln -s /data/cassandra /var/lib/cassandra</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start cassandra</span><br></pre></td></tr></table></figure><p>集群内其余机器，重复上述步骤，修改对应IP</p><h1 id="Zookeeper集群"><a href="#Zookeeper集群" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h1><table><thead><tr><th>主机</th><th>IP</th></tr></thead><tbody><tr><td>zk-01</td><td>192.168.0.1</td></tr><tr><td>zk-02</td><td>192.168.0.2</td></tr><tr><td>zk-03</td><td>192.168.0.3</td></tr></tbody></table><h2 id="安装Zookeeper"><a href="#安装Zookeeper" class="headerlink" title="安装Zookeeper"></a>安装Zookeeper</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install zookeeperd</span><br></pre></td></tr></table></figure><h2 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/zookeeper/conf/zoo.cfg</span><br><span class="line">server.1=192.168.0.1:2888:3888</span><br><span class="line">server.2=192.168.0.2:2888:3888</span><br><span class="line">server.3=192.168.0.3:2888:3888</span><br><span class="line">$ sudo vim /etc/zookeeper/conf/myid</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 每台主机id各不相同，比如zk-01=1,zk-02=2,zk-03=3</span></span><br><span class="line">$ sudo systemctl restart zookeeper</span><br></pre></td></tr></table></figure><h2 id="安装ZK-UI（可选）"><a href="#安装ZK-UI（可选）" class="headerlink" title="安装ZK-UI（可选）"></a>安装<a href="https://github.com/DeemOpen/zkui">ZK-UI</a>（可选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zkui</span></span><br><span class="line">$ <span class="built_in">cd</span> /data &amp;&amp; wget https://github.com/zifangsky/zkui/releases/download/v2.0/zkui-2.0.zip</span><br><span class="line">$ sudo unzip zkui-2.0.zip</span><br><span class="line">$ sudo vi /data/zkui/config.cfg</span><br><span class="line">  </span><br><span class="line">zkServer=192.168.0.1:2181,192.168.0.2:2181,192.168.0.3:2181</span><br><span class="line">userSet = &#123;<span class="string">&quot;users&quot;</span>: [&#123; <span class="string">&quot;username&quot;</span>:<span class="string">&quot;&lt;username&gt;&quot;</span> , <span class="string">&quot;password&quot;</span>:<span class="string">&quot;&lt;password&gt;&quot;</span>,<span class="string">&quot;role&quot;</span>: <span class="string">&quot;ADMIN&quot;</span> &#125;,&#123; <span class="string">&quot;username&quot;</span>:<span class="string">&quot;appconfig&quot;</span> , <span class="string">&quot;password&quot;</span>:<span class="string">&quot;appconfig&quot;</span>,<span class="string">&quot;role&quot;</span>: <span class="string">&quot;USER&quot;</span> &#125;]&#125;</span><br><span class="line">  </span><br><span class="line">$ <span class="built_in">cd</span> /data/zkui &amp;&amp; sudo bash start.sh</span><br></pre></td></tr></table></figure><p>集群内其余机器，重复上述步骤</p><h1 id="Kafka集群"><a href="#Kafka集群" class="headerlink" title="Kafka集群"></a>Kafka集群</h1><table><thead><tr><th>主机</th><th>IP</th></tr></thead><tbody><tr><td>zk-01</td><td>192.168.0.1</td></tr><tr><td>zk-02</td><td>192.168.0.2</td></tr><tr><td>zk-03</td><td>192.168.0.3</td></tr></tbody></table><h2 id="安装Kafka"><a href="#安装Kafka" class="headerlink" title="安装Kafka"></a>安装Kafka</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /data/kafka &amp;&amp; <span class="built_in">cd</span> ~</span><br><span class="line">$ wget <span class="string">&quot;http://www-eu.apache.org/dist/kafka/1.0.1/kafka_2.12-1.0.1.tgz&quot;</span></span><br><span class="line">$ curl http://kafka.apache.org/KEYS | gpg --import</span><br><span class="line">$ wget https://dist.apache.org/repos/dist/release/kafka/1.0.1/kafka_2.12-1.0.1.tgz.asc</span><br><span class="line">$ gpg --verify kafka_2.12-1.0.1.tgz.asc kafka_2.12-1.0.1.tgz</span><br><span class="line">$ sudo tar -xvzf kafka_2.12-1.0.1.tgz --directory /data/kafka --strip-components 1</span><br><span class="line">$ sudo rm -rf kafka_2.12-1.0.1.tgz kafka_2.12-1.0.1.tgz.asc</span><br><span class="line"><span class="comment">## 更多参考 https://tecadmin.net/install-apache-kafka-ubuntu/</span></span><br></pre></td></tr></table></figure><h2 id="修改配置文件-3"><a href="#修改配置文件-3" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /data/kafka-logs</span><br><span class="line">$ sudo cp /data/kafka/config/server.properties&#123;,.bak&#125;</span><br><span class="line">$ sudo vim /data/kafka/config/server.properties</span><br><span class="line"> </span><br><span class="line">broker.id=0    <span class="comment"># 每台主机各不相同</span></span><br><span class="line">listeners=PLAINTEXT://0.0.0.0:9092</span><br><span class="line">advertised.listeners=PLAINTEXT://&lt;ip&gt;:9092</span><br><span class="line">delete.topic.enable = <span class="literal">true</span></span><br><span class="line">leader.imbalance.check.interval.seconds=5  <span class="comment"># leader不平衡检查间隔</span></span><br><span class="line">leader.imbalance.per.broker.percentage=1</span><br><span class="line">log.dirs=/data/kafka-logs</span><br><span class="line">offsets.topic.replication.factor=3</span><br><span class="line">log.retention.hours=72</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line">zookeeper.connect=192.168.0.1:2181,192.168.0.2:2181,192.168.0.3:2181</span><br><span class="line">  </span><br><span class="line">$ sudo vim /data/kafka/bin/kafka-server-start.sh</span><br><span class="line"><span class="built_in">export</span> JMX_PORT=12345    <span class="comment"># 暴露jmx端口，留待监控使用</span></span><br></pre></td></tr></table></figure><h2 id="注册为Systemd服务"><a href="#注册为Systemd服务" class="headerlink" title="注册为Systemd服务"></a>注册为Systemd服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser --system --no-create-home --disabled-password --disabled-login kafka</span><br><span class="line">$ sudo chown -R kafka:nogroup /data/kafka</span><br><span class="line">$ sudo chown -R kafka:nogroup /data/kafka-logs</span><br><span class="line">  </span><br><span class="line">$ sudo vim /etc/systemd/system/kafka.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=High-available, distributed message broker</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">User=kafka</span><br><span class="line">ExecStart=/data/kafka/bin/kafka-server-start.sh /data/kafka/config/server.properties</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启用服务</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> kafka.service</span><br><span class="line">$ sudo systemctl start kafka.service</span><br><span class="line"></span><br><span class="line"><span class="comment">## 更多参考 https://kafka.apache.org/quickstart</span></span><br></pre></td></tr></table></figure><h2 id="测试Kafka的使用（可选）"><a href="#测试Kafka的使用（可选）" class="headerlink" title="测试Kafka的使用（可选）"></a>测试Kafka的使用（可选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ /data/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br><span class="line">$ /data/kafka/bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line">  </span><br><span class="line">$ /data/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br><span class="line">&gt; Hello World</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 另外一个terminal</span></span><br><span class="line">$ /data/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h2 id="部署Kafka-manager"><a href="#部署Kafka-manager" class="headerlink" title="部署Kafka-manager"></a>部署<a href="https://github.com/yahoo/kafka-manager">Kafka-manager</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data &amp; sudo wget https://github.com/yahoo/kafka-manager/archive/1.3.3.17.zip</span><br><span class="line">$ sudo unzip kafka-manager-1.3.3.17.zip</span><br><span class="line">$ sudo mv kafka-manager-1.3.3.17 kafka-manager</span><br><span class="line">$ sudo chown -R kafka:nogroup /data/kafka-manager</span><br><span class="line">$ sudo vim /data/kafka-manager/conf/application.conf</span><br><span class="line">kafka-manager.zkhosts=<span class="string">&quot;192.168.0.1:2181,192.168.0.2:2181,192.168.0.3:2181&quot;</span></span><br><span class="line">basicAuthentication.enabled=<span class="literal">true</span></span><br><span class="line">basicAuthentication.username=<span class="string">&quot;&lt;username&gt;&quot;</span></span><br><span class="line">basicAuthentication.password=<span class="string">&quot;&lt;password&gt;&quot;</span></span><br><span class="line">  </span><br><span class="line">$ sudo vim /etc/systemd/system/kafka-manager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=High-available, distributed message broker manager</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">User=kafka</span><br><span class="line">ExecStart=/data/kafka-manager/bin/kafka-manager</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启用服务</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> kafka-manager.service</span><br><span class="line">$ sudo systemctl start kafka-manager.service</span><br></pre></td></tr></table></figure><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><div class="note warning"><p>在安装过程中，系统将提示您创建root密码。请务必记住root密码</p></div><h2 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h2><p>运行安全脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure><p>值得一提的是，<code>Disallow root login remotely?</code>，如果你需要使用root账号进行远程连接，请选择No</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>接下来测试下是否安装成功了</p><ol><li>运行状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status mysql.service</span><br><span class="line">● mysql.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2019-07-18 23:38:43 PDT; 11min ago</span><br><span class="line"> Main PID: 2948 (mysqld)</span><br><span class="line">    Tasks: 28</span><br><span class="line">   Memory: 142.6M</span><br><span class="line">      CPU: 545ms</span><br><span class="line">   CGroup: /system.slice/mysql.service</span><br><span class="line">           └─2948 /usr/sbin/mysqld</span><br></pre></td></tr></table></figure><ol start="2"><li>登录查看版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mysqladmin -p -u root version</span><br><span class="line">mysqladmin  Ver 8.42 Distrib 5.7.26, <span class="keyword">for</span> Linux on x86_64</span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Server version5.7.26-0ubuntu0.16.04.1</span><br><span class="line">Protocol version10</span><br><span class="line">ConnectionLocalhost via UNIX socket</span><br><span class="line">UNIX socket/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:12 min 18 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 36  Slow queries: 0  Opens: 121  Flush tables: 1  Open tables: 40  Queries per second avg: 0.048</span><br></pre></td></tr></table></figure><p>到这里，Mysql安装完成！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html">Systemd 入门教程：命令篇</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;针对&lt;code&gt;Ubuntu 16.04&lt;/code&gt;，汇总常用服务的搭建指南。&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Ubuntu" scheme="https://gcdd1993.github.io/tags/Ubuntu/"/>
    
    <category term="运维" scheme="https://gcdd1993.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Java安全笔记</title>
    <link href="https://gcdd1993.github.io/p/10700/"/>
    <id>https://gcdd1993.github.io/p/10700/</id>
    <published>2019-04-10T12:13:10.000Z</published>
    <updated>2021-06-19T15:18:16.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>后端接口开发中，涉及到用户私密信息（用户名、密码）等，我们不能传输明文，必须使用加密方式传输。这次政府项目中，安全测试组提出了明文传输漏洞，抽空研究了下Java加解密相关知识，记录下。</p><span id="more"></span><h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>Java提供了一个名为<code>MessageDigest</code>的类，它属于<code>java.security</code>包。 此类支持诸如<code>SHA-1</code>，<code>SHA 256</code>，<code>MD5</code>之类的算法，以将任意长度的消息转换为信息摘要。</p><p>散列函数返回的值称为信息摘要或简称散列值。 下图说明了散列函数。</p><p><img data-src="https://i.loli.net/2019/04/10/5cade05f6faf5.png"></p><p>要使用散列函数加密数据，我们通常按照以下步骤执行：</p><h2 id="创建MessageDigest对象"><a href="#创建MessageDigest对象" class="headerlink" title="创建MessageDigest对象"></a>创建MessageDigest对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>MessageDigest</code>提供了<code>getInstance</code>静态方法来获得<code>MessageDigest</code>实例，支持的类型可参考<a href="https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F">Wiki-SHA家族</a></p></blockquote><h2 id="将数据传递给创建的MessageDigest对象"><a href="#将数据传递给创建的MessageDigest对象" class="headerlink" title="将数据传递给创建的MessageDigest对象"></a>将数据传递给创建的MessageDigest对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md.update(<span class="string">&quot;gcdd1993&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure><h2 id="生成消息摘要"><a href="#生成消息摘要" class="headerlink" title="生成消息摘要"></a>生成消息摘要</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] digest = md.digest();</span><br></pre></td></tr></table></figure><h2 id="通常我们会将其转换为Hex字符串"><a href="#通常我们会将其转换为Hex字符串" class="headerlink" title="通常我们会将其转换为Hex字符串"></a>通常我们会将其转换为Hex字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer hexString = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> aDigest : digest) &#123;</span><br><span class="line">    hexString.append(Integer.toHexString(<span class="number">0xFF</span> &amp; aDigest));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Hex format : &quot;</span> + hexString.toString());</span><br></pre></td></tr></table></figure><h1 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h1><blockquote><p>MAC(消息认证码)算法是一种对称密钥加密技术，用于提供消息认证。要建立MAC过程，发送方和接收方共享对称密钥K。</p></blockquote><p>实质上，MAC是在基础消息上生成的加密校验和，它与消息一起发送以确保消息验证。</p><p>使用MAC进行身份验证的过程如下图所示</p><p><img data-src="https://i.loli.net/2019/04/10/5cade5aaeaede.png"></p><p>在Java中，<code>javax.crypto</code>包的Mac类提供了消息认证代码的功能。按照以下步骤使用此类创建消息身份验证代码。</p><h2 id="创建KeyGenerator对象"><a href="#创建KeyGenerator对象" class="headerlink" title="创建KeyGenerator对象"></a>创建KeyGenerator对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KeyGenerator keyGen = KeyGenerator.getInstance(<span class="string">&quot;DES&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>KeyGenerator</code>支持以下类型：</p><ul><li>AES (128)</li><li>DES (56)</li><li>DESede (168)</li><li>HmacSHA1</li><li>HmacSHA256</li></ul></blockquote><h2 id="创建SecureRandom对象"><a href="#创建SecureRandom对象" class="headerlink" title="创建SecureRandom对象"></a>创建SecureRandom对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom();</span><br></pre></td></tr></table></figure><h2 id="初始化KeyGenerator"><a href="#初始化KeyGenerator" class="headerlink" title="初始化KeyGenerator"></a>初始化KeyGenerator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyGen.init(secureRandom);</span><br></pre></td></tr></table></figure><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Key key = keyGen.generateKey();</span><br></pre></td></tr></table></figure><h2 id="使用密钥初始化Mac对象"><a href="#使用密钥初始化Mac对象" class="headerlink" title="使用密钥初始化Mac对象"></a>使用密钥初始化Mac对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mac mac = Mac.getInstance(<span class="string">&quot;HmacMD5&quot;</span>);</span><br><span class="line">mac.init(key);</span><br></pre></td></tr></table></figure><blockquote><p><code>Mac</code>支持以下类型：</p><ul><li>HmacMD5</li><li>HmacSHA1</li><li>HmacSHA256</li></ul></blockquote><h2 id="完成mac操作"><a href="#完成mac操作" class="headerlink" title="完成mac操作"></a>完成mac操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String msg = <span class="string">&quot;gcdd1993&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = msg.getBytes();</span><br><span class="line"><span class="keyword">byte</span>[] macResult = mac.doFinal(bytes);</span><br></pre></td></tr></table></figure><h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><blockquote><p>数字签名允许验证签名的作者，日期和时间，验证消息内容。 它还包括用于其他功能的身份验证功能。</p></blockquote><p><img data-src="https://i.loli.net/2019/04/10/5cade8c25ab4c.png"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>认证</p><blockquote><p>数字签名有助于验证消息来源。 </p></blockquote></li><li><p>完整性</p><blockquote><p>邮件签名后，邮件中的任何更改都将使签名无效。</p></blockquote></li><li><p>不可否认</p><blockquote><p>通过此属性，任何已签署某些信息的实体都不能在以后拒绝签名。</p></blockquote></li></ul><h2 id="创建数字签名"><a href="#创建数字签名" class="headerlink" title="创建数字签名"></a>创建数字签名</h2><h3 id="创建KeyPairGenerator对象"><a href="#创建KeyPairGenerator对象" class="headerlink" title="创建KeyPairGenerator对象"></a>创建KeyPairGenerator对象</h3><blockquote><p><code>KeyPairGenerator</code>类提供<code>getInstance()</code>方法，该方法接受表示所需密钥生成算法的String变量，并返回生成密钥的<code>KeyPairGenerator</code>对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="初始化KeyPairGenerator对象"><a href="#初始化KeyPairGenerator对象" class="headerlink" title="初始化KeyPairGenerator对象"></a>初始化KeyPairGenerator对象</h3><blockquote><p><code>KeyPairGenerator</code>类提供了一个名为<code>initialize()</code>的方法，该方法用于初始化密钥对生成器。 此方法接受表示密钥大小的整数值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyPairGen.initialize(<span class="number">2048</span>);</span><br></pre></td></tr></table></figure><h3 id="生成KeyPair"><a href="#生成KeyPair" class="headerlink" title="生成KeyPair"></a>生成KeyPair</h3><blockquote><p>使用<code>generateKeyPair()</code>方法生成密钥对</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KeyPair pair = keyPairGen.generateKeyPair();</span><br></pre></td></tr></table></figure><h3 id="从密钥对中获取私钥"><a href="#从密钥对中获取私钥" class="headerlink" title="从密钥对中获取私钥"></a>从密钥对中获取私钥</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrivateKey privateKey = pair.getPrivate();</span><br></pre></td></tr></table></figure><h3 id="创建签名对象"><a href="#创建签名对象" class="headerlink" title="创建签名对象"></a>创建签名对象</h3><blockquote><p><code>Signature</code>类的<code>getInstance()</code>方法接受表示所需签名算法的字符串参数，并返回相应的<code>Signature</code>对象。</p><p>Signature支持以下类型：</p><ul><li>SHA1withDSA</li><li>SHA1withRSA</li><li>SHA256withRSA</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Signature sign = Signature.getInstance(<span class="string">&quot;SHA256withDSA&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="初始化签名对象"><a href="#初始化签名对象" class="headerlink" title="初始化签名对象"></a>初始化签名对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign.initSign(privateKey);</span><br></pre></td></tr></table></figure><h3 id="将数据添加到Signature对象"><a href="#将数据添加到Signature对象" class="headerlink" title="将数据添加到Signature对象"></a>将数据添加到Signature对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String msg = <span class="string">&quot;gcdd1993&quot;</span>;</span><br><span class="line">sign.update(msg.getBytes());</span><br></pre></td></tr></table></figure><h3 id="计算签名"><a href="#计算签名" class="headerlink" title="计算签名"></a>计算签名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] signature = sign.sign();</span><br></pre></td></tr></table></figure><h2 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h2><blockquote><p>我们创建签名后，通常可以将私钥发送到客户端，以进行签名操作。服务端保存公钥，以进行签名验证</p></blockquote><h3 id="初始化签名对象以进行验证"><a href="#初始化签名对象以进行验证" class="headerlink" title="初始化签名对象以进行验证"></a>初始化签名对象以进行验证</h3><blockquote><p>使用公钥初始化签名对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign.initVerify(pair.getPublic());</span><br></pre></td></tr></table></figure><h3 id="更新要验证的数据"><a href="#更新要验证的数据" class="headerlink" title="更新要验证的数据"></a>更新要验证的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign.update(msg.getBytes());</span><br></pre></td></tr></table></figure><h3 id="验证签名-1"><a href="#验证签名-1" class="headerlink" title="验证签名"></a>验证签名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> verify = sign.verify(signature);</span><br><span class="line">Assert.assertTrue(verify);</span><br></pre></td></tr></table></figure><h1 id="公私钥加解密数据"><a href="#公私钥加解密数据" class="headerlink" title="公私钥加解密数据"></a>公私钥加解密数据</h1><blockquote><p>可以使用<code>javax.crypto</code>包的Cipher类加密给定数据。 </p></blockquote><p>获取公私钥的步骤，与签名类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">keyPairGen.initialize(<span class="number">2048</span>);</span><br><span class="line">KeyPair pair = keyPairGen.generateKeyPair();</span><br><span class="line">PublicKey publicKey = pair.getPublic();</span><br></pre></td></tr></table></figure><h2 id="加密数据"><a href="#加密数据" class="headerlink" title="加密数据"></a>加密数据</h2><h3 id="创建一个Cipher对象"><a href="#创建一个Cipher对象" class="headerlink" title="创建一个Cipher对象"></a>创建一个Cipher对象</h3><blockquote><p><code>Cipher</code>类的<code>getInstance()</code>方法接受表示所需转换的String变量，并返回实现给定转换的<code>Cipher</code>对象。</p><p>Cipher支持以下类型：</p><ul><li>AES/CBC/NoPadding (128)</li><li>AES/CBC/PKCS5Padding (128)</li><li>AES/ECB/NoPadding (128)</li><li>AES/ECB/PKCS5Padding (128)</li><li>DES/CBC/NoPadding (56)</li><li>DES/CBC/PKCS5Padding (56)</li><li>DES/ECB/NoPadding (56)</li><li>DES/ECB/PKCS5Padding (56)</li><li>DESede/CBC/NoPadding (168)</li><li>DESede/CBC/PKCS5Padding (168)</li><li>DESede/ECB/NoPadding (168)</li><li>DESede/ECB/PKCS5Padding (168)</li><li>RSA/ECB/PKCS1Padding (1024, 2048)</li><li>RSA/ECB/OAEPWithSHA-1AndMGF1Padding (1024, 2048)</li><li>RSA/ECB/OAEPWithSHA-256AndMGF1Padding (1024, 2048)</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cipher cipher = Cipher.getInstance(<span class="string">&quot;RSA/ECB/PKCS1Padding&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="使用公钥初始化Cipher对象"><a href="#使用公钥初始化Cipher对象" class="headerlink" title="使用公钥初始化Cipher对象"></a>使用公钥初始化Cipher对象</h3><blockquote><p><code>Cipher</code>类的<code>init()</code>方法接受两个参数，一个表示操作模式的整数参数(加密/解密)和一个表示公钥的Key对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br></pre></td></tr></table></figure><h3 id="将数据添加到Cipher对象"><a href="#将数据添加到Cipher对象" class="headerlink" title="将数据添加到Cipher对象"></a>将数据添加到Cipher对象</h3><blockquote><p><code>Cipher</code>类的<code>update()</code>方法接受表示要加密的数据的字节数组，并使用给定的数据更新当前对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String msg = <span class="string">&quot;gcdd1993&quot;</span>;</span><br><span class="line">cipher.update(msg.getBytes());</span><br></pre></td></tr></table></figure><h3 id="加密数据-1"><a href="#加密数据-1" class="headerlink" title="加密数据"></a>加密数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] cipherText = cipher.doFinal();</span><br></pre></td></tr></table></figure><h2 id="解密数据"><a href="#解密数据" class="headerlink" title="解密数据"></a>解密数据</h2><h3 id="使用私钥初始化Cipher对象"><a href="#使用私钥初始化Cipher对象" class="headerlink" title="使用私钥初始化Cipher对象"></a>使用私钥初始化Cipher对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipher.init(Cipher.DECRYPT_MODE, pair.getPrivate());</span><br></pre></td></tr></table></figure><h3 id="解密数据-1"><a href="#解密数据-1" class="headerlink" title="解密数据"></a>解密数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] decipheredText = cipher.doFinal(cipherText);</span><br><span class="line">Assert.assertEquals(msg, <span class="keyword">new</span> String(decipheredText));</span><br></pre></td></tr></table></figure><h1 id="第三方类库"><a href="#第三方类库" class="headerlink" title="第三方类库"></a>第三方类库</h1><blockquote><p>前后端适用且应用广泛的是<a href="https://github.com/brix/crypto-js"><code>Crypto-JS</code></a>,使用 <code>Crypto-JS </code>可以非常方便地在 JavaScript 进行 MD5、SHA1、SHA2、SHA3、RIPEMD-160 哈希散列，进行 AES、DES、Rabbit、RC4、Triple DES 加解密。</p></blockquote><h2 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h2><blockquote><p><strong>高级加密标准</strong>（英语：<strong>A</strong>dvanced <strong>E</strong>ncryption <strong>S</strong>tandard，缩写：<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">AES</a>），在密码学中又称<strong>Rijndael加密法</strong>，是美国联邦政府采用的一种<a href="https://zh.wikipedia.org/wiki/%E5%8D%80%E5%A1%8A%E5%8A%A0%E5%AF%86">区块加密</a>标准。这个标准用来替代原先的<a href="https://zh.wikipedia.org/wiki/DES">DES</a>，已经被多方分析且广为全世界所使用。</p></blockquote><p>一般来说，我们可以在服务端随机生成密钥，然后将密钥发送给客户端进行加密，上传密文到服务端，服务端进行解密。</p><p>本文只讨论Java的AES加解密方式。</p><h3 id="引入Jar包"><a href="#引入Jar包" class="headerlink" title="引入Jar包"></a>引入Jar包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile group: &#x27;org.webjars.npm&#x27;, name: &#x27;crypto-js&#x27;, version: &#x27;3.1.8&#x27;</span><br></pre></td></tr></table></figure><h3 id="生成密钥-1"><a href="#生成密钥-1" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">byte</span>[] key = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">random.nextBytes(key);</span><br><span class="line">SecretKeySpec keySpec = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">&quot;AES&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="生成偏移量"><a href="#生成偏移量" class="headerlink" title="生成偏移量"></a>生成偏移量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] iv = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">random.nextBytes(iv);</span><br><span class="line">IvParameterSpec ivSpec = <span class="keyword">new</span> IvParameterSpec(iv);</span><br></pre></td></tr></table></figure><h3 id="创建Cipher对象"><a href="#创建Cipher对象" class="headerlink" title="创建Cipher对象"></a>创建Cipher对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cipher cipher = Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="初始化Cipher为加密工作过程"><a href="#初始化Cipher为加密工作过程" class="headerlink" title="初始化Cipher为加密工作过程"></a>初始化Cipher为加密工作过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);</span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] original = cipher.doFinal(encrypted1);</span><br></pre></td></tr></table></figure><h2 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h2><h3 id="初始化Cipher为解密工作过程"><a href="#初始化Cipher为解密工作过程" class="headerlink" title="初始化Cipher为解密工作过程"></a>初始化Cipher为解密工作过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = cipher.doFinal(original);</span><br><span class="line">Assert.assertEquals(data, <span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure><h2 id="AES加解密总结"><a href="#AES加解密总结" class="headerlink" title="AES加解密总结"></a>AES加解密总结</h2><p>实际项目中，可以按照以下方式实现对称加密</p><ol><li>服务端提供一个接口，该接口负责随机生成key（密码）和iv（偏移量），并将其存入redis（设置超时时间）</li><li>客户端调用接口，获得key和iv以及一个redis_key，进行数据加密，将加密后的数据以及redis_key传到服务端</li><li>服务端使用redis_key获得key和iv，进行解密</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Java EE安全里，主要是进行客户端加密，以及服务端解密的过程来实现数据安全传输的目的。在这个过程中，特别要注意以下几点：</p><ul><li>随机性：加密方式不可单一，可通过更换<code>Cipher.getInstance()</code>的String值来随机生成加密工人进行加密。</li><li>保密性：加密使用的密钥或者偏移量等，需要使用超时、模糊目的等手段进行隐藏，加大破解成本。</li></ul><p>没有完全有效的加密，但是只要做到破解成本大于加密成本，就是有效的加密。这样，我们可以不断地更换加密方式达到我们想要的效果。</p><p>👉 <a href="https://github.com/gcdd1993/java-security-sample">代码仓库</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;后端接口开发中，涉及到用户私密信息（用户名、密码）等，我们不能传输明文，必须使用加密方式传输。这次政府项目中，安全测试组提出了明文传输漏洞，抽空研究了下Java加解密相关知识，记录下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://gcdd1993.github.io/tags/Java/"/>
    
    <category term="安全" scheme="https://gcdd1993.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Lombok 详解</title>
    <link href="https://gcdd1993.github.io/p/12232/"/>
    <id>https://gcdd1993.github.io/p/12232/</id>
    <published>2019-04-05T13:19:26.000Z</published>
    <updated>2021-06-19T15:18:16.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>lombok是一个编译级别的插件，它可以在项目编译的时候生成一些代码。通俗的说，lombok可以通过注解来标示生成<code>getter</code> <code>settter</code>等代码。</p><span id="more"></span><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>创建gradle项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile group: &#x27;org.projectlombok&#x27;, name: &#x27;lombok&#x27;, version: &#x27;1.16.20&#x27;</span><br></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h2><blockquote><p>标记字段不可为null</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="meta">@NonNull</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="meta">@NonNull</span> Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h2><blockquote><p>自动生成getter和setter方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h2><blockquote><p>自动关闭流代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cleanup</span></span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>对应的字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span> (Collections.singletonList(in).get(<span class="number">0</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AllArgsConstructor-NoArgsConstructor-RequiredArgsConstructor"><a href="#AllArgsConstructor-NoArgsConstructor-RequiredArgsConstructor" class="headerlink" title="@AllArgsConstructor/@NoArgsConstructor/@RequiredArgsConstructor"></a>@AllArgsConstructor/@NoArgsConstructor/@RequiredArgsConstructor</h2><blockquote><p>自动生成全参构造函数和无参构造函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h2><blockquote><p>自动生成建造者模式的bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    Person(String name, Integer age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person.<span class="function">PersonBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person.PersonBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        PersonBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Person.<span class="function">PersonBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Person.<span class="function">PersonBuilder <span class="title">age</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Person.PersonBuilder(name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;, age=&quot;</span> + <span class="keyword">this</span>.age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h2><blockquote><p>自动生成equals和hashcode方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (o == this) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else if (!(o instanceof Person)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Person other = (Person)o;</span><br><span class="line">            if (!other.canEqual(this)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Object this$name = this.name;</span><br><span class="line">                Object other$name = other.name;</span><br><span class="line">                if (this$name == null) &#123;</span><br><span class="line">                    if (other$name != null) &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (!this$name.equals(other$name)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Object this$age = this.age;</span><br><span class="line">                Object other$age = other.age;</span><br><span class="line">                if (this$age == null) &#123;</span><br><span class="line">                    if (other$age != null) &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (!this$age.equals(other$age)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected boolean canEqual(Object other) &#123;</span><br><span class="line">        return other instanceof Person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        int PRIME = true;</span><br><span class="line">        int result = 1;</span><br><span class="line">        Object $name = this.name;</span><br><span class="line">        int result = result * 59 + ($name == null ? 43 : $name.hashCode());</span><br><span class="line">        Object $age = this.age;</span><br><span class="line">        result = result * 59 + ($age == null ? 43 : $age.hashCode());</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h2><blockquote><p>自动生成toString()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person(name=&quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;, age=&quot;</span> + <span class="keyword">this</span>.age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><blockquote><p>自动生成全参构造函数、Getter方法、equals方法、hashCode法、toString方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：@Value不会生成Setter方法</p><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h2><blockquote><p>自动为被标记的方法添加synchronized锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object readLock = <span class="keyword">new</span> Object();</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Synchronized</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Synchronized</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">answerToLife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Synchronized(&quot;readLock&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object $LOCK = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object $lock = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object readLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>($LOCK) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">answerToLife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>($lock) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(readLock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Delegate"><a href="#Delegate" class="headerlink" title="@Delegate"></a>@Delegate</h2><blockquote><p>为标记属性生成委托方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Delegate</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DelegateExample delegateExample;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelegateExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DelegateExample delegateExample;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(DelegateExample delegateExample)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegateExample = delegateExample;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 委托方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegateExample.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;lombok是一个编译级别的插件，它可以在项目编译的时候生成一些代码。通俗的说，lombok可以通过注解来标示生成&lt;code&gt;getter&lt;/code&gt; &lt;code&gt;settter&lt;/code&gt;等代码。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Lombok" scheme="https://gcdd1993.github.io/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>消息队列（三）Apache ActiveMQ</title>
    <link href="https://gcdd1993.github.io/p/32495/"/>
    <id>https://gcdd1993.github.io/p/32495/</id>
    <published>2019-04-02T03:33:26.000Z</published>
    <updated>2021-06-19T15:18:16.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Ubuntu上安装ActiveMQ"><a href="#在Ubuntu上安装ActiveMQ" class="headerlink" title="在Ubuntu上安装ActiveMQ"></a>在Ubuntu上安装ActiveMQ</h1><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt dist-upgrade</span><br><span class="line">$ sudo apt autoremove</span><br><span class="line">$ sudo apt clean</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="搭建activemq服务"><a href="#搭建activemq服务" class="headerlink" title="搭建activemq服务"></a>搭建activemq服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /home/active-mq</span><br><span class="line">$ <span class="built_in">cd</span> /home/active-mq</span><br><span class="line">$ wget http://www.apache.org/dist/activemq/5.15.9/apache-activemq-5.15.9-bin.tar.gz</span><br><span class="line"><span class="comment"># 具体版本请查看http://www.apache.org/dist/activemq</span></span><br><span class="line">$ tar -zxvf apache-activemq-5.15.9-bin.tar.gz</span><br><span class="line"><span class="comment"># 如果未安装jdk，执行 sudo apt-get install openjdk-8-jdk</span></span><br><span class="line">$ ./activemq start</span><br><span class="line">INFO: Loading <span class="string">&#x27;/home/active-mq/apache-activemq-5.15.9//bin/env&#x27;</span></span><br><span class="line">INFO: Using java <span class="string">&#x27;/usr/bin/java&#x27;</span></span><br><span class="line">INFO: Starting - inspect logfiles specified <span class="keyword">in</span> logging.properties and log4j.properties to get details</span><br><span class="line">INFO: pidfile created : <span class="string">&#x27;/home/active-mq/apache-activemq-5.15.9//data/activemq.pid&#x27;</span> (pid <span class="string">&#x27;6356&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>浏览器打开<a href="http://localhost:8161/admin/%EF%BC%8C%E8%BE%93%E5%85%A5admin%EF%BC%8Cadmin">http://localhost:8161/admin/，输入admin，admin</a></p><p><img data-src="https://i.loli.net/2019/04/02/5ca2dc9f9f76c.png"></p><p>至此，ActiveMQ搭建完成。</p><h1 id="理解JMS-Java-Message-Service"><a href="#理解JMS-Java-Message-Service" class="headerlink" title="理解JMS( Java Message Service)"></a>理解JMS( Java Message Service)</h1><p>Java消息服务指的是两个应用程序之间进行异步通信的API，它为标准消息协议和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持JAVA应用程序开发。</p><h2 id="JMS模型"><a href="#JMS模型" class="headerlink" title="JMS模型"></a>JMS模型</h2><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9">点对点</a>（P2P）或队列模型</p><ul><li>只有一个消费者将获得消息</li><li>生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。</li><li>每一个成功处理的消息都由接收者签收</li></ul></li><li><p><a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85">发布/订阅</a>模型</p><ul><li>多个消费者可以获得消息</li><li>在发布者和订阅者之间存在时间依赖性。发布者需要创建一个订阅（subscription），以便客户能够购订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者创建了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。</li></ul></li></ul><h2 id="传统API"><a href="#传统API" class="headerlink" title="传统API"></a>传统API</h2><p>传统API提供的主要接口如下：</p><ul><li><p>ConnectionFactory：客户端用来创建连接的受管对象。简化API也会使用此接口。</p></li><li><p>Connection：客户端到JMS提供者之间的活动连接。</p></li><li><p>Session：发送和接收消息的一个单线程上下文。</p></li><li><p>MessageProducer：由Session创建的对象，用于发送消息到Queue或Topic</p></li><li><p>MessageConsumer：由Session创建的对象，用于接收Queue或Topic中的消息</p></li></ul><p><img data-src="https://i.loli.net/2019/04/02/5ca3451b03d54.jpg"></p><h2 id="简化API"><a href="#简化API" class="headerlink" title="简化API"></a>简化API</h2><p>简化API与传统API提供的消息功能是一样的，但是它需要的接口更少、使用更方便。 简化API提供的主要接口如下：</p><ul><li>ConnectionFactory：客户端用来创建连接的受管对象。传统API也会使用此接口。</li><li>JMSContext：客户端到JMS提供者之间的活动连接，以及发送和接收消息的一个单线程上下文。</li><li>JMSProducer：由JMSContext创建的对象，用于发送消息到Queue或Topic</li><li>JMSConsumer：由JMSContext创建的对象，用于接收Queue或Topic中的消息</li></ul><p><img data-src="https://i.loli.net/2019/04/02/5ca3456dda534.png"></p><p>在简化API中，一个JMSContext对象封装了传统API中Connection和Session两个对象的行为。</p><h2 id="开发一个JMS客户端"><a href="#开发一个JMS客户端" class="headerlink" title="开发一个JMS客户端"></a>开发一个JMS客户端</h2><p>一个使用传统API的JMS客户端典型的使用步骤如下：</p><ul><li>使用JNDI查找一个ConnectionFactory对象</li><li>使用JNDI查找一个或多个Destination对象</li><li>使用ConnectionFactory创建一个JMS Connection对象</li><li>使用Connection创建一个或多个JMS Session对象</li><li>使用Session和Destination对象创建需要的MessageProducer和MessageConsumer对象</li><li>通知Connection对象开始投递消息</li></ul><blockquote><p>Active MQ是完全实现JMS规范的JMS客户端</p></blockquote><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><h2 id="创建Hello-World项目"><a href="#创建Hello-World项目" class="headerlink" title="创建Hello World项目"></a>创建Hello World项目</h2><p>创建gradle项目，并编辑build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile group: &#x27;org.apache.activemq&#x27;, name: &#x27;activemq-all&#x27;, version: &#x27;5.15.9&#x27;</span><br><span class="line">compile group: &#x27;com.fasterxml.jackson.core&#x27;, name: &#x27;jackson-databind&#x27;, version: &#x27;2.9.8&#x27;</span><br></pre></td></tr></table></figure><h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldProducer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">            ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;vm://localhost&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 创建连接</span></span><br><span class="line">            Connection connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">// 3. 创建会话</span></span><br><span class="line">            Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">// 4. 创建目的地（主题或队列）</span></span><br><span class="line">            Destination destination = session.createQueue(<span class="string">&quot;TEST.FOO&quot;</span>);</span><br><span class="line">            <span class="comment">// 5. 从会话创建到目的地的消息发布者</span></span><br><span class="line">            MessageProducer producer = session.createProducer(destination);</span><br><span class="line">            producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line">            <span class="comment">// 6. 创建并发布消息</span></span><br><span class="line">            String text = <span class="string">&quot;Hello world! From: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; : &quot;</span> + <span class="keyword">this</span>.hashCode();</span><br><span class="line">            TextMessage message = session.createTextMessage(text);</span><br><span class="line">            System.out.println(<span class="string">&quot;Sent message: &quot;</span> + message.hashCode() + <span class="string">&quot; : &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            producer.send(message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 销毁资源</span></span><br><span class="line">            session.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught: &quot;</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldConsumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">ExceptionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建连接工厂</span></span><br><span class="line">            ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;vm://localhost&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 创建连接</span></span><br><span class="line">            Connection connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">// 3. 创建会话</span></span><br><span class="line">            Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">// 4. 创建目的地（主题或队列）</span></span><br><span class="line">            Destination destination = session.createQueue(<span class="string">&quot;TEST.FOO&quot;</span>);</span><br><span class="line">            <span class="comment">// 5. 从会话创建到目的地的消息消费者</span></span><br><span class="line">            MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">            <span class="comment">// 6. 等待接收消息</span></span><br><span class="line">            Message message = consumer.receive(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                String text = textMessage.getText();</span><br><span class="line">                System.out.println(<span class="string">&quot;Received: &quot;</span> + text);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Received: &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 销毁资源</span></span><br><span class="line">            consumer.close();</span><br><span class="line">            session.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught: &quot;</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JMS Exception occured.  Shutting down client.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldConsumer(), <span class="keyword">false</span>);</span><br><span class="line">        thread(<span class="keyword">new</span> HelloWorldProducer(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thread</span><span class="params">(Runnable runnable, <span class="keyword">boolean</span> daemon)</span> </span>&#123;</span><br><span class="line">        Thread brokerThread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        brokerThread.setDaemon(daemon);</span><br><span class="line">        brokerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行我们的测试程序，控制台将会打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sent message: 507732978 : Thread-6</span><br><span class="line">Sent message: 2056557229 : Thread-0</span><br><span class="line">Sent message: 39234146 : Thread-8</span><br><span class="line">Sent message: 1100925878 : Thread-13</span><br><span class="line">Sent message: 1566392082 : Thread-17</span><br><span class="line">Sent message: 1329793151 : Thread-1</span><br><span class="line">Sent message: 988436874 : Thread-16</span><br><span class="line">Received: Hello world! From: Thread-6 : 1442537083</span><br><span class="line">Received: Hello world! From: Thread-1 : 1531760310</span><br><span class="line">Received: Hello world! From: Thread-0 : 1817576164</span><br><span class="line">Received: Hello world! From: Thread-8 : 262381200</span><br><span class="line">Received: Hello world! From: Thread-17 : 1647178742</span><br><span class="line">Received: Hello world! From: Thread-13 : 1610404140</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;在Ubuntu上安装ActiveMQ&quot;&gt;&lt;a href=&quot;#在Ubuntu上安装ActiveMQ&quot; class=&quot;headerlink&quot; title=&quot;在Ubuntu上安装ActiveMQ&quot;&gt;&lt;/a&gt;在Ubuntu上安装ActiveMQ&lt;/h1&gt;&lt;h2 id=&quot;系统初始化&quot;&gt;&lt;a href=&quot;#系统初始化&quot; class=&quot;headerlink&quot; title=&quot;系统初始化&quot;&gt;&lt;/a&gt;系统初始化&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt dist-upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt autoremove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="消息中间件" scheme="https://gcdd1993.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="ActiveMQ" scheme="https://gcdd1993.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>消息队列（二）RabbitMQ</title>
    <link href="https://gcdd1993.github.io/p/45284/"/>
    <id>https://gcdd1993.github.io/p/45284/</id>
    <published>2019-04-01T10:20:18.000Z</published>
    <updated>2021-06-19T15:18:16.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Ubuntu上安装RabbitMQ"><a href="#在Ubuntu上安装RabbitMQ" class="headerlink" title="在Ubuntu上安装RabbitMQ"></a>在Ubuntu上安装RabbitMQ</h1><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt dist-upgrade</span><br><span class="line">$ sudo apt autoremove</span><br><span class="line">$ sudo apt clean</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> 127.0.0.1 mq &gt; /etc/hosts</span><br><span class="line">$ <span class="built_in">echo</span> rabbitmq &gt; /etc/hostname</span><br><span class="line">$ <span class="built_in">export</span> HOSTNAME=mq</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="搭建rabbitmq服务"><a href="#搭建rabbitmq服务" class="headerlink" title="搭建rabbitmq服务"></a>搭建rabbitmq服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;deb http://www.rabbitmq.com/debian/ testing main&#x27;</span>| sudo tee /etc/apt/sources.list.d/rabbitmq.list</span><br><span class="line">$ wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="创建管理账户"><a href="#创建管理账户" class="headerlink" title="创建管理账户"></a>创建管理账户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmqctl add_user <span class="built_in">test</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ sudo rabbitmqctl add_vhost /<span class="built_in">test</span></span><br><span class="line">$ sudo rabbitmqctl set_user_tags <span class="built_in">test</span> administrator</span><br><span class="line"></span><br><span class="line">$ sudo rabbitmqctl set_permissions -p /<span class="built_in">test</span> <span class="built_in">test</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line">$ sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h1 id="AMQP规范"><a href="#AMQP规范" class="headerlink" title="AMQP规范"></a>AMQP规范</h1><p>AMQP（高级消息队列协议）是一个网络协议。它支持符合要求的客户端应用（application）和消息中间件代理（messaging middleware broker）之间进行通信。</p><h2 id="消息代理和他们所扮演的角色"><a href="#消息代理和他们所扮演的角色" class="headerlink" title="消息代理和他们所扮演的角色"></a>消息代理和他们所扮演的角色</h2><p>消息代理（message brokers）从发布者（publishers）亦称生产者（producers）那儿接收消息，并根据既定的路由规则把接收到的消息发送给处理消息的消费者（consumers）。</p><p>由于AMQP是一个网络协议，所以这个过程中的发布者，消费者，消息代理 可以存在于不同的设备上。</p><h2 id="AMQP-0-9-1-模型简介"><a href="#AMQP-0-9-1-模型简介" class="headerlink" title="AMQP 0-9-1 模型简介"></a>AMQP 0-9-1 模型简介</h2><p>AMQP 0-9-1的工作过程如下图：消息（message）被发布者（publisher）发送给交换机（exchange），交换机常常被比喻成邮局或者邮箱。然后交换机将收到的消息根据路由规则分发给绑定的队列（queue）。最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。</p><p><img data-src="https://i.loli.net/2019/04/02/5ca2b9fc49b65.png"></p><blockquote><p>队列，交换机和绑定统称为AMQP实体（AMQP entities）。</p></blockquote><h2 id="交换机和交换机类型"><a href="#交换机和交换机类型" class="headerlink" title="交换机和交换机类型"></a>交换机和交换机类型</h2><p>交换机是用来发送消息的AMQP实体。交换机拿到一个消息之后将它路由给一个或零个队列。它使用哪种路由算法是由交换机类型和被称作绑定（bindings）的规则所决定的。AMQP 0-9-1的代理提供了四种交换机</p><table><thead><tr><th>Name（交换机类型）</th><th>Default pre-declared names（预声明的默认名称）</th></tr></thead><tbody><tr><td>Direct exchange（直连交换机）</td><td>(Empty string) and amq.direct</td></tr><tr><td>Fanout exchange（扇型交换机）</td><td>amq.fanout</td></tr><tr><td>Topic exchange（主题交换机）</td><td>amq.topic</td></tr><tr><td>Headers exchange（头交换机）</td><td>amq.match (and amq.headers in RabbitMQ)</td></tr></tbody></table><p>除交换机类型外，在声明交换机时还可以附带许多其他的属性，其中最重要的几个分别是：</p><ul><li>Name</li><li>Durability （消息代理重启后，交换机是否还存在）</li><li>Auto-delete （当所有与之绑定的消息队列都完成了对此交换机的使用后，删掉它）</li><li>Arguments（依赖代理本身）</li></ul><p>交换机可以有两个状态：持久（durable）、暂存（transient）。持久化的交换机会在消息代理（broker）重启后依旧存在，而暂存的交换机则不会（它们需要在代理再次上线后重新被声明）。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>AMQP中的队列（queue）跟其他消息队列或任务队列中的队列是很相似的：它们存储着即将被应用消费掉的消息。</p><p>队列跟交换机共享某些属性，但是队列也有一些另外的属性。</p><ul><li>Name</li><li>Durable（消息代理重启后，队列依旧存在）</li><li>Exclusive（只被一个连接（connection）使用，而且当连接关闭后队列即被删除）</li><li>Auto-delete（当最后一个消费者退订后即被删除）</li><li>Arguments（一些消息代理用他来完成类似与TTL的某些额外功能）</li></ul><p>队列在声明（declare）后才能被使用。如果一个队列尚不存在，声明一个队列会创建它。如果声明的队列已经存在，并且属性完全相同，那么此次声明不会对原有队列产生任何影响。如果声明中的属性与已存在队列的属性有差异，那么一个错误代码为406的通道级异常就会被抛出。</p><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>绑定（Binding）是交换机（exchange）将消息（message）路由给队列（queue）所需遵循的规则。</p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><ul><li>将消息投递给应用 (“push API”)</li><li>应用根据需要主动获取消息 (“pull API”)</li></ul><h3 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h3><ul><li>自动确认：当消息代理（broker）将消息发送给应用后立即删除。</li><li>显式确认：待应用（application）发送一个确认回执（acknowledgement）后再删除消息。</li></ul><h3 id="拒绝消息"><a href="#拒绝消息" class="headerlink" title="拒绝消息"></a>拒绝消息</h3><p>当拒绝一条消息时，可以</p><ul><li>销毁消息</li><li>重新放入消息队列</li></ul><p>当此队列只有一个消费者时，请确认不要由于拒绝消息并且选择了重新放入队列的行为而引起消息在同一个消费者身上无限循环的情况发生。</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><ul><li>生产(Producing)的意思就是发送。发送消息的程序就是一个生产者(producer)。我们一般用”P”来表示:<br><img data-src="https://i.loli.net/2019/04/02/5ca23898ea5b0.png"></li><li>队列(queue)就是存在于RabbitMQ中邮箱的名称。虽然消息的传输经过了RabbitMQ和你的应用程序，但是它只能被存储于队列当中。实质上队列就是个巨大的消息缓冲区，它的大小只受主机内存和硬盘限制。多个生产者（producers）可以把消息发送给同一个队列，同样，多个消费者（consumers）也能够从同一个队列（queue）中获取数据。队列可以绘制成这样（图上是队列的名称）：<br><img data-src="https://i.loli.net/2019/04/02/5ca238ab81f7c.png"></li><li>在这里，消费（Consuming）和接收(receiving)是同一个意思。一个消费者（consumer）就是一个等待获取消息的程序。我们把它绘制为”C”：<br><img data-src="https://i.loli.net/2019/04/02/5ca238bd84a4a.png"></li></ul><p>需要指出的是生产者、消费者、代理需不要待在同一个设备上；事实上大多数应用也确实不在会将他们放在一台机器上。</p><p>创建gradle项目，并配置build.gradle：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile group: <span class="string">&#x27;com.rabbitmq&#x27;</span>, name: <span class="string">&#x27;amqp-client&#x27;</span>, version: <span class="string">&#x27;5.6.0&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建RabbitMQ连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 2. 设置host,rabbitmq-server的监听地址</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 4. 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 5. 连接到具体频道</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        String message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 6. 发布消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 4. 创建频道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，生产者和消费者需要声明是同一个队列</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们先执行Send.main，控制台将打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &#x27;Hello World!&#x27;</span><br></pre></td></tr></table></figure><p>然后执行Recv.main，控制台将打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">[x] Received &#x27;Hello World!&#x27;</span><br></pre></td></tr></table></figure><h1 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h1><p><img data-src="https://i.loli.net/2019/04/01/5ca21485049c7.png"></p><p>工作队列（又称：任务队列——Task Queues）是为了避免等待一些占用大量资源、时间的操作。当我们把任务（Task）当作消息发送到队列中，一个运行在后台的工作者（worker）进程就会取出任务然后处理。当你运行多个工作者（workers），任务就会在它们之间共享。</p><p>这个概念在网络应用中是非常有用的，它可以在短暂的HTTP请求中处理一些复杂的任务。</p><p>修改<a href="#%E5%88%9B%E5%BB%BA%E7%94%9F%E4%BA%A7%E8%80%85">Send.java</a>代码，来间隔10秒发送一个消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    String message = String.format(<span class="string">&quot;发送第%d条消息&quot;</span>, i);</span><br><span class="line">    <span class="comment">// 6. 发布消息</span></span><br><span class="line">    channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">    System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<a href="#%E5%88%9B%E5%BB%BA%E6%B6%88%E8%B4%B9%E8%80%85">Recv.java</a>，来完成一个任务，这里，假装任务执行需要耗时1s：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doWork(message);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; [x] Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">(String task)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : task.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先开启Recv.java，然后开启Send.java，控制台将会打印</p><p>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &#x27;发送第1条消息&#x27;</span><br><span class="line">[x] Sent &#x27;发送第2条消息&#x27;</span><br><span class="line">[x] Sent &#x27;发送第3条消息&#x27;</span><br></pre></td></tr></table></figure><p>Recv.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">[x] Received &#x27;发送第1条消息&#x27;</span><br><span class="line">[x] Done</span><br><span class="line">[x] Received &#x27;发送第2条消息&#x27;</span><br><span class="line">[x] Done</span><br><span class="line">[x] Received &#x27;发送第3条消息&#x27;</span><br></pre></td></tr></table></figure><h2 id="循环调度"><a href="#循环调度" class="headerlink" title="循环调度"></a>循环调度</h2><p>使用工作队列的一个好处就是它能够并行的处理队列。如果堆积了很多任务，我们只需要添加更多的工作者（workers）就可以了，扩展很简单。</p><p>让我们尝试同时运行两个worker实例，他们都会从队列中获取消息：</p><p>Send.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x] Sent &#x27;发送第1条消息&#x27;</span><br><span class="line">[x] Sent &#x27;发送第2条消息&#x27;</span><br><span class="line">[x] Sent &#x27;发送第3条消息&#x27;</span><br></pre></td></tr></table></figure><p>Recv.java-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">[x] Received &#x27;发送第1条消息&#x27;</span><br><span class="line">[x] Done</span><br><span class="line">[x] Received &#x27;发送第3条消息&#x27;</span><br><span class="line">[x] Done</span><br></pre></td></tr></table></figure><p>Recv.java-2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] Waiting for messages. To exit press CTRL+C</span><br><span class="line">[x] Received &#x27;发送第2条消息&#x27;</span><br><span class="line">[x] Done</span><br></pre></td></tr></table></figure><p>默认来说，RabbitMQ会按顺序得把消息发送给每个消费者（consumer）。平均每个消费者都会收到同等数量得消息。这种发送消息得方式叫做——轮询（round-robin）。试着添加三个或更多得工作者（workers）。</p><h2 id="消息确认-1"><a href="#消息确认-1" class="headerlink" title="消息确认"></a>消息确认</h2><p>当处理一个比较耗时得任务的时候，你也许想知道消费者（consumers）是否运行到一半就挂掉。当前的代码中，当消息被RabbitMQ发送给消费者（consumers）之后，马上就会在内存中移除。这种情况，你只要把一个工作者（worker）停止，正在处理的消息就会丢失。同时，所有发送到这个工作者的还没有处理的消息都会丢失。</p><p>我们不想丢失任何任务消息。如果一个工作者（worker）挂掉了，我们希望任务会重新发送给其他的工作者（worker）。</p><p>为了防止消息丢失，RabbitMQ提供了消息响应（acknowledgments）。消费者会通过一个ack（响应），告诉RabbitMQ已经收到并处理了某条消息，然后RabbitMQ就会释放并删除这条消息。</p><p>如果消费者（consumer）挂掉了，没有发送响应，RabbitMQ就会认为消息没有被完全处理，然后重新发送给其他消费者（consumer）。这样，及时工作者（workers）偶尔的挂掉，也不会丢失消息。</p><p>消息是没有超时这个概念的；当工作者与它断开连的时候，RabbitMQ会重新发送消息。这样在处理一个耗时非常长的消息任务的时候就不会出问题了。</p><p>消息响应默认是开启的。之前的例子中我们可以使用no_ack=True标识把它关闭。是时候移除这个标识了，当工作者（worker）完成了任务，就发送一个响应。</p><p>修改Worker.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次只接受一条消息</span></span><br><span class="line">channel.basicQos(<span class="number">1</span>);</span><br><span class="line">DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">    String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doWork(message);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line">channel.basicConsume(QUEUE_NAME, autoAck, deliverCallback, consumerTag -&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行上面的代码，我们发现即使使用CTRL+C杀掉了一个工作者（worker）进程，消息也不会丢失。当工作者（worker）挂掉这后，所有没有响应的消息都会重新发送。</p><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>如果你没有特意告诉RabbitMQ，那么在它退出或者崩溃的时候，将会丢失所有队列和消息。为了确保信息不会丢失，有两个事情是需要注意的：我们必须把“队列”和“消息”设为持久化。</p><p>首先，为了不让队列消失，需要把队列声明为持久化（durable）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.queueDeclare(QUEUE_NAME, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>尽管这行代码本身是正确的，但是仍然不会正确运行。因为我们已经定义过一个叫hello的非持久化队列。RabbitMq不允许你使用不同的参数重新定义一个队列，它会返回一个错误。但我们现在使用一个快捷的解决方法——用不同的名字，例如task_queue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;task_queue&quot;</span>, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>这时候，我们就可以确保在RabbitMq重启之后queue_declare队列不会丢失。现在我们需要将消息标记为持久性 - 通过将MessageProperties（实现BasicProperties）设置为值PERSISTENT_TEXT_PLAIN。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;task_queue&quot;</span>,</span><br><span class="line">            MessageProperties.PERSISTENT_TEXT_PLAIN,</span><br><span class="line">            message.getBytes());</span><br></pre></td></tr></table></figure><h2 id="公平调度"><a href="#公平调度" class="headerlink" title="公平调度"></a>公平调度</h2><p>你应该已经发现，它仍旧没有按照我们期望的那样进行分发。比如有两个工作者（workers），处理奇数消息的比较繁忙，处理偶数消息的比较轻松。然而RabbitMQ并不知道这些，它仍然一如既往的派发消息。</p><p>这时因为RabbitMQ只管分发进入队列的消息，不会关心有多少消费者（consumer）没有作出响应。它盲目的把第n-th条消息发给第n-th个消费者。</p><p><img data-src="https://i.loli.net/2019/04/02/5ca238f761f47.png"></p><p>我们可以使用basicQos方法，并设置<code>prefetchCount = 1</code>。这样是告诉RabbitMQ，再同一时刻，不要发送超过1条消息给一个工作者（worker），直到它已经处理了上一条消息并且作出了响应。这样，RabbitMQ就会把消息分发给下一个空闲的工作者（worker）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br></pre></td></tr></table></figure><h1 id="发布／订阅"><a href="#发布／订阅" class="headerlink" title="发布／订阅"></a>发布／订阅</h1><p>在上篇教程中，我们搭建了一个工作队列，每个任务只分发给一个工作者（worker）。在本篇教程中，我们要做的跟之前完全不一样 —— 分发一个消息给多个消费者（consumers）。这种模式被称为“发布／订阅”。</p><p>为了描述这种模式，我们将会构建一个简单的日志系统。</p><h2 id="交换机（Exchanges）"><a href="#交换机（Exchanges）" class="headerlink" title="交换机（Exchanges）"></a>交换机（Exchanges）</h2><p>RabbitMQ中完整的消息模型：</p><ul><li>发布者（producer）是发布消息的应用程序。</li><li>队列（queue）用于消息存储的缓冲。</li><li>消费者（consumer）是接收消息的应用程序。</li></ul><p>RabbitMQ消息模型的核心理念是：发布者（producer）不会直接发送任何消息给队列。事实上，发布者（producer）甚至不知道消息是否已经被投递到队列。</p><p>发布者（producer）只需要把消息发送给一个交换机（exchange）。交换机非常简单，它一边从发布者方接收消息，一边把消息推送到队列。交换机必须知道如何处理它接收到的消息，是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的。</p><p><img data-src="https://i.loli.net/2019/04/01/5ca22e6de6cab.png"></p><p>有几个可供选择的交换机类型：直连交换机（direct）, 主题交换机（topic）, （头交换机）headers和 扇型交换机（fanout）。我们在这里主要说明最后一个 —— 扇型交换机（fanout）。先创建一个fanout类型的交换机，命名为logs：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.exchangeDeclare(<span class="string">&quot;logs&quot;</span>, <span class="string">&quot;fanout&quot;</span>);</span><br></pre></td></tr></table></figure><p>扇型交换机（fanout）很简单，你可能从名字上就能猜测出来，它把消息发送给它所知道的所有队列。</p><p>现在，我们就可以发送消息到一个具名交换机了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish( <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure><h2 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h2><p>要创建一个临时队列，我们需要做两件事情：</p><ol><li><p>当我们连接上RabbitMQ的时候，我们需要一个全新的、空的队列。我们可以手动创建一个随机的队列名，或者让服务器为我们选择一个随机的队列名（推荐）。</p></li><li><p>当与消费者（consumer）断开连接的时候，这个队列应当被立即删除。</p></li></ol><p>在Java客户端中，当我们没有向queueDeclare（）提供参数时，我们使用生成的名称创建一个非持久的，独占的自动删除队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器分配的随机队列名，可能像这样 amq.gen-U0srCoW8TsaXjNh73pnVAw==</span></span><br><span class="line">String queueName = channel.queueDeclare().getQueue();</span><br></pre></td></tr></table></figure><h2 id="绑定（Bindings）"><a href="#绑定（Bindings）" class="headerlink" title="绑定（Bindings）"></a>绑定（Bindings）</h2><p><img data-src="https://i.loli.net/2019/04/01/5ca230f4266fc.png"></p><p>我们已经创建了一个扇型交换机（fanout）和一个队列。现在我们需要告诉交换机如何发送消息给我们的队列。交换器和队列之间的联系我们称之为绑定（binding）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(queueName, <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="路由-Routing"><a href="#路由-Routing" class="headerlink" title="路由(Routing)"></a>路由(Routing)</h1><p>前面的例子，我们已经创建过绑定（bindings），代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>绑定（binding）是指交换机（exchange）和队列（queue）的关系。可以简单理解为：这个队列（queue）对这个交换机（exchange）的消息感兴趣。</p><p>绑定的时候可以带上一个额外的routing_key参数。为了避免与basic_publish的参数混淆，我们把它叫做绑定键（binding key）。以下是如何创建一个带绑定键的绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">&quot;black&quot;</span>);</span><br></pre></td></tr></table></figure><p>绑定键的意义取决于交换机（exchange）的类型。我们之前使用过的扇型交换机（fanout exchanges）会忽略这个值。</p><h2 id="直连交换机（Direct-exchange）"><a href="#直连交换机（Direct-exchange）" class="headerlink" title="直连交换机（Direct exchange）"></a>直连交换机（Direct exchange）</h2><p>我们的日志系统广播所有的消息给所有的消费者（consumers）。我们打算扩展它，使其基于日志的严重程度进行消息过滤。</p><p>我们使用的扇型交换机（fanout exchange）没有足够的灵活性 —— 它能做的仅仅是广播。</p><p>我们将会使用直连交换机（direct exchange）来代替。路由的算法很简单 —— 交换机将会对绑定键（binding key）和路由键（routing key）进行精确匹配，从而确定消息该分发到哪个队列。</p><p>下图能够很好的描述这个场景：</p><p><img data-src="https://i.loli.net/2019/04/01/5ca23254e4784.png"></p><p>在这个场景中，我们可以看到直连交换机 X和两个队列进行了绑定。第一个队列使用orange作为绑定键，第二个队列有两个绑定，一个使用black作为绑定键，另外一个使用green。</p><p>这样以来，当路由键为orange的消息发布到交换机，就会被路由到队列Q1。路由键为black或者green的消息就会路由到Q2。其他的所有消息都将会被丢弃。</p><h2 id="多个绑定（Multiple-bindings）"><a href="#多个绑定（Multiple-bindings）" class="headerlink" title="多个绑定（Multiple bindings）"></a>多个绑定（Multiple bindings）</h2><p><img data-src="https://i.loli.net/2019/04/01/5ca2330e8a92f.png"></p><p>多个队列使用相同的绑定键是合法的。这个例子中，我们可以添加一个X和Q1之间的绑定，使用black绑定键。这样一来，直连交换机就和扇型交换机的行为一样，会将消息广播到所有匹配的队列。带有black路由键的消息会同时发送到Q1和Q2。</p><h2 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志"></a>发送日志</h2><p>我们将会发送消息到一个直连交换机，把日志级别作为路由键。这样接收日志的脚本就可以根据严重级别来选择它想要处理的日志。我们先看看发送日志。</p><p>我们需要创建一个交换机（exchange）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">&quot;direct&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后我们发送一则消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish(EXCHANGE_NAME, severity, <span class="keyword">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>处理接收消息的方式和之前差不多，只有一个例外，我们将会为我们感兴趣的每个严重级别分别创建一个新的绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String severity : argv)&#123;</span><br><span class="line">  channel.queueBind(queueName, EXCHANGE_NAME, severity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><img data-src="https://i.loli.net/2019/04/01/5ca2339a9dd56.png"></p><p><a href="">Routing</a></p><h1 id="主题交换机"><a href="#主题交换机" class="headerlink" title="主题交换机"></a>主题交换机</h1><p>直连交换机的限制 —— 没办法基于多个标准执行路由操作。</p><p>发送到主题交换机（topic exchange）的消息不可以携带随意什么样子的路由键（routing_key），它的路由键必须是一个由<code>.</code>分隔开的词语列表。这些单词随便是什么都可以，但是最好是跟携带它们的消息有关系的词汇。以下是几个推荐的例子：”stock.usd.nyse”, “nyse.vmw”, “quick.orange.rabbit”。词语的个数可以随意，但是不要超过255字节。</p><p>绑定键也必须拥有同样的格式。主题交换机背后的逻辑跟直连交换机很相似 —— 一个携带着特定路由键的消息会被主题交换机投递给绑定键与之想匹配的队列。但是它的绑定键和路由键有两个特殊应用方式：</p><ul><li><code>*</code> (星号) 用来表示一个单词.</li><li><code>#</code> (井号) 用来表示任意数量（零个或多个）单词。</li></ul><p>下边用图说明：</p><p><img data-src="https://i.loli.net/2019/04/02/5ca23915b99b2.png"></p><p>我们创建了三个绑定：Q1的绑定键为 <code>*.orange.*</code>，Q2的绑定键为 <code>*.*.rabbit</code> 和 <code>lazy.#</code> 。</p><p>这三个绑定键被可以总结为：</p><ul><li>Q1 对<em>所有的桔黄色动物</em>都感兴趣。</li><li>Q2 则是对<em>所有的兔子</em>和<em>所有懒惰的动物</em>感兴趣。</li></ul><blockquote><p>主题交换机是很强大的，它可以表现出跟其他交换机类似的行为</p><p>当一个队列的绑定键为 “#”（井号） 的时候，这个队列将会无视消息的路由键，接收所有的消息。</p><p>当 <code>*</code> (星号) 和 <code>#</code> (井号) 这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。</p></blockquote><h1 id="远程过程调用（RPC）"><a href="#远程过程调用（RPC）" class="headerlink" title="远程过程调用（RPC）"></a>远程过程调用（RPC）</h1><p>如果我们需要将一个函数运行在远程计算机上并且等待从那儿获取结果时，这种模式通常被称为远程过程调用（Remote Procedure Call）或者RPC。</p><p>我们会使用RabbitMQ来构建一个RPC系统：包含一个客户端和一个RPC服务器。</p><h2 id="客户端接口"><a href="#客户端接口" class="headerlink" title="客户端接口"></a>客户端接口</h2><p>为了展示RPC服务如何使用，我们创建了一个简单的客户端类。它会暴露出一个名为“call”的方法用来发送一个RPC请求，并且在收到回应前保持阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FibonacciRpcClient fibonacciRpc = <span class="keyword">new</span> FibonacciRpcClient();</span><br><span class="line">String result = fibonacciRpc.call(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">System.out.println( <span class="string">&quot;fib(4) is &quot;</span> + result);</span><br></pre></td></tr></table></figure><h3 id="回调队列"><a href="#回调队列" class="headerlink" title="回调队列"></a>回调队列</h3><p>一般来说通过RabbitMQ来实现RPC是很容易的。一个客户端发送请求信息，服务器端将其应用到一个回复信息中。为了接收到回复信息，客户端需要在发送请求的时候同时发送一个回调队列（callback queue）的地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">callbackQueueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">BasicProperties props = <span class="keyword">new</span> BasicProperties</span><br><span class="line">                            .Builder()</span><br><span class="line">                            .replyTo(callbackQueueName)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;rpc_queue&quot;</span>, props, message.getBytes());</span><br></pre></td></tr></table></figure><blockquote><h4 id="消息属性"><a href="#消息属性" class="headerlink" title="消息属性"></a>消息属性</h4><p>AMQP协议给消息预定义了一系列的14个属性。大多数属性很少会用到，除了以下几个：</p><ul><li>delivery_mode（投递模式）：将消息标记为持久的（值为2）或暂存的（除了2之外的其他任何值）。第二篇教程里接触过这个属性，记得吧？</li><li>content_type（内容类型）:用来描述编码的mime-type。例如在实际使用中常常使用application/json来描述JOSN编码类型。</li><li>reply_to（回复目标）：通常用来命名回调队列。</li><li>correlation_id（关联标识）：用来将RPC的响应和请求关联起来。</li></ul></blockquote><h3 id="关联标识"><a href="#关联标识" class="headerlink" title="关联标识"></a>关联标识</h3><p>上边介绍的方法中，我们建议给每一个RPC请求新建一个回调队列。这不是一个高效的做法，幸好这儿有一个更好的办法 —— 我们可以为每个客户端只建立一个独立的回调队列。</p><p>这就带来一个新问题，当此队列接收到一个响应的时候它无法辨别出这个响应是属于哪个请求的。<strong>correlation_id</strong> 就是为了解决这个问题而来的。我们给每个请求设置一个独一无二的值。稍后，当我们从回调队列中接收到一个消息的时候，我们就可以查看这条属性从而将响应和请求匹配起来。如果我们接手到的消息的correlation_id是未知的，那就直接销毁掉它，因为它不属于我们的任何一条请求。</p><p>为什么我们接收到未知消息的时候不抛出一个错误，而是要将它忽略掉？这是为了解决服务器端有可能发生的竞争情况。尽管可能性不大，但RPC服务器还是有可能在已将应答发送给我们但还未将确认消息发送给请求的情况下死掉。如果这种情况发生，RPC在重启后会重新处理请求。这就是为什么我们必须在客户端优雅的处理重复响应，同时RPC也需要尽可能保持幂等性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img data-src="https://i.loli.net/2019/04/02/5ca236b2abcea.png"></p><p>我们的RPC如此工作:</p><ul><li>当客户端启动的时候，它创建一个匿名独享的回调队列。</li><li>在RPC请求中，客户端发送带有两个属性的消息：一个是设置回调队列的 <em>reply_to</em> 属性，另一个是设置唯一值的 <em>correlation_id</em> 属性。</li><li>将请求发送到一个 <em>rpc_queue</em> 队列中。</li><li>RPC工作者（又名：服务器）等待请求发送到这个队列中来。当请求出现的时候，它执行他的工作并且将带有执行结果的消息发送给reply_to字段指定的队列。</li><li>客户端等待回调队列里的数据。当有消息出现的时候，它会检查correlation_id属性。如果此属性的值与请求匹配，将它返回给应用。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;在Ubuntu上安装RabbitMQ&quot;&gt;&lt;a href=&quot;#在Ubuntu上安装RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;在Ubuntu上安装RabbitMQ&quot;&gt;&lt;/a&gt;在Ubuntu上安装RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;系统初始化&quot;&gt;&lt;a href=&quot;#系统初始化&quot; class=&quot;headerlink&quot; title=&quot;系统初始化&quot;&gt;&lt;/a&gt;系统初始化&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt dist-upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt autoremove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 127.0.0.1 mq &amp;gt; /etc/hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; rabbitmq &amp;gt; /etc/hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; HOSTNAME=mq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="消息中间件" scheme="https://gcdd1993.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="RabbitMQ" scheme="https://gcdd1993.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>消息队列（一）简介</title>
    <link href="https://gcdd1993.github.io/p/27791/"/>
    <id>https://gcdd1993.github.io/p/27791/</id>
    <published>2019-04-01T10:01:43.000Z</published>
    <updated>2021-06-19T15:18:16.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息队列-MQ-概述"><a href="#消息队列-MQ-概述" class="headerlink" title="消息队列(MQ)概述"></a>消息队列(MQ)概述</h1><p>消息队列（Message Queue），是分布式系统中重要的组件，其通用的使用场景可以简单地描述为：</p><blockquote><p>当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候。</p></blockquote><p>消息队列主要解决了应用耦合、异步处理、流量削锋等问题。</p><span id="more"></span><p>当前使用较多的消息队列有RabbitMQ、RocketMQ、ActiveMQ、Kafka、ZeroMQ、MetaMq等，而部分数据库如Redis、Mysql以及phxsql也可实现消息队列的功能。</p><h1 id="消息队列使用场景"><a href="#消息队列使用场景" class="headerlink" title="消息队列使用场景"></a>消息队列使用场景</h1><p>消息队列在实际应用中包括如下四个场景：</p><ul><li>应用耦合：多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败；</li><li>异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；</li><li>限流削峰：广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；</li><li>消息驱动的系统：系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者(可能有多个)负责对消息进行处理；</li></ul><p>下面详细介绍上述四个场景以及消息队列如何在上述四个场景中使用：</p><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>具体场景：用户为了使用某个应用，进行注册，系统需要发送注册邮件并验证<a href="https://cloud.tencent.com/product/sms">短信</a>。对这两个操作的处理方式有两种：串行及并行。</p><h3 id="串行方式"><a href="#串行方式" class="headerlink" title="串行方式"></a>串行方式</h3><p>新注册信息生成后，先发送注册邮件，再发送验证短信；</p><p><img data-src="https://i.loli.net/2019/04/01/5ca1e27b495ce.png"></p><p>在这种方式下，需要最终发送验证短信后再返回给客户端。</p><h3 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h3><p>新注册信息写入后，由发短信和发邮件并行处理；</p><p><img data-src="https://i.loli.net/2019/04/01/5ca1e29f4742c.png"></p><p>在这种方式下，发短信和发邮件 需处理完成后再返回给客户端。</p><p>假设以上三个子系统处理的时间均为50ms，且不考虑网络延迟，则总的处理时间：</p><blockquote><p>串行：50+50+50=150ms  并行：50+50 = 100ms</p></blockquote><h3 id="使用消息队列"><a href="#使用消息队列" class="headerlink" title="使用消息队列"></a>使用消息队列</h3><p><img data-src="https://i.loli.net/2019/04/01/5ca1e2d1891c2.png"></p><p>并在写入消息队列后立即返回成功给客户端，则总的响应时间依赖于写入消息队列的时间，而写入消息队列的时间本身是可以很快的，基本可以忽略不计，因此总的处理时间相比串行提高了2倍，相比并行提高了一倍；</p><h2 id="应用耦合"><a href="#应用耦合" class="headerlink" title="应用耦合"></a>应用耦合</h2><p>具体场景：用户使用QQ相册上传一张图片，<a href="https://cloud.tencent.com/product/facerecognition">人脸识别</a>系统会对该图片进行人脸识别，一般的做法是，服务器接收到图片后，图片上传系统立即调用人脸识别系统，调用完成后再返回成功，如下图所示：</p><p><img data-src="https://i.loli.net/2019/04/01/5ca1e2f60d0ce.png"></p><p>该方法有如下缺点：</p><ul><li>人脸识别系统被调失败，导致图片上传失败；</li><li>延迟高，需要人脸识别系统处理完成后，再返回给客户端，即使用户并不需要立即知道结果；</li><li>图片上传系统与人脸识别系统之间互相调用，需要做耦合；</li></ul><p>若使用消息队列：</p><p><img data-src="https://i.loli.net/2019/04/01/5ca1e3363239e.png"></p><p>客户端上传图片后，图片上传系统将图片信息如uin、批次写入消息队列，直接返回成功；而人脸识别系统则定时从消息队列中取数据，完成对新增图片的识别。 </p><p>此时图片上传系统并不需要关心人脸识别系统是否对这些图片信息的处理、以及何时对这些图片信息进行处理。事实上，由于用户并不需要立即知道人脸识别结果，人脸识别系统可以选择不同的调度策略，按照闲时、忙时、正常时间，对队列中的图片信息进行处理。</p><h2 id="限流削峰"><a href="#限流削峰" class="headerlink" title="限流削峰"></a>限流削峰</h2><p>具体场景：购物网站开展秒杀活动，一般由于瞬时访问量过大，服务器接收过大，会导致流量暴增，相关系统无法处理请求甚至崩溃。而加入消息队列后，系统可以从消息队列中取数据，相当于消息队列做了一次缓冲。</p><p><img data-src="https://i.loli.net/2019/04/01/5ca1e375ac957.png"></p><p>该方法有如下优点： </p><ol><li>请求先入消息队列，而不是由业务处理系统直接处理，做了一次缓冲,极大地减少了业务处理系统的压力； </li><li> 队列长度可以做限制，事实上，秒杀时，后入队列的用户无法秒杀到商品，这些请求可以直接被抛弃，返回活动已结束或商品已售完信息；</li></ol><h2 id="消息驱动的系统"><a href="#消息驱动的系统" class="headerlink" title="消息驱动的系统"></a>消息驱动的系统</h2><p>具体场景：用户新上传了一批照片， 人脸识别系统需要对这个用户的所有照片进行聚类，聚类完成后由对账系统重新生成用户的人脸索引(加快查询)。这三个子系统间由消息队列连接起来，前一个阶段的处理结果放入队列中，后一个阶段从队列中获取消息继续处理。</p><p><img data-src="https://i.loli.net/2019/04/01/5ca1e3cbaddd7.png"></p><p>该方法有如下优点：</p><ul><li>避免了直接调用下一个系统导致当前系统失败；</li><li>每个子系统对于消息的处理方式可以更为灵活，可以选择收到消息时就处理，可以选择定时处理，也可以划分时间段按不同处理速度处理；</li></ul><h1 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h1><p>消息队列包括两种模式，点对点模式（point to point， queue）和发布/订阅模式（publish/subscribe，topic）。</p><h2 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h2><ul><li>消息队列</li><li>发送者 (生产者)</li><li>接收者（消费者）</li></ul><p><img data-src="https://i.loli.net/2019/04/01/5ca1e40d3695e.png"></p><p>消息发送者生产消息发送到queue中，然后消息接收者从queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息接收者不可能消费到已经被消费的消息。</p><p>点对点模式特点：</p><ul><li>每个消息只有一个接收者（Consumer）(即一旦被消费，消息就不再在消息队列中)；</li><li>发送者和接收者间没有依赖性，发送者发送消息之后，不管有没有接收者在运行，都不会影响到发送者下次发送消息；</li><li>接收者在成功接收消息之后需向队列应答成功，以便消息队列删除当前接收的消息；</li></ul><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h2><p>发布/订阅模式下包括三个角色：</p><ul><li>角色主题（Topic）</li><li>发布者(Publisher)</li><li>订阅者(Subscriber)</li></ul><p><img data-src="https://i.loli.net/2019/04/01/5ca1e45320c45.png"></p><p>发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p><p>发布/订阅模式特点：</p><ul><li>每个消息可以有多个订阅者；</li><li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息；</li><li>为了消费消息，订阅者需要提前订阅该角色主题，并保持在线运行；</li></ul><h1 id="常用消息队列"><a href="#常用消息队列" class="headerlink" title="常用消息队列"></a>常用消息队列</h1><ul><li><a href="https://www.rabbitmq.com/">RabbitMQ</a></li><li><a href="http://activemq.apache.org/">ActiveMQ</a></li><li><a href="https://github.com/alibaba/RocketMQ">RocketMQ</a></li><li><a href="http://kafka.apache.org/">Apache Kafka</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;消息队列-MQ-概述&quot;&gt;&lt;a href=&quot;#消息队列-MQ-概述&quot; class=&quot;headerlink&quot; title=&quot;消息队列(MQ)概述&quot;&gt;&lt;/a&gt;消息队列(MQ)概述&lt;/h1&gt;&lt;p&gt;消息队列（Message Queue），是分布式系统中重要的组件，其通用的使用场景可以简单地描述为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;消息队列主要解决了应用耦合、异步处理、流量削锋等问题。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="mq" scheme="https://gcdd1993.github.io/tags/mq/"/>
    
    <category term="消息中间件" scheme="https://gcdd1993.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring IoC Container源码分析（二）-bean初始化流程</title>
    <link href="https://gcdd1993.github.io/p/60483/"/>
    <id>https://gcdd1993.github.io/p/60483/</id>
    <published>2019-03-29T02:11:12.000Z</published>
    <updated>2021-06-19T15:18:16.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>Person实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml bean配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.gcdd1993.spring.framework.base.domain.Person&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AbstractApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用Debug进入<code>ClassPathXmlApplicationContext</code>构造函数，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="super-parent"><a href="#super-parent" class="headerlink" title="super(parent)"></a>super(parent)</h1><p>一步步向上调用父类构造函数，路径为</p><p>ClassPathXmlApplicationContext -&gt; AbstractXmlApplicationContext -&gt; AbstractRefreshableConfigApplicationContext -&gt; AbstractRefreshableApplicationContext -&gt; AbstractApplicationContext</p><p>历经整个继承体系，最终到达<code>AbstractApplicationContext</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">(ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    setParent(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后会设置当前<code>ApplicationContext</code>的父级<code>ApplicationContext</code></p><h1 id="setConfigLocations-configLocations"><a href="#setConfigLocations-configLocations" class="headerlink" title="setConfigLocations(configLocations)"></a>setConfigLocations(configLocations)</h1><p>设置配置文件路径，解析的细节参照官方文档Resource一节，不是本文讨论的重点，在此略过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(String... locations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Assert.noNullElements(locations, <span class="string">&quot;Config locations must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="refresh"><a href="#refresh" class="headerlink" title="refresh()"></a>refresh()</h1><p>此方法是Spring容器的核心方法，源码(精简了try catch部分)如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">    prepareRefresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">    prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">    postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">    registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">    initMessageSource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">    initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">    onRefresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">    registerListeners();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">    finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">    finishRefresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处可以看到Spring编码方式近似于流程图的，重点部分都抽出为了单独的方法，流程清晰，易于理解。我们一步步看：</p><h2 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh()"></a>prepareRefresh()</h2><blockquote><p>上下文刷新前预热</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Refreshing &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize any placeholder property sources in the context environment</span></span><br><span class="line">    initPropertySources();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate that all properties marked as required are resolvable</span></span><br><span class="line">    <span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow for the collection of early ApplicationEvents,</span></span><br><span class="line">    <span class="comment">// to be published once the multicaster is available...</span></span><br><span class="line">    <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;ApplicationEvent&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设置上下文基本信息，如startupDate(启动时刻)、closed(是否关闭)、active(是否存活)等等。</li><li>解析占位符资源，并验证标记为required的资源是否可用</li></ol><h2 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory()"></a>obtainFreshBeanFactory()</h2><blockquote><p>初始化beanFactory(bean工厂，实际存放bean的就是它了)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Bean factory for &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心方法<code>refreshBeanFactory()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>createBeanFactory();</li><li>设置beanFactory属性</li><li>loadBeanDefinitions(beanFactory);</li></ol><h2 id="loadBeanDefinitions-beanFactory"><a href="#loadBeanDefinitions-beanFactory" class="headerlink" title="loadBeanDefinitions(beanFactory)"></a>loadBeanDefinitions(beanFactory)</h2><blockquote><p>解析bean定义，有几个bean就有几个BeanDefinition。注意，Spring并不是拿到配置就直接用反射实例化bean，而是先将bean配置解析为BeanDefinition。</p></blockquote><p>BeanDefinition保存了实例化bean需要的一切信息，包括属性，依赖等。以<code>ConcurrentHashMap&lt;String, BeanDefinition&gt;</code>保存在DefaultListableBeanFactory的beanDefinitionMap里。</p><p><img data-src="https://i.loli.net/2019/03/29/5c9dbcecdf9e1.png"></p><h2 id="prepareBeanFactory-beanFactory"><a href="#prepareBeanFactory-beanFactory" class="headerlink" title="prepareBeanFactory(beanFactory)"></a>prepareBeanFactory(beanFactory)</h2><blockquote><p>设置beanFactory的其余属性</p></blockquote><h2 id="postProcessBeanFactory-beanFactory"><a href="#postProcessBeanFactory-beanFactory" class="headerlink" title="postProcessBeanFactory(beanFactory)"></a>postProcessBeanFactory(beanFactory)</h2><blockquote><p>空实现，给子类一个机会，自定义beanFactory后置处理器</p></blockquote><p><code>BeanFactoryPostProcessor</code>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="invokeBeanFactoryPostProcessors-beanFactory"><a href="#invokeBeanFactoryPostProcessors-beanFactory" class="headerlink" title="invokeBeanFactoryPostProcessors(beanFactory)"></a>invokeBeanFactoryPostProcessors(beanFactory)</h2><blockquote><p>执行上一步中的beanFactory后置处理器的回调方法<code>void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)</code></p></blockquote><h2 id="registerBeanPostProcessors-beanFactory"><a href="#registerBeanPostProcessors-beanFactory" class="headerlink" title="registerBeanPostProcessors(beanFactory)"></a>registerBeanPostProcessors(beanFactory)</h2><blockquote><p>注册bean后置处理器，实现bean初始化前后的自定义逻辑</p></blockquote><p><code>BeanPostProcessor</code>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在bean实例化前调用</span></span><br><span class="line">    <span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">// 在bean实例化后调用</span></span><br><span class="line">    <span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="initMessageSource"><a href="#initMessageSource" class="headerlink" title="initMessageSource()"></a>initMessageSource()</h2><blockquote><p>注册国际化相关bean</p></blockquote><h2 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster()"></a>initApplicationEventMulticaster()</h2><blockquote><p>初始化Spring事件发布相关bean</p></blockquote><h2 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh()"></a>onRefresh()</h2><blockquote><p>空实现，给子类一个机会，初始化特殊bean</p></blockquote><h2 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners()"></a>registerListeners()</h2><blockquote><p>注册监听器</p></blockquote><h2 id="finishBeanFactoryInitialization-beanFactory"><a href="#finishBeanFactoryInitialization-beanFactory" class="headerlink" title="finishBeanFactoryInitialization(beanFactory)"></a>finishBeanFactoryInitialization(beanFactory)</h2><blockquote><p>实例化所有非懒加载的bean</p></blockquote><p>直到这里，才开始真正实例化bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 实例化bean的类型转换器</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">            beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">        beanFactory.setConversionService(</span><br><span class="line">                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 实例化属性占位符解析器</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">        beanFactory.addEmbeddedValueResolver(<span class="keyword">new</span> StringValueResolver() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> getEnvironment().resolvePlaceholders(strVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 实例化LoadTimeWeaverAware</span></span><br><span class="line">    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">        getBean(weaverAwareName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 停止使用临时ClassLoader进行类型匹配</span></span><br><span class="line">    beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 禁止再修改bean定义</span></span><br><span class="line">    beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 实例化所有非懒加载单例bean</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons()"></a>preInstantiateSingletons()</h3><ol><li>根据每一个bean定义，实例化bean</li><li>为每一个实现SmartInitializingSingleton的bean执行回调方法</li></ol><p>实例化bean部分的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">    <span class="comment">// 获取bean定义</span></span><br><span class="line">    RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    <span class="comment">// 只有不是abstract、单例且不是懒加载的bean才在这里实例化</span></span><br><span class="line">    <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">        <span class="comment">// 如果是FactoryBean</span></span><br><span class="line">        <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">            <span class="comment">// 先实例化实例对应的FactoryBean</span></span><br><span class="line">            <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">            <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                isEagerInit = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                        ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                <span class="comment">// 使用FactoryBean的getObject()方法返回真正的实例</span></span><br><span class="line">                getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            getBean(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getBean-String-name"><a href="#getBean-String-name" class="headerlink" title="getBean(String name)"></a>getBean(String name)</h4><p>该方法调用了一个doGetBean，doGetBean代码较长，而且有部分代码是为了解决并发场景下单例的生成，我们挑出重点的看：</p><ol><li>从父BeanFactory检查是否存在该bean的定义，如果存在，委托父BeanFactory来实例化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">    <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">    String nameToLookup = originalBeanName(name);</span><br><span class="line">    <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">        <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">        <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获得bean定义，如果存在依赖，先实例化每一个依赖bean，注意：不允许循环依赖</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line"><span class="comment">//如果存在依赖，先实例化每一个依赖bean</span></span><br><span class="line"><span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 实例化每一个依赖bean</span></span><br><span class="line">    <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">        <span class="comment">// 检查循环依赖</span></span><br><span class="line">        <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 实例化依赖bean</span></span><br><span class="line">        registerDependentBean(dep, beanName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getBean(dep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">&quot;&#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>实例化bean</li></ol><p>方法调用流程：</p><p>createBean &gt; doCreateBean &gt; populateBean</p><p>其中doCreateBean：</p><ol><li>从BeanDefinition生成BeanWrapper</li><li>将BeanWrapper和BeanDefinition.getPropertyValues() 传给populateBean，实例化bean</li></ol><h2 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh()"></a>finishRefresh()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化生命周期处理器</span></span><br><span class="line">    initLifecycleProcessor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刷新生命周期处理器状态 running = true</span></span><br><span class="line">    getLifecycleProcessor().onRefresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布上下文初始化完成事件ContextRefreshedEvent</span></span><br><span class="line">    publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果处于活动状态，将自己注册到LiveBeans</span></span><br><span class="line">    LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring IoC Container时序图</p><p><img data-src="https://i.loli.net/2019/03/29/5c9dd9c73cbe4.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;Person实例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS 单机部署指南</title>
    <link href="https://gcdd1993.github.io/p/56864/"/>
    <id>https://gcdd1993.github.io/p/56864/</id>
    <published>2019-03-22T07:39:17.000Z</published>
    <updated>2021-06-19T15:18:16.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>FastDFS是一个开源的分布式文件系统，<a href="https://www.oschina.net/p/fastdfs">官方介绍</a>有详细的介绍，不多赘述。本文主要是FastDFS的搭建及采坑指南。</p><span id="more"></span><h1 id="Step-By-Step-Guide"><a href="#Step-By-Step-Guide" class="headerlink" title="Step By Step Guide"></a>Step By Step Guide</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul><li>阿里云ECS Ubuntu 16.04</li></ul><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>按需安装，这里是针对新的ubuntu系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim</span><br></pre></td></tr></table></figure><h2 id="磁盘目录"><a href="#磁盘目录" class="headerlink" title="磁盘目录"></a>磁盘目录</h2><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>所有安装包</td><td>/usr/local/src</td></tr><tr><td>数据存储位置</td><td>/data/dfs/</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /data/dfs <span class="comment">#创建数据存储目录（对于阿里云ECS，最好建立在数据盘上，是用来存放文件的）</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src <span class="comment">#切换到安装目录准备下载安装包</span></span><br></pre></td></tr></table></figure><h2 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/happyfish100/libfastcommon/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ <span class="built_in">cd</span> libfastcommon-1.0.39/</span><br><span class="line">$ ./make.sh &amp;&amp; ./make.sh install <span class="comment">#编译安装</span></span><br></pre></td></tr></table></figure><h2 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../ <span class="comment">#返回上一级目录</span></span><br><span class="line">$ wget https://github.com/happyfish100/fastdfs/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br><span class="line">$ <span class="built_in">cd</span> fastdfs-master/</span><br><span class="line">$ ./make.sh &amp;&amp; ./make.sh install <span class="comment">#编译安装</span></span><br><span class="line"><span class="comment">#配置文件准备</span></span><br><span class="line">$ cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line">$ cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br><span class="line">$ cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf <span class="comment">#客户端文件，测试用</span></span><br><span class="line">$ cp /usr/<span class="built_in">local</span>/src/fastdfs-master/conf/http.conf /etc/fdfs/ <span class="comment">#供nginx访问使用</span></span><br><span class="line">$ cp /etc/nginx/mime.types /etc/fdfs/ <span class="comment">#供nginx访问使用</span></span><br></pre></td></tr></table></figure><h2 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h2><p>官网的文档，是针对没有安装过Nginx的机器，重新编译了一遍Nginx，把module直接编译进Nginx了。但是针对已经安装Nginx的服务器来说，显然是不好的。</p><p>根据<a href="https://www.nginx.com/blog/compiling-dynamic-modules-nginx-plus/">Nginx官方文档-编译第三方动态模块</a>，编译了<code>fastdfs-nginx-module</code>，以供已存在的Nginx使用。</p><p>我已经编译好了<code>fastdfs-nginx-module</code>，可以<a href="https://github.com/gcdd1993/fastDFS-ubuntu-guide/blob/master/ngx_http_fastdfs_module.so">直接下载</a>，并跳到<a href="#use-module">加载并使用模块</a>，如果想知其所以然，可以往下看。</p><h3 id="准备fastdfs-nginx-module源码包"><a href="#准备fastdfs-nginx-module源码包" class="headerlink" title="准备fastdfs-nginx-module源码包"></a>准备<code>fastdfs-nginx-module</code>源码包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../ <span class="comment">#返回上一级目录</span></span><br><span class="line">$ wget https://github.com/happyfish100/fastdfs-nginx-module/archive/master.zip</span><br><span class="line">$ unzip master.zip</span><br></pre></td></tr></table></figure><h3 id="获取对应版本的Nginx源码包"><a href="#获取对应版本的Nginx源码包" class="headerlink" title="获取对应版本的Nginx源码包"></a>获取对应版本的Nginx源码包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v <span class="comment"># 确认服务器的Nginx版本</span></span><br><span class="line">nginx version: nginx/1.14.2</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line">$ tar -xzvf nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译动态模块"><a href="#编译动态模块" class="headerlink" title="编译动态模块"></a>编译动态模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nginx-1.14.2/</span><br><span class="line">$ ./configure --with-compat --add-dynamic-module=/usr/<span class="built_in">local</span>/src/fastdfs-nginx-module-master/src</span><br><span class="line">$ make modules</span><br></pre></td></tr></table></figure><h3 id="将模块库（-so文件）复制到-etc-nginx-modules"><a href="#将模块库（-so文件）复制到-etc-nginx-modules" class="headerlink" title="将模块库（.so文件）复制到/etc/nginx/modules"></a>将模块库（.so文件）复制到/etc/nginx/modules</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ngx_http_fastdfs_module.so /etc/nginx/modules/</span><br></pre></td></tr></table></figure><h3 id="加载并使用模块"><a href="#加载并使用模块" class="headerlink" title="加载并使用模块"></a>加载并使用模块<a name="use-module"/></h3><p>Tips: 要将模块加载到Nginx,在nginx.conf文件开头添加<code>load_module</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/nginx.conf</span><br><span class="line"><span class="comment"># 添加如下命令</span></span><br><span class="line">load_module modules/ngx_http_fastdfs_module.so;</span><br><span class="line"><span class="comment"># 保存退出</span></span><br></pre></td></tr></table></figure><h3 id="添加FastDFS配置使模块生效"><a href="#添加FastDFS配置使模块生效" class="headerlink" title="添加FastDFS配置使模块生效"></a>添加FastDFS配置使模块生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/conf.d/fastdfs.conf</span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8888;    <span class="comment">## 该端口为storage.conf中的http.server_port相同</span></span><br><span class="line">    server_name &#123;your_domain&#125;;</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><p>这里只描述下单机环境的部署方式，集群在官方文档有，没有实际使用过。</p><h3 id="tracker配置"><a href="#tracker配置" class="headerlink" title="tracker配置"></a>tracker配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="comment"># 建议修改以下内容</span></span><br><span class="line">bind_addr=&#123;你的内网IP&#125;</span><br><span class="line">base_path=/data/dfs <span class="comment"># 建议修改为数据盘位置</span></span><br><span class="line"><span class="comment"># 可选修改</span></span><br><span class="line">port=22122  <span class="comment"># tracker服务器端口</span></span><br></pre></td></tr></table></figure><h3 id="storage配置"><a href="#storage配置" class="headerlink" title="storage配置"></a>storage配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="comment"># 建议修改</span></span><br><span class="line">base_path=/data/dfs  <span class="comment"># 数据和日志文件存储根目录（建议修改为数据盘位置）</span></span><br><span class="line">store_path0=/data/dfs  <span class="comment"># 第一个存储目录（建议修改为数据盘位置）</span></span><br><span class="line">tracker_server=&#123;tracker.bind_addr&#125;:&#123;tracker.port&#125;  <span class="comment"># tracker服务器IP和端口</span></span><br><span class="line">http.server_port=8888  <span class="comment"># http访问文件的端口（默认8888,看情况修改,和nginx中保持一致）</span></span><br><span class="line"><span class="comment"># 可选修改</span></span><br><span class="line">port=23000  <span class="comment"># storage服务端口（默认23000,一般不修改）</span></span><br></pre></td></tr></table></figure><h3 id="client测试"><a href="#client测试" class="headerlink" title="client测试"></a>client测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fdfs/client.conf</span><br><span class="line"><span class="comment"># 建议修改</span></span><br><span class="line">base_path=/data/dfs</span><br><span class="line">tracker_server=&#123;tracker.bind_addr&#125;:&#123;tracker.port&#125;  <span class="comment"># tracker服务器IP和端口</span></span><br><span class="line"><span class="comment"># 保存后测试</span></span><br><span class="line">$ fdfs_upload_file /etc/fdfs/client.conf /usr/<span class="built_in">local</span>/src/nginx-1.14.2.tar.gz</span><br><span class="line">group1/M00/00/00/CgoKvlyUmi-AMVKDAA9-WL9wzEw.tar.gz <span class="comment"># 下载时通过该ID下载</span></span><br><span class="line"><span class="comment"># 返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="配置nginx访问"><a href="#配置nginx访问" class="headerlink" title="配置nginx访问"></a>配置nginx访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="comment"># 建议修改</span></span><br><span class="line">tracker_server=&#123;tracker.bind_addr&#125;:&#123;tracker.port&#125;  <span class="comment"># tracker服务器IP和端口</span></span><br><span class="line">url_have_group_name=<span class="literal">true</span></span><br><span class="line">store_path0=/data/dfs</span><br><span class="line"><span class="comment"># 修改完保存</span></span><br><span class="line">$ nginx -s reload</span><br><span class="line">ngx_http_fastdfs_set pid=8364 <span class="comment"># 看见这条消息说明nginx模块启动成功了</span></span><br><span class="line">$ lsof -i:8888 <span class="comment"># 查看Nginx下载端口是否正常启动</span></span><br><span class="line">nginx   31061  root   10u  IPv4 20389985      0t0  TCP *:8888 (LISTEN)</span><br></pre></td></tr></table></figure><h3 id="测试下载"><a href="#测试下载" class="headerlink" title="测试下载"></a>测试下载</h3><p>在浏览器输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&#123;IP&#125;:8888/group1/M00/00/00/CgoKvlyUmi-AMVKDAA9-WL9wzEw.tar.gz?filename=nginx-1.14.2.tar.gz //刚才上传返回的ID</span><br></pre></td></tr></table></figure><p>弹出下载文件框，说明部署成功！</p><p><img data-src="https://i.loli.net/2019/03/22/5c94a6b526a52.png"></p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span>|<span class="built_in">disable</span></span><br></pre></td></tr></table></figure><h3 id="tracker"><a href="#tracker" class="headerlink" title="tracker"></a>tracker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/fdfs_trackerd start <span class="comment"># 启动tracker服务</span></span><br><span class="line">$ /etc/init.d/fdfs_trackerd restart <span class="comment"># 重启动tracker服务</span></span><br><span class="line">$ /etc/init.d/fdfs_trackerd stop <span class="comment"># 停止tracker服务</span></span><br><span class="line">$ update-rc.d fdfs_trackerd <span class="built_in">enable</span> <span class="comment"># 自启动tracker服务</span></span><br></pre></td></tr></table></figure><h3 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/fdfs_storaged start <span class="comment"># 启动storage服务</span></span><br><span class="line">$ /etc/init.d/fdfs_storaged restart <span class="comment"># 重动storage服务</span></span><br><span class="line">$ /etc/init.d/fdfs_storaged stop <span class="comment"># 停止动storage服务</span></span><br><span class="line">$ update-rc.d fdfs_storaged <span class="built_in">enable</span> <span class="comment"># 自启动storage服务</span></span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service nginx start <span class="comment"># 启动nginx</span></span><br><span class="line">$ nginx -s reload <span class="comment"># 重启nginx</span></span><br><span class="line">$ nginx -s stop <span class="comment"># 停止nginx</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="执行nginx-s-reload-后，访问502"><a href="#执行nginx-s-reload-后，访问502" class="headerlink" title="执行nginx -s reload 后，访问502"></a>执行nginx -s reload 后，访问502</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nginx日志</span></span><br><span class="line">$ vim /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure><p>如果发现错误日志：<code>include file &quot;http.conf&quot; not exists, line: &quot;#include http.conf&quot;</code>，fastdfs nginx模块缺少配置文件，执行以下命令补全配置文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/src/fastdfs-master/conf/http.conf /etc/fdfs/ <span class="comment">#供nginx访问使用</span></span><br><span class="line">$ cp /etc/nginx/mime.types /etc/fdfs/ <span class="comment">#供nginx访问使用</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;FastDFS是一个开源的分布式文件系统，&lt;a href=&quot;https://www.oschina.net/p/fastdfs&quot;&gt;官方介绍&lt;/a&gt;有详细的介绍，不多赘述。本文主要是FastDFS的搭建及采坑指南。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="FastDFS" scheme="https://gcdd1993.github.io/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Framework-官方文档阅读（一）Spring IoC Container</title>
    <link href="https://gcdd1993.github.io/p/433/"/>
    <id>https://gcdd1993.github.io/p/433/</id>
    <published>2019-03-20T10:53:06.000Z</published>
    <updated>2021-06-19T15:18:16.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通读Spring IoC容器官方文档，对IoC容器有一个大致的了解。</p><span id="more"></span><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>JDK1.8</li><li>Spring Framework Version ：4.3.18.RELEASE</li></ul><h1 id="容器概述"><a href="#容器概述" class="headerlink" title="容器概述"></a>容器概述</h1><blockquote><p>接口<code>org.springframework.context.ApplicationContext</code>代表Spring IoC容器，负责实例化，配置和组装bean。<br>在独立应用程序中，通常会创建一个<code>ClassPathXmlApplicationContext</code>或者 <code>FileSystemXmlApplicationContext</code>的实例。</p></blockquote><!-- more --><p>Spring工作原理的高级视图<br><img data-src="https://i.loli.net/2019/03/21/5c9278544811e.png"></p><p>1.配置元数据<br>创建SimpleBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Spring Bean!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;base.SimpleBeanFactoryBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.实例化容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;config.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.使用容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检索Spring容器中的bean</span></span><br><span class="line">SimpleBean simpleBean = context.getBean(SimpleBean.class);</span><br><span class="line"><span class="comment">// 使用bean</span></span><br><span class="line">simpleBean.send();</span><br></pre></td></tr></table></figure><p>还有更灵活的方式来从配置文件获取bean，使用<code>GenericApplicationContext</code>与<code>BeanDefinitionReader</code>结合，直接读取bean定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line"><span class="keyword">new</span> XmlBeanDefinitionReader(context).loadBeanDefinitions(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">context.refresh();</span><br><span class="line">SimpleBean simpleBean = (SimpleBean) context.getBean(<span class="string">&quot;simple&quot;</span>);</span><br><span class="line">simpleBean.send();</span><br></pre></td></tr></table></figure><h1 id="Bean概述"><a href="#Bean概述" class="headerlink" title="Bean概述"></a>Bean概述</h1><blockquote><p>Spring IoC容器管理一个或多个bean。这些bean是使用您提供给容器的配置元数据创建的，例如，以XML <code>&lt;bean/&gt;</code>定义的形式 。</p></blockquote><p>在容器本身内，这些bean定义表示为<code>BeanDefinition</code>对象。</p><p>除了创建配置好的bean之外，<code>ApplicationContext</code>还允许用户注册在容器外部创建的现有对象。通过<code>getBeanFactory()</code>获得<code>DefaultListableBeanFactory</code>，然后使用<code>registerSingleton()</code>或者<code>registerBeanDefinition()</code>来注册bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DefaultListableBeanFactory beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1L</span>);</span><br><span class="line">user.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">beanFactory.registerSingleton(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">User bean = (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(bean);</span><br></pre></td></tr></table></figure><p>或者是以下做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) applicationContext.getBeanFactory();</span><br><span class="line">BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(User.class);</span><br><span class="line">builder.addPropertyValue(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">builder.addPropertyValue(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();</span><br><span class="line">beanFactory.registerBeanDefinition(<span class="string">&quot;user&quot;</span>, beanDefinition);</span><br><span class="line"></span><br><span class="line">User bean = (User) applicationContext.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">System.out.println(bean);</span><br></pre></td></tr></table></figure><h2 id="命名bean"><a href="#命名bean" class="headerlink" title="命名bean"></a>命名bean</h2><p>每个bean都有一个或多个标识符。这些标识符在托管bean的容器中必须是唯一的。bean通常只有一个标识符，但如果它需要多个标识符，则额外的标识符可以被视为别名。</p><p>在基于XML的配置元数据中，使用id和/或name属性指定bean标识符。</p><h2 id="实例化bean"><a href="#实例化bean" class="headerlink" title="实例化bean"></a>实例化bean</h2><p>1.构造函数实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;anotherExample&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBeanTwo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2.静态工厂方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;examples.ClientService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">&quot;createInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实例工厂方法实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the factory bean, which contains a method called createInstance() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serviceLocator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.DefaultServiceLocator&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the bean to be created via the factory bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">&quot;serviceLocator&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">&quot;createClientServiceInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个工厂类也可以包含多个工厂方法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serviceLocator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.DefaultServiceLocator&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">&quot;serviceLocator&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">&quot;createClientServiceInstance&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">&quot;serviceLocator&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">&quot;createAccountServiceInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><blockquote><p>基于构造函数的 DI由容器调用具有多个参数的构造函数来完成，每个参数表示一个依赖项。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SimpleMovieLister依赖于MovieFinder</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个构造函数，以便Spring容器可以注入一个MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleMovieLister</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数参数解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(Bar bar, Baz baz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Foo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;bar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;baz&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Bar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;baz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Baz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显式指定构造函数参数的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;exampleBean&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg type=<span class="string">&quot;int&quot;</span> value=<span class="string">&quot;7500000&quot;</span>/&gt;</span><br><span class="line">    &lt;constructor-arg type=<span class="string">&quot;java.lang.String&quot;</span> value=<span class="string">&quot;42&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>使用index属性显式指定构造函数参数的索引：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者指定构造函数参数名称：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;years&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ultimateAnswer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;42&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h2><blockquote><p>基于setter的 DI是在调用无参数构造函数或无参数static工厂方法来实例化bean之后，通过容器调用bean上的setter方法来完成的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SimpleMovieLister依赖于MovieFinder</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个setter方法，以便Spring容器可以注入一个MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>ApplicationContext</code>的依赖注入支持构造器注入和setter注入两种方式。在通过构造函数方法注入了一些依赖项之后，它还支持基于setter的依赖注入。可以用<code>BeanDefinition</code>与<code>PropertyEditor</code>实例结合使用的方式来配置依赖项。 不过，我们一般不直接使用<code>BeanDefinition</code>与<code>PropertyEditor</code>，而是用XML 定义bean或者是注解方式（<code>@Component</code>， <code>@Controller</code>等等），或者是直接编写@Configuration类。然后，这些类在内部转换为实例<code>BeanDefinition</code>并用于加载整个Spring IoC容器实例。</p><h2 id="解决循环依赖"><a href="#解决循环依赖" class="headerlink" title="解决循环依赖"></a>解决循环依赖</h2><p>如果主要使用构造函数注入，则可能出现无法解析的循环依赖关系场景。<br>例如：类A通过构造函数注入需要类B的实例，而类B通过构造函数注入类A的实例。如果将A类和B类的bean配置为相互注入，则Spring IoC容器会在运行时检测到此循环引用，并抛出<code>BeanCurrentlyInCreationException</code>异常。<br>一种可行的解决方案是仅使用setter注入。<br>与典型情况（没有循环依赖）不同，bean A和bean B之间的循环依赖强制其中一个bean在完全初始化之前被注入另一个bean（一个经典的鸡/蛋场景）。</p><h2 id="使用-depends-on"><a href="#使用-depends-on" class="headerlink" title="使用 depends-on"></a>使用 depends-on</h2><p><code>depends-on</code>可以在初始化bean之前，显式地强制初始化一个或多个bean。下面的例子，在初始化<code>beanOne</code>之前，将强制初始化<code>manager</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ExampleBean&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;manager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;manager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ManagerBean&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="懒加载的bean"><a href="#懒加载的bean" class="headerlink" title="懒加载的bean"></a>懒加载的bean</h2><p>默认情况下，<code>ApplicationContext</code>会立即配置并初始化所有单例bean，但是我们可以使用<code>lazy-init=&quot;true&quot;</code>将其设置为按需加载。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.foo.ExpensiveToCreateBean&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;not.lazy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.foo.AnotherBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注意：懒加载不要使用在数据库连接池上，因为无法立即获知数据库连接状态，将导致运行时创建连接池失败，不可预知的后果。</p><h2 id="自动装配协作者"><a href="#自动装配协作者" class="headerlink" title="自动装配协作者"></a>自动装配协作者</h2><p>Spring容器可以自动连接协作bean之间的关系。您可以通过检查<code>ApplicationContext</code>的内容，允许Spring自动为您的bean解析协作者（其他bean）。</p><p>自动装配模式</p><ul><li>no：无自动装配，必须使用ref来定义Bean引用。</li><li>byName：按属性名称自动装配。</li><li>byType：按属性类型自动装配，如果存在多个同类型Bean，则抛出致命异常。</li><li>constructor：类似于byType，如果容器中没有构造函数参数类型的一个bean，则抛出致命异常。</li></ul><h1 id="Bean-作用域"><a href="#Bean-作用域" class="headerlink" title="Bean 作用域"></a>Bean 作用域</h1><h2 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h2><blockquote><p>Spring IoC容器只创建该bean定义的对象的一个实例。此单个实例存储在此类单例bean的缓存中，并且该Bean的所有后续请求和引用都将返回缓存对象。</p></blockquote><p><img data-src="https://i.loli.net/2019/03/21/5c9278545f51f.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.foo.DefaultAccountService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.foo.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><blockquote><p>和单例对立，通常，对所有有状态bean使用原型范围，对无状态bean使用单例范围。</p></blockquote><p><img data-src="https://i.loli.net/2019/03/21/5c92785478899.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.foo.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Request-session-global-session-application-and-WebSocket"><a href="#Request-session-global-session-application-and-WebSocket" class="headerlink" title="Request, session, global session, application, and WebSocket"></a>Request, session, global session, application, and WebSocket</h2><blockquote><p>在web程序中使用，对应于HTTP请求作用域</p></blockquote><h1 id="自定义bean的性质"><a href="#自定义bean的性质" class="headerlink" title="自定义bean的性质"></a>自定义bean的性质</h1><h2 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h2><h2 id="初始化回调"><a href="#初始化回调" class="headerlink" title="初始化回调"></a>初始化回调</h2><p>实现<code>org.springframework.beans.factory.InitializingBean</code>接口，可以为bean设置初始化方法，该接口定义了一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>官方不建议使用该接口，因为会增加与Spring的耦合度。可以使用<code>@PostConstruct</code>或指定bean的初始化方法。</p><ul><li>使用xml配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleInitBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用Java @Bean注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(initMethod = &quot;init&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="销毁回调"><a href="#销毁回调" class="headerlink" title="销毁回调"></a>销毁回调</h2><p>实现<code>org.springframework.beans.factory.DisposableBean</code>可以为bean设置销毁回调方法，该接口定义了一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p>同样的，不建议实现该接口，可以使用<code>@PreDestroy</code>或指定bean的初始化方法。</p><ul><li>使用xml配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleInitBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;cleanup&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用Java @Bean注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(destroyMethod = &quot;cleanup&quot;)</span></span><br></pre></td></tr></table></figure><p>从Spring 2.5开始，您有三个控制bean生命周期行为的选项：</p><ul><li> <code>InitializingBean</code>和 <code>DisposableBean</code>回调接口</li><li> init()和destroy()方法</li><li> <code>@PostConstruct</code>和<code>@PreDestroy</code>注解</li></ul><p>如果为一个bean同时配置了上述方法，则执行方法顺序为：</p><ul><li><code>@PostConstruct</code>定义的方法</li><li><code>InitializingBean</code>回调接口定义的<code>afterPropertiesSet()</code></li><li>自定义配置的<code>init()</code>方法</li></ul><p>销毁：</p><ul><li><code>@PreDestroy</code>定义的方法</li><li><code>DisposableBean</code>回调接口 定义的<code>destroy()</code></li><li>自定义配置的<code>destroy()</code>方法</li></ul><h1 id="ApplicationContextAware和BeanNameAware"><a href="#ApplicationContextAware和BeanNameAware" class="headerlink" title="ApplicationContextAware和BeanNameAware"></a><code>ApplicationContextAware</code>和<code>BeanNameAware</code></h1><ul><li><code>ApplicationContextAware</code>：实现该接口，将注入<code>ApplicationContext</code>实例的引用</li><li><code>BeanNameAware</code>：实现该接口，将注入<code>BeanName</code></li></ul><p>除了<code>ApplicationContextAware</code>和<code>BeanNameAware</code>，Spring还提供了一系列Aware接口，这些接口将为实现类注入对应的实例。</p><ul><li>ApplicationContextAware：声明 ApplicationContext</li><li>ApplicationEventPublisherAware：ApplicationContext的事件发布者</li><li>BeanClassLoaderAware：用于加载bean类的类加载器。</li><li>BeanFactoryAware：声明 BeanFactory</li><li>BeanNameAware：声明bean的名称</li><li>BootstrapContextAware</li><li>LoadTimeWeaverAware</li><li>MessageSourceAware</li><li>NotificationPublisherAware：Spring JMX通知发布者</li><li>PortletConfigAware：当前PortletConfig容器</li><li>PortletContextAware：当前PortletContext容器</li><li>ResourceLoaderAware：配置的加载程序，用于对资源进行低级访问</li><li>ServletConfigAware：当前ServletConfig容器</li><li>ServletContextAware：当前ServletContext容器</li></ul><h1 id="Bean的继承"><a href="#Bean的继承" class="headerlink" title="Bean的继承"></a>Bean的继承</h1><p>在xml配置文件里，我们可以定义bean的继承体系，使用<code>parent</code>属性定义父类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;inheritedTestBean&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.TestBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;parent&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;inheritsWithDifferentClass&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.DerivedTestBean&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parent</span>=<span class="string">&quot;inheritedTestBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initialize&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;override&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the age property value of 1 will be inherited from parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在源码里，子类是通过<code>ChildBeanDefinition</code>来定义的。</p><h1 id="容器扩展点"><a href="#容器扩展点" class="headerlink" title="容器扩展点"></a>容器扩展点</h1><p>一般来说，我们不需要去继承<code>ApplicationContext</code>实现类，不过Spring预留了一些接口，让我们可以扩展Spring IoC容器。</p><h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在每个bean初始化之前调用</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">//在每个bean初始化完毕后调用</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以定义多个`BeanPostProcessor`，然后实现`Ordered`接口并修改属性order来控制`BeanPostProcessor`的执行顺序。</span><br><span class="line"></span><br><span class="line">注意：`ConfigurableBeanFactory`提供</span><br><span class="line"></span><br><span class="line">​```<span class="function">java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addBeanPostProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span></span>;</span><br></pre></td></tr></table></figure><p>来手动注册<code>BeanPostProcessor</code>，这些<code>BeanPostProcessor</code>不需要遵循<code>Orderd</code>排序规则，总是在自动注入的<code>BeanPostProcessor</code>之前执行。</p><p>一个<code>BeanPostProcessor</code>的实现例子<code>RequiredAnnotationBeanPostProcessor</code></p><h2 id="使用BeanFactoryPostProcessor自定义配置元数据"><a href="#使用BeanFactoryPostProcessor自定义配置元数据" class="headerlink" title="使用BeanFactoryPostProcessor自定义配置元数据"></a>使用<code>BeanFactoryPostProcessor</code>自定义配置元数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于<code>BeanPostProcessor</code>，不同的是，<code>BeanFactoryPostProcessor</code>操作配置元数据。也就是说，Spring容器允许<code>BeanFactoryPostProcessor</code>读取配置并更改。</p><p>这些<code>BeanPostProcessor</code>将在每个bean初始化时自动执行，以便将更改应用于定义容器的配置元数据。Spring包含许多预定义的<code>BeanPostProcessor</code>,例如<code>PropertyOverrideConfigurer</code>和<code>PropertyPlaceholderConfigurer</code>。</p><h2 id="使用FactoryBean自定义实例化逻辑"><a href="#使用FactoryBean自定义实例化逻辑" class="headerlink" title="使用FactoryBean自定义实例化逻辑"></a>使用<code>FactoryBean</code>自定义实例化逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义bean的初始化逻辑</span></span><br><span class="line"><span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">Class&lt;?&gt; getObjectType();</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置实现<code>FactoryBean&lt;T&gt;</code>的bean是，返回的是<code>getObject()</code>生成的bean，如果要返回 FactoryBean实例本身，应该使用<code>getBean(&quot;&amp;myBean&quot;)</code></p><h1 id="基于注解的容器配置"><a href="#基于注解的容器配置" class="headerlink" title="基于注解的容器配置"></a>基于注解的容器配置</h1><ul><li>@Required</li><li>@Autowired</li><li>@Resource</li><li>@Qualifier</li><li>@PostConstruct and @PreDestroy</li></ul><h2 id="类路径扫描和托管组件"><a href="#类路径扫描和托管组件" class="headerlink" title="类路径扫描和托管组件"></a>类路径扫描和托管组件</h2><ul><li>@Component,@Controller,@Repository,@Service</li><li>@Scope,@SessionScope</li><li>@ComponentScan</li></ul><h2 id="JSR-330标准注解和Spring注解对照"><a href="#JSR-330标准注解和Spring注解对照" class="headerlink" title="JSR 330标准注解和Spring注解对照"></a>JSR 330标准注解和Spring注解对照</h2><table><thead><tr><th>Spring</th><th>javax.inject.*</th></tr></thead><tbody><tr><td>@Autowired</td><td>@Inject</td></tr><tr><td>@Component</td><td>@Named / @ManagedBean</td></tr><tr><td>@Scope(“singleton”)</td><td>@Singleton</td></tr><tr><td>@Qualifier</td><td>@Qualifier / @Named</td></tr><tr><td>@Value</td><td>-</td></tr><tr><td>@Required</td><td>-</td></tr><tr><td>@Lazy</td><td>-</td></tr><tr><td>ObjectFactory</td><td>Provider</td></tr></tbody></table><h1 id="Environment-抽象"><a href="#Environment-抽象" class="headerlink" title="Environment 抽象"></a>Environment 抽象</h1><p>主要包含两个方面：profiles（多环境） and properties（配置）.</p><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><ol><li>代码方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">ctx.getEnvironment().setActiveProfiles(<span class="string">&quot;development&quot;</span>);</span><br><span class="line">ctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);</span><br><span class="line">ctx.refresh();</span><br></pre></td></tr></table></figure><ol start="2"><li>配置方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active</span><br></pre></td></tr></table></figure><h2 id="配置抽象"><a href="#配置抽象" class="headerlink" title="配置抽象"></a>配置抽象</h2><p>代码演示下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">Environment env = ctx.getEnvironment();</span><br><span class="line"><span class="comment">// 是否包含foo的配置</span></span><br><span class="line"><span class="keyword">boolean</span> containsFoo = env.containsProperty(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Does my environment contain the &#x27;foo&#x27; property? &quot;</span> + containsFoo);</span><br><span class="line"><span class="comment">// 向环境中添加配置</span></span><br><span class="line">MutablePropertySources sources = ctx.getEnvironment().getPropertySources();</span><br><span class="line">sources.addFirst(<span class="keyword">new</span> MyPropertySource());</span><br></pre></td></tr></table></figure><p>使用<code>@PropertySource</code>添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/com/myco/app.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestBean <span class="title">testBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestBean testBean = <span class="keyword">new</span> TestBean();</span><br><span class="line">        testBean.setName(env.getProperty(<span class="string">&quot;testbean.name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> testBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BeanFactory还是ApplicationContext？"><a href="#BeanFactory还是ApplicationContext？" class="headerlink" title="BeanFactory还是ApplicationContext？"></a>BeanFactory还是ApplicationContext？</h1><p>尽量使用<code>ApplicationContext</code>，因为<code>ApplicationContext</code>包含<code>BeanFactory</code>的所有功能：</p><table><thead><tr><th>功能</th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>bean初始化/编辑</td><td>支持</td><td>支持</td></tr><tr><td>自动注册<code>BeanPostProcessor</code></td><td>不支持</td><td>支持</td></tr><tr><td>自动注册<code>BeanFactoryPostProcessor</code></td><td>不支持</td><td>支持</td></tr><tr><td>方便的MessageSource访问（适用于i18n）</td><td>不支持</td><td>支持</td></tr><tr><td>发布<code>ApplicationEvent</code></td><td>不支持</td><td>支持</td></tr></tbody></table><p>要使用BeanFactory实现显式注册bean后置处理器，您需要编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line"><span class="comment">// populate the factory with bean definitions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now register any needed BeanPostProcessor instances</span></span><br><span class="line">MyBeanPostProcessor postProcessor = <span class="keyword">new</span> MyBeanPostProcessor();</span><br><span class="line">factory.addBeanPostProcessor(postProcessor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now start using the factory</span></span><br></pre></td></tr></table></figure><p>要使用<code>BeanFactory</code>实现时显式注册<code>BeanFactoryPostProcessor</code>，您必须编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">XmlBeanDefinitionReader reader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</span><br><span class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> FileSystemResource(<span class="string">&quot;beans.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bring in some property values from a Properties file</span></span><br><span class="line">PropertyPlaceholderConfigurer cfg = <span class="keyword">new</span> PropertyPlaceholderConfigurer();</span><br><span class="line">cfg.setLocation(<span class="keyword">new</span> FileSystemResource(<span class="string">&quot;jdbc.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// now actually do the replacement</span></span><br><span class="line">cfg.postProcessBeanFactory(factory);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通读Spring IoC容器官方文档，对IoC容器有一个大致的了解。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Starter 开发指南</title>
    <link href="https://gcdd1993.github.io/p/20136/"/>
    <id>https://gcdd1993.github.io/p/20136/</id>
    <published>2019-03-18T09:16:07.000Z</published>
    <updated>2021-06-19T15:18:16.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-Starter是什么？"><a href="#Spring-Boot-Starter是什么？" class="headerlink" title="Spring Boot Starter是什么？"></a>Spring Boot Starter是什么？</h1><p>依赖管理是任何复杂项目的关键部分。以手动的方式来实现依赖管理不太现实，你得花更多时间，同时你在项目的其他重要方面能付出的时间就会变得越少。</p><p>Spring Boot starter 就是为了解决这个问题而诞生的。Starter POM 是一组方便的依赖描述符，您可以将其包含在应用程序中。您可以获得所需的所有 Spring 和相关技术的一站式服务，无需通过示例代码搜索和复制粘贴依赖。</p><span id="more"></span><h1 id="揭开Spring-Boot自动装配的神秘面纱"><a href="#揭开Spring-Boot自动装配的神秘面纱" class="headerlink" title="揭开Spring Boot自动装配的神秘面纱"></a>揭开Spring Boot自动装配的神秘面纱</h1><h2 id="Auto-Configuration-类"><a href="#Auto-Configuration-类" class="headerlink" title="Auto Configuration 类"></a>Auto Configuration 类</h2><p>当Spring Boot启动时，它会在类路径中查找名为<code>spring.factories</code>的文件。该文件位于<code>META-INF</code>目录中。让我们看一下<code>spring-boot-autoconfigure</code>项目中这个文件的片段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</span><br></pre></td></tr></table></figure><p>此文件定义了一些Spring Boot将尝试运行的自动装配类。例如以上的代码片段，Spring Boot将尝试运行RabbitMQ，Cassandra，MongoDB和Hibernate的所有配置类。这些类是否实际运行将取决于类路径上是否存在依赖类。例如，如果在类路径中找到<code>MongoDB</code>的类，则将运行<code>MongoAutoConfiguration</code>，并初始化所有与mongo相关的bean。此条件初始化由<code>@ConditionalOnClass</code>注释启用。让我们看一下<code>MongoAutoConfiguration</code>类的代码片段，看看它的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(MongoClient.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MongoProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(type = &quot;org.springframework.data.mongodb.MongoDbFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// configuration code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在<code>MongoClient</code>类，将运行该自动装配类初始化<code>MongoClient</code>相关bean。</p><h2 id="在application-properties自定义配置"><a href="#在application-properties自定义配置" class="headerlink" title="在application.properties自定义配置"></a>在<code>application.properties</code>自定义配置</h2><p>Spring Boot使用一些预先配置的默认值初始化bean。要覆盖这些默认值，我们通常会在<code>application.properties</code>文件中使用某个特定名称声明它们。Spring Boot容器会自动获取这些属性。<br>在<code>MongoAutoConfiguration</code>的代码片段中，<code>@EnableConfigurationProperties(MongoProperties.class)</code>表示，使用<code>MongoProperties</code>类来声明自定义属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.data.mongodb&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoProperties</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// other fields with standard getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ConfigurationProperties(prefix = &quot;spring.data.mongodb&quot;)</code>定义了配置前缀，我们可以在<code>application.properties</code>这样来使用它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.host = localhost</span><br></pre></td></tr></table></figure><p>这样，初始化的时候，<code>localhost</code>将被注入到<code>host</code>属性中</p><h1 id="自定义Spring-Boot-Starter"><a href="#自定义Spring-Boot-Starter" class="headerlink" title="自定义Spring Boot Starter"></a>自定义<code>Spring Boot Starter</code></h1><p>Spring Boot自动装配虽然神奇，但是编写起来却异常简单，我们只需要按部就班的执行以下两个流程：</p><ol><li>编写属性容器<code>*Properties</code>，并编写对应的<code>*AutoConfiguration</code>自动装配类</li><li>一个pom文件，用于定义引入库和自动装配类的依赖项</li></ol><h2 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h2><h3 id="用于-Properties的注解"><a href="#用于-Properties的注解" class="headerlink" title="用于*Properties的注解"></a>用于<code>*Properties</code>的注解</h3><ul><li><code>@ConfigurationProperties(prefix = &quot;spring.data.mongodb&quot;)</code> ：用于指定配置前缀</li></ul><h3 id="用于-AutoConfiguration的注解"><a href="#用于-AutoConfiguration的注解" class="headerlink" title="用于*AutoConfiguration的注解"></a>用于<code>*AutoConfiguration</code>的注解</h3><ul><li>@Configuration：标记为配置类，由Spring容器初始化并接管</li><li>@EnableConfigurationProperties：注入配置属性容器</li><li>@ConditionalOnBean：条件装配</li></ul><p>重点说下条件装配，以<code>@ConditionalOnBean</code>为例，当Spring容器中存在指定Bean的时候装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnBeanCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnBean&#123;</span><br><span class="line">    <span class="comment">//properties</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Conditional(OnBeanCondition.class)</code>指定了实现条件装配的逻辑代码</p><p><code>OnBeanCondition</code>声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnBeanCondition</span> <span class="keyword">extends</span> <span class="title">SpringBootCondition</span> <span class="keyword">implements</span> <span class="title">ConfigurationCondition</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>所以，我们自己也可以继承<code>SpringBootCondition</code>并实现<code>ConfigurationCondition</code>来自定义条件装配注解。</p><p>比较常用的几个条件装配注解：</p><ul><li>@ConditionalOnBean：当Spring容器中存在指定Bean时装配</li><li>@ConditionalOnClass：当存在指定Class时装配</li><li>@ConditionalOnMissingBean：当Spring容器中不存在指定Bean时装配</li><li>@ConditionalOnMissingClass：当不存在指定Class时装配</li></ul><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><blockquote><p>我们将自动配置模块称为<code>greeter-spring-boot-autoconfigure</code>。该模块将有两个主要类，即<code>GreeterPropertie</code>s，它将通过<code>application.properties</code>文件和<code>GreeterAutoConfiguartion</code>设置自定义属性，并为greeter库创建bean。</p></blockquote><p>准备，创建假想的一个第三方工程：Greet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GreetingConfig greetingConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greeter</span><span class="params">(GreetingConfig greetingConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.greetingConfig = greetingConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greet</span><span class="params">(LocalDateTime localDateTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String name = greetingConfig.getProperty(USER_NAME);</span><br><span class="line">        <span class="keyword">int</span> hourOfDay = localDateTime.getHour();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hourOfDay &gt;= <span class="number">5</span> &amp;&amp; hourOfDay &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;Hello %s, %s&quot;</span>, name, greetingConfig.get(MORNING_MESSAGE));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hourOfDay &gt;= <span class="number">12</span> &amp;&amp; hourOfDay &lt; <span class="number">17</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;Hello %s, %s&quot;</span>, name, greetingConfig.get(AFTERNOON_MESSAGE));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hourOfDay &gt;= <span class="number">17</span> &amp;&amp; hourOfDay &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;Hello %s, %s&quot;</span>, name, greetingConfig.get(EVENING_MESSAGE));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;Hello %s, %s&quot;</span>, name, greetingConfig.get(NIGHT_MESSAGE));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> greet(LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterConfigParams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">&quot;user.name&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MORNING_MESSAGE = <span class="string">&quot;morning.message&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTERNOON_MESSAGE = <span class="string">&quot;afternoon.message&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENING_MESSAGE = <span class="string">&quot;evening.message&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NIGHT_MESSAGE = <span class="string">&quot;night.message&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingConfig</span> <span class="keyword">extends</span> <span class="title">Properties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5662570853707247891L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Properties和AutoConfiguration：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;gcdd1993.greeter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String morningMessage;</span><br><span class="line">    <span class="keyword">private</span> String afternoonMessage;</span><br><span class="line">    <span class="keyword">private</span> String eveningMessage;</span><br><span class="line">    <span class="keyword">private</span> String nightMessage;</span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(Greeter.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(GreeterProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GreeterProperties greeterProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GreetingConfig <span class="title">greeterConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String userName = greeterProperties.getUserName() == <span class="keyword">null</span></span><br><span class="line">                ? System.getProperty(<span class="string">&quot;user.name&quot;</span>)</span><br><span class="line">                : greeterProperties.getUserName();</span><br><span class="line">        GreetingConfig greetingConfig = <span class="keyword">new</span> GreetingConfig();</span><br><span class="line">        greetingConfig.put(USER_NAME, userName);</span><br><span class="line">        <span class="keyword">if</span> (greeterProperties.getMorningMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            greetingConfig.put(MORNING_MESSAGE, greeterProperties.getMorningMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (greeterProperties.getAfternoonMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            greetingConfig.put(AFTERNOON_MESSAGE, greeterProperties.getAfternoonMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (greeterProperties.getEveningMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            greetingConfig.put(EVENING_MESSAGE, greeterProperties.getEveningMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (greeterProperties.getNightMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            greetingConfig.put(NIGHT_MESSAGE, greeterProperties.getNightMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> greetingConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Greeter <span class="title">greeter</span><span class="params">(GreetingConfig greetingConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Greeter(greetingConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>src/main/resources/META-INF</code>目录下创建<code>spring.factories</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.gcdd.autoconfigure.GreeterAutoConfiguration</span><br></pre></td></tr></table></figure><p>测试一下：</p><ol><li>创建配置文件<code>application.properties</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcdd1993.greeter.userName=gcdd1993</span><br><span class="line">gcdd1993.greeter.eveningMessage=good evening</span><br></pre></td></tr></table></figure><ol start="2"><li>使用Greeter bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreeterSampleApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Greeter greeter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GreeterSampleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String message = greeter.greet();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行main方法，将会输出一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello gcdd1993, good evening</span><br></pre></td></tr></table></figure><h1 id="为配置类添加提示"><a href="#为配置类添加提示" class="headerlink" title="为配置类添加提示"></a>为配置类添加提示</h1><p>我们知道，在Idea中，编写配置文件的时候，有智能提示</p><p><img data-src="https://i.loli.net/2019/08/06/MD7ZeTC6HVtYy3R.png"></p><p>其实这不是Idea搞的鬼，是由<code>META-INF/spring-configuration-metadata.json</code>文件配置好的，Idea只是负责解析这个文件，提供我们智能化的提示信息。</p><p>想要达到这个目的很简单，添加依赖<code>org.springframework.boot:spring-boot-configuration-processor</code>就行了。</p><p>Maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;org.springframework.boot&#x27;</span>, name: <span class="string">&#x27;spring-boot-configuration-processor&#x27;</span>, version: <span class="string">&#x27;2.1.6.RELEASE&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是<code>Spring Boot Starter</code>的全部内容了，如果要发布到maven仓库，供别人使用，可以使用<code>mvn install</code>打包发布至maven仓库。</p><p>👉 <a href="https://github.com/gcdd1993/Spring-Boot-Starter-Sample">本文代码地址</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-Boot-Starter是什么？&quot;&gt;&lt;a href=&quot;#Spring-Boot-Starter是什么？&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot Starter是什么？&quot;&gt;&lt;/a&gt;Spring Boot Starter是什么？&lt;/h1&gt;&lt;p&gt;依赖管理是任何复杂项目的关键部分。以手动的方式来实现依赖管理不太现实，你得花更多时间，同时你在项目的其他重要方面能付出的时间就会变得越少。&lt;/p&gt;
&lt;p&gt;Spring Boot starter 就是为了解决这个问题而诞生的。Starter POM 是一组方便的依赖描述符，您可以将其包含在应用程序中。您可以获得所需的所有 Spring 和相关技术的一站式服务，无需通过示例代码搜索和复制粘贴依赖。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring Boot" scheme="https://gcdd1993.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安装MongoDB</title>
    <link href="https://gcdd1993.github.io/p/49357/"/>
    <id>https://gcdd1993.github.io/p/49357/</id>
    <published>2019-03-15T03:38:31.000Z</published>
    <updated>2021-06-19T15:18:16.372Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04安装MongoDB指南</p><span id="more"></span><h1 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt dist-upgrade</span><br><span class="line">$ sudo apt autoremove</span><br><span class="line">$ sudo apt clean</span><br></pre></td></tr></table></figure><h1 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure><p>mongodb默认是监听在127.0.0.1端口的，要开启外网连接，需要修改mongodb配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongodb.conf</span><br></pre></td></tr></table></figure><p><code>bind_ip = 127.0.0.1</code> 修改为<code>bind_ip = 0.0.0.0</code></p><h1 id="连接mongodb"><a href="#连接mongodb" class="headerlink" title="连接mongodb"></a>连接mongodb</h1><p>使用工具<a href="https://robomongo.org/">robo 3t</a>，添加连接信息</p><p><img data-src="https://i.loli.net/2019/03/15/5c8b2c0d28653.png"></p><h1 id="启用密码访问"><a href="#启用密码访问" class="headerlink" title="启用密码访问"></a>启用密码访问</h1><p>mongodb默认是不开启密码登录的，如果要开启，修改mongodb配置文件：</p><p>取消<code>#auth = true</code>前面的注释，并重启mongodb<code>service mongodb restart</code></p><p>添加用户信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use test_db;</span><br><span class="line">db.createUser(&#123;user:<span class="string">&#x27;cool&#x27;</span>, <span class="built_in">pwd</span>:<span class="string">&#x27;cool&#x27;</span>, roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span>, db: <span class="string">&quot;test_db&quot;</span> &#125; ]&#125;);</span><br></pre></td></tr></table></figure><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>连接方式跟上面类似，唯一不同的是要添加authentication，指定database，username，password，以及选择Mongodb-CR验证方式<br><img data-src="https://i.loli.net/2019/03/15/5c8b2c0d0f52e.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu16.04安装MongoDB指南&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="NoSql" scheme="https://gcdd1993.github.io/tags/NoSql/"/>
    
    <category term="MongoDB" scheme="https://gcdd1993.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Spring Event事件驱动</title>
    <link href="https://gcdd1993.github.io/p/18285/"/>
    <id>https://gcdd1993.github.io/p/18285/</id>
    <published>2019-03-14T05:15:01.000Z</published>
    <updated>2021-06-19T15:18:16.370Z</updated>
    
    <content type="html"><![CDATA[<p>Spring事件驱动模型，简单来说类似于Message-Queue消息队列中的Pub/Sub发布/订阅模式，也类似于Java设计模式中的观察者模式。</p><span id="more"></span><h1 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h1><p>Spring的事件接口位于<code>org.springframework.context.ApplicationEvent</code>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7099057708183571937L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestamp;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApplicationEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(source);</span><br><span class="line"><span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.timestamp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了Java的事件对象<code>EventObject</code>，所以可以使用<code>getSource()</code>方法来获取到事件传播对象。</p><h2 id="自定义Spring事件"><a href="#自定义Spring事件" class="headerlink" title="自定义Spring事件"></a>自定义Spring事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomSpringEvent</span><span class="params">(Object source, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义事件监听器，该监听器实际上等同于消费者，需要交给Spring容器管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">CustomSpringEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(CustomSpringEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Received spring custom event - &quot;</span> + event.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后定义事件发布者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventPublisher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuffAndPublishAnEvent</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Publishing custom event. &quot;</span>);</span><br><span class="line">        CustomSpringEvent customSpringEvent = <span class="keyword">new</span> CustomSpringEvent(<span class="keyword">this</span>, message);</span><br><span class="line">        applicationEventPublisher.publishEvent(customSpringEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventPublisherTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomSpringEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishStringEventTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        publisher.doStuffAndPublishAnEvent(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类，可以看到控制台打印了两条重要信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//发布事件</span><br><span class="line">Publishing custom event. </span><br><span class="line">//监听器得到了事件，并相应处理</span><br><span class="line">Received spring custom event - 111</span><br></pre></td></tr></table></figure><p>由于Spring事件是发布/订阅的模式,而发布订阅模式有以下三种情况</p><ol><li>1生产者 - 1消费者</li><li>1生产者 - 多消费者</li><li>多生产者 - 多消费者</li></ol><p>上面举的例子是第一种情况，我们来试试其他两个情况</p><p>继续创建一个事件监听器作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventListener2</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">CustomSpringEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(CustomSpringEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CustomSpringEventListener2 Received spring custom event - &quot;</span> + event.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试类后，可以观察到，控制台顺序打印了两条消费信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Publishing custom event. </span><br><span class="line">CustomSpringEventListener1 Received spring custom event - 111</span><br><span class="line">CustomSpringEventListener2 Received spring custom event - 111</span><br></pre></td></tr></table></figure><p>说明，Spring的发布订阅模式是广播模式，所有消费者都能接受到消息，并正常消费</p><p>再试试第三种多生产者 - 多消费者的情况</p><p>继续创建一个发布者，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventPublisher2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuffAndPublishAnEvent</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CustomSpringEventPublisher2 Publishing custom event. &quot;</span>);</span><br><span class="line">        CustomSpringEvent customSpringEvent = <span class="keyword">new</span> CustomSpringEvent(<span class="keyword">this</span>, message);</span><br><span class="line">        applicationEventPublisher.publishEvent(customSpringEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CustomSpringEventPublisher Publishing custom event. </span><br><span class="line">CustomSpringEventListener1 Received spring custom event - <span class="number">111</span></span><br><span class="line">CustomSpringEventListener2 Received spring custom event - <span class="number">111</span></span><br><span class="line">CustomSpringEventPublisher2 Publishing custom event. </span><br><span class="line">CustomSpringEventListener1 Received spring custom event - <span class="number">222</span></span><br><span class="line">CustomSpringEventListener2 Received spring custom event - <span class="number">222</span></span><br></pre></td></tr></table></figure><p>从以上输出内容，我们可以猜测到，Spring的事件发布订阅机制是同步进行的，也就是说，事件必须被所有消费者消费完成之后，发布者的代码才能继续往下走，这显然不是我们想要的效果，那有没有异步执行的事件呢？</p><h1 id="Spring中的异步事件"><a href="#Spring中的异步事件" class="headerlink" title="Spring中的异步事件"></a>Spring中的异步事件</h1><p>要使用Spring 的异步事件，我们需要自定义异步事件配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsynchronousSpringEventsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;applicationEventMulticaster&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationEventMulticaster <span class="title">simpleApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleApplicationEventMulticaster eventMulticaster</span><br><span class="line">                = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">        eventMulticaster.setTaskExecutor(<span class="keyword">new</span> SimpleAsyncTaskExecutor());</span><br><span class="line">        <span class="keyword">return</span> eventMulticaster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布和订阅的代码不用变动，直接运行测试类，控制台将打印出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CustomSpringEventPublisher Publishing custom event. </span><br><span class="line">CustomSpringEventPublisher2 Publishing custom event. </span><br><span class="line">CustomSpringEventListener1 Received spring custom event - 111</span><br><span class="line">CustomSpringEventListener2 Received spring custom event - 111</span><br><span class="line">CustomSpringEventListener2 Received spring custom event - 222</span><br><span class="line">CustomSpringEventListener1 Received spring custom event - 222</span><br></pre></td></tr></table></figure><p>可以看到，两个发布者几乎同时运行，证明监听器是异步执行的，没有阻塞住发布者的代码。准确的说，监听器将在一个单独的线程中异步处理事件。</p><h1 id="Spring自带的事件类型"><a href="#Spring自带的事件类型" class="headerlink" title="Spring自带的事件类型"></a>Spring自带的事件类型</h1><p>事件驱动在Spring中是被广泛采用的，我们查看ApplicationEvent的子类可以发现许多Event事件，在此不赘述。</p><p><img data-src="https://i.loli.net/2019/03/14/5c8a206832ffd.png"></p><h1 id="注解驱动的监听器"><a href="#注解驱动的监听器" class="headerlink" title="注解驱动的监听器"></a>注解驱动的监听器</h1><p>从Spring 4.2开始，事件监听器不需要是实现<code>ApplicationListener</code>接口的bean，它可以通过<code>@EventListener</code>注解在任何被Spring容器管理的bean的公共方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationDrivenContextStartedListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleContextStart</span><span class="params">(CustomSpringEvent cse)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Handling Custom Spring Event.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CustomSpringEventPublisher Publishing custom event.</span><br><span class="line">Handling Custom Spring Event.</span><br><span class="line">CustomSpringEventPublisher2 Publishing custom event. </span><br><span class="line">Handling Custom Spring Event.</span><br></pre></td></tr></table></figure><p>同样的，我们可以看出，这个事件监听器是同步执行的，如果要改为异步监听器，在事件方法上加上<code>@Async</code>，并且在Spring应用中开启异步支持(在<code>SpringBootApplication</code>上添加<code>@EnableAsync</code>)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationDrivenContextStartedListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleContextStart</span><span class="params">(CustomSpringEvent cse)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Handling Custom Spring Event.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试类:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CustomSpringEventPublisher Publishing custom event. </span><br><span class="line">CustomSpringEventPublisher2 Publishing custom event. </span><br><span class="line">Handling Custom Spring Event.</span><br><span class="line">Handling Custom Spring Event.</span><br></pre></td></tr></table></figure><h1 id="泛型支持"><a href="#泛型支持" class="headerlink" title="泛型支持"></a>泛型支持</h1><p>创建一个通用泛型事件模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericSpringEvent</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T message;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> success;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericSpringEvent</span><span class="params">(T what, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = what;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>GenericSpringEvent</code>和<code>CustomSpringEvent</code>之间的区别。我们现在可以灵活地发布任何任意事件，并且不再需要从<code>ApplicationEvent</code>扩展。</p><p>这样的话，我们无法像之前一样，通过继承<code>ApplicationListener</code>的方式来定义一个监听器，因为<code>ApplicationListener</code>定义了事件必须是<code>ApplicationEvent</code>的子类。所以，我们只能使用注解驱动的监听器。</p><p>通过在<code>@EventListener</code>注释上定义布尔SpEL表达式，也可以使事件监听器成为条件。在这种情况下，只会为成功的String的<code>GenericSpringEvent</code>调用事件处理程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationDrivenEventListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EventListener(condition = &quot;#event.success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSuccessful</span><span class="params">(GenericSpringEvent&lt;String&gt; event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Handling generic event (conditional).&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体类型的事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringGenericSpringEvent</span> <span class="keyword">extends</span> <span class="title">GenericSpringEvent</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringGenericSpringEvent</span><span class="params">(String message, <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, success);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义发布者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringGenericSpringEventPublisher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuffAndPublishAnEvent</span><span class="params">(<span class="keyword">final</span> String message, <span class="keyword">final</span> <span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CustomSpringEventPublisher Publishing custom event. &quot;</span>);</span><br><span class="line">        StringGenericSpringEvent springEvent = <span class="keyword">new</span> StringGenericSpringEvent(message, success);</span><br><span class="line">        applicationEventPublisher.publishEvent(springEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventPublisherTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringGenericSpringEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishStringEventTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        publisher.doStuffAndPublishAnEvent(<span class="string">&quot;success&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        publisher.doStuffAndPublishAnEvent(<span class="string">&quot;failed&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CustomSpringEventPublisher Publishing custom event. </span><br><span class="line">Handling generic event (conditional) success</span><br><span class="line">CustomSpringEventPublisher Publishing custom event. </span><br></pre></td></tr></table></figure><p>监听器只处理了成功的事件，成功忽略掉了失败的事件。这样的好处是，可以为同一个事件定义成功和失败不同的操作。</p><h1 id="Spring事件的事务绑定"><a href="#Spring事件的事务绑定" class="headerlink" title="Spring事件的事务绑定"></a>Spring事件的事务绑定</h1><p>从Spring 4.2开始，框架提供了一个新的<code>@TransactionalEventListener</code>注解，它是<code>@EventListener</code>的扩展，允许将事件的侦听器绑定到事务的一个阶段。绑定可以进行以下事务阶段：</p><ul><li>AFTER_COMMIT(默认的)：在事务成功后触发</li><li>AFTER_ROLLBACK:事务回滚时触发</li><li>AFTER_COMPLETION：事务完成后触发，不论是否成功</li><li>BEFORE_COMMIT：事务提交之前触发</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>Spring中处理事件的基础知识：创建一个简单的自定义事件，发布它，然后在监听器中处理它。</li><li>在配置中启用事件的异步处理。</li><li>Spring 4.2中引入的改进，例如注释驱动的侦听器，更好的泛型支持以及绑定到事务阶段的事件。</li></ol><p>👉 <a href="https://github.com/gcdd1993/spring-event-demo">本文代码地址</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring事件驱动模型，简单来说类似于Message-Queue消息队列中的Pub/Sub发布/订阅模式，也类似于Java设计模式中的观察者模式。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring的BeanFactory和FactoryBean</title>
    <link href="https://gcdd1993.github.io/p/17046/"/>
    <id>https://gcdd1993.github.io/p/17046/</id>
    <published>2019-03-12T09:01:29.000Z</published>
    <updated>2021-06-19T15:18:16.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h1><ul><li>BeanFactory：Spring Bean容器的根接口</li><li>FactoryBean：各个对象的工厂接口，如果bean实现了这个接口，它将被用作对象的工厂，而不是直接作为bean实例。</li></ul><span id="more"></span><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标注是获取FactoryBean的实现类，而不是调用getObject()获取的实例</span></span><br><span class="line">String FACTORY_BEAN_PREFIX = <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line"><span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码的方法定义上，就可以看出，<code>BeanFactory</code>作为bean的容器管理器，提供了一系列获取bean以及获取bean属性的方法。</p><p>写一个小例子试验下：</p><p>SimpleBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Spring Bean!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring配置文件config.xml：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;simpleBean&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;base.SimpleBeanFactoryBean&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">    BeanFactory beanFactory = context.getAutowireCapableBeanFactory();</span><br><span class="line">    System.out.println(<span class="string">&quot;通过名称获取bean&quot;</span>);</span><br><span class="line">    SimpleBean simpleBean = (SimpleBean) beanFactory.getBean(<span class="string">&quot;simpleBean&quot;</span>);</span><br><span class="line">    simpleBean.send();</span><br><span class="line">    System.out.println(<span class="string">&quot;通过名称和类型获取bean&quot;</span>);</span><br><span class="line">    simpleBean = beanFactory.getBean(<span class="string">&quot;simpleBean&quot;</span>, SimpleBean.class);</span><br><span class="line">    simpleBean.send();</span><br><span class="line">    System.out.println(<span class="string">&quot;通过类型获取bean&quot;</span>);</span><br><span class="line">    simpleBean = beanFactory.getBean(SimpleBean.class);</span><br><span class="line">    simpleBean.send();</span><br><span class="line">    <span class="keyword">boolean</span> containsBean = beanFactory.containsBean(<span class="string">&quot;simpleBean&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;是否包含 simpleBean ? &quot;</span> + containsBean);</span><br><span class="line">    <span class="keyword">boolean</span> singleton = beanFactory.isSingleton(<span class="string">&quot;simpleBean&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是单例? &quot;</span> + singleton);</span><br><span class="line">    <span class="keyword">boolean</span> match = beanFactory.isTypeMatch(<span class="string">&quot;simpleBean&quot;</span>, ResolvableType.forClass(SimpleBean.class));</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是SimpleBean类型 ? &quot;</span> + match);</span><br><span class="line">    match = beanFactory.isTypeMatch(<span class="string">&quot;simpleBean&quot;</span>, SimpleBean.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;是否是SimpleBean类型 ? &quot;</span> + match);</span><br><span class="line">    Class&lt;?&gt; aClass = beanFactory.getType(<span class="string">&quot;simpleBean&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;simpleBean 的类型是 &quot;</span> + aClass.getName());</span><br><span class="line">    String[] aliases = beanFactory.getAliases(<span class="string">&quot;simpleBean&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;simpleBean 的别名 : &quot;</span> + Arrays.toString(aliases));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">通过名称获取bean</span><br><span class="line">Hello Spring Bean!</span><br><span class="line">通过名称和类型获取bean</span><br><span class="line">Hello Spring Bean!</span><br><span class="line">通过类型获取bean</span><br><span class="line">Hello Spring Bean!</span><br><span class="line">是否包含 simpleBean ? true</span><br><span class="line">是否是单例? true</span><br><span class="line">是否是SimpleBean类型 ? true</span><br><span class="line">是否是SimpleBean类型 ? true</span><br><span class="line">simpleBean 的类型是 base.SimpleBean</span><br><span class="line">simpleBean 的别名 : []</span><br></pre></td></tr></table></figure><h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个bean，如果配置了工厂bean，在getBean的时候，将会调用此方法，获取一个bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口是泛型，定义了三个方法，其中<code>getObject()</code>是工厂模式的体现，将会通过此方法返回一个bean的实例。</p><p>一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBeanFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">SimpleBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleBean <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFactoryBean getObject&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFactoryBean getObjectType&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SimpleBean.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上可以修改为单例模式，可以做成线程安全的单例，可塑性较高。</p><p>配置文件config.xml:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;simple&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;base.SimpleBeanFactoryBean&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>注意，我们在这里只配置了<code>SimpleBeanFactoryBean</code>，并没有配置<code>SimpleBean</code>，接下来看下<code>getBean</code>方法的输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;config.xml&quot;</span>);</span><br><span class="line">SimpleBean simpleBean = context.getBean(SimpleBean.class);</span><br><span class="line">simpleBean.send();</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyFactoryBean getObjectType</span><br><span class="line">MyFactoryBean getObject</span><br><span class="line">Hello Spring Bean!</span><br></pre></td></tr></table></figure><p>由此我们可以看出<code>FactoryBean</code>的执行流程</p><ol><li>通过<code>getObjectType</code>获取bean的类型</li><li>调用<code>getObject</code>方法获取bean的实例</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>BeanFactory</code>和<code>FactoryBean</code>其实没有关系，只是名称比较像而已。</p><ul><li><code>BeanFactory</code>是IOC最基本的容器，负责生产和管理bean，它为其他具体的IOC容器提供了最基本的规范。</li><li><code>FactoryBean</code>是一个接口，当在IOC容器中的Bean实现了<code>FactoryBean</code>后，通过<code>getBean(String BeanName)</code>获取到的Bean对象并不是<code>FactoryBean</code>的实现类对象，而是这个实现类中的<code>getObject()</code>方法返回的对象。要想获取<code>FactoryBean</code>的实现类，就要<code>getBean(&amp;BeanName)</code>，在<code>BeanName</code>之前加上&amp;。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方定义&quot;&gt;&lt;a href=&quot;#官方定义&quot; class=&quot;headerlink&quot; title=&quot;官方定义&quot;&gt;&lt;/a&gt;官方定义&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;BeanFactory：Spring Bean容器的根接口&lt;/li&gt;
&lt;li&gt;FactoryBean：各个对象的工厂接口，如果bean实现了这个接口，它将被用作对象的工厂，而不是直接作为bean实例。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Jackson使用指南</title>
    <link href="https://gcdd1993.github.io/p/56384/"/>
    <id>https://gcdd1993.github.io/p/56384/</id>
    <published>2019-01-21T12:12:32.000Z</published>
    <updated>2021-06-19T15:18:16.365Z</updated>
    
    <content type="html"><![CDATA[<p>从事JAVA开发工作以来,一直都离不开Jackson的序列化反序列化,对于Jackson的使用也一直处于够用但不深入的状态，下面是日常使用过程中对Jackson的总结。</p><span id="more"></span><h1 id="Jackson常用注解"><a href="#Jackson常用注解" class="headerlink" title="Jackson常用注解"></a>Jackson常用注解</h1><h2 id="序列化注解"><a href="#序列化注解" class="headerlink" title="序列化注解"></a>序列化注解</h2><h3 id="JsonAnyGetter"><a href="#JsonAnyGetter" class="headerlink" title="@JsonAnyGetter"></a>@JsonAnyGetter</h3><blockquote><p>像普通属性一样序列化Map</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonAnyGetter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;My bean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;attr2&quot;</span>:<span class="string">&quot;val2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;attr1&quot;</span>:<span class="string">&quot;val1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonGetter"><a href="#JsonGetter" class="headerlink" title="@JsonGetter"></a>@JsonGetter</h3><blockquote><p>将指定的方法标记为<code>getter</code>方法。可以用来代替<code>@JsonProperty</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonGetter(&quot;name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTheName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;My bean&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonPropertyOrder"><a href="#JsonPropertyOrder" class="headerlink" title="@JsonPropertyOrder"></a>@JsonPropertyOrder</h3><blockquote><p>用在类上，在序列化的时候自定义属性输出顺序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonPropertyOrder(&#123; &quot;name&quot;, &quot;id&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;My bean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonRawValue"><a href="#JsonRawValue" class="headerlink" title="@JsonRawValue"></a>@JsonRawValue</h3><blockquote><p>完全按照原样序列化属性的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RawBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonRawValue</span></span><br><span class="line">    <span class="keyword">public</span> String json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RawBean bean = <span class="keyword">new</span> RawBean(<span class="string">&quot;My bean&quot;</span>, <span class="string">&quot;&#123;\&quot;attr\&quot;:false&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>将序列化为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;My bean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;json&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;attr&quot;</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;My bean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;json&quot;</span>:<span class="string">&quot;&#123;\&quot;attr\&quot;:false&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonValue"><a href="#JsonValue" class="headerlink" title="@JsonValue"></a>@JsonValue</h3><blockquote><p>定义整个实体的序列化方法，Jackson将会使用该方法的输出作为序列化输出。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">TypeEnumWithValue</span> </span>&#123;</span><br><span class="line">    TYPE1(<span class="number">1</span>, <span class="string">&quot;Type A&quot;</span>), TYPE2(<span class="number">2</span>, <span class="string">&quot;Type 2&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// standard constructors</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Type 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonRootName"><a href="#JsonRootName" class="headerlink" title="@JsonRootName"></a>@JsonRootName</h3><blockquote><p>如果需要将实体包装一层，可以使用<code>@JsonRootName</code>来指定根包装器的名称</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonRootName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWithRoot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不用该注解，将会序列化为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonSerialize"><a href="#JsonSerialize" class="headerlink" title="@JsonSerialize"></a>@JsonSerialize</h3><blockquote><p>用于指定自定义序列化器来序列化实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonSerialize(using = CustomDateSerializer.class)</span></span><br><span class="line">    <span class="keyword">public</span> Date eventDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义序列化器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateSerializer</span> <span class="keyword">extends</span> <span class="title">StdSerializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat formatter </span><br><span class="line">      = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd-MM-yyyy hh:mm:ss&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDateSerializer</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDateSerializer</span><span class="params">(Class&lt;Date&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(t); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      Date value, JsonGenerator gen, SerializerProvider arg2)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        gen.writeString(formatter.format(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;eventDate&quot;</span>: <span class="string">&quot;20-12-2014 02:30:00&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化注解"><a href="#反序列化注解" class="headerlink" title="反序列化注解"></a>反序列化注解</h2><h3 id="JsonCreator"><a href="#JsonCreator" class="headerlink" title="@JsonCreator"></a>@JsonCreator</h3><blockquote><p>指定反序列化使用的构造函数或方法</p></blockquote><p>待反序列化Json示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;theName&quot;</span>:<span class="string">&quot;My bean&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithCreator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonCreator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanWithCreator</span><span class="params">(<span class="meta">@JsonProperty(&quot;id&quot;)</span> <span class="keyword">int</span> id, <span class="meta">@JsonProperty(&quot;theName&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JacksonInject"><a href="#JacksonInject" class="headerlink" title="@JacksonInject"></a>@JacksonInject</h3><blockquote><p>指定某个字段从注入赋值，而不是从Json</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithInject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JacksonInject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;My bean\&quot;&#125;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">InjectableValues inject = <span class="keyword">new</span> InjectableValues.Std()</span><br><span class="line">  .addValue(<span class="keyword">int</span>.class, <span class="number">1</span>);</span><br><span class="line">BeanWithInject bean = <span class="keyword">new</span> ObjectMapper().reader(inject)</span><br><span class="line">  .forType(BeanWithInject.class)</span><br><span class="line">  .readValue(json);</span><br></pre></td></tr></table></figure><h3 id="JsonAnySetter"><a href="#JsonAnySetter" class="headerlink" title="@JsonAnySetter"></a>@JsonAnySetter</h3><blockquote><p>在反序列化时，将Map当成普通属性</p></blockquote><p>待反序列化Json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;My bean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;attr2&quot;</span>:<span class="string">&quot;val2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;attr1&quot;</span>:<span class="string">&quot;val1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonAnySetter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        properties.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>properties</code>字段的值将会是由 <code>attr2 -&gt; val2,attr1 -&gt; val1</code>组成的键值对。</p><h3 id="JsonSetter"><a href="#JsonSetter" class="headerlink" title="@JsonSetter"></a>@JsonSetter</h3><blockquote><p>将方法标记为<code>setter</code>方法，可以指定属性名称</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonSetter(&quot;name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTheName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonDeserialize"><a href="#JsonDeserialize" class="headerlink" title="@JsonDeserialize"></a>@JsonDeserialize</h3><blockquote><p>用于指定自定义反序列化器来反序列化实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonDeserialize(using = CustomDateDeserializer.class)</span></span><br><span class="line">    <span class="keyword">public</span> Date eventDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的反序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateDeserializer</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">StdDeserializer</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat formatter</span><br><span class="line">      = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd-MM-yyyy hh:mm:ss&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDateDeserializer</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDateDeserializer</span><span class="params">(Class&lt;?&gt; vc)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(vc); </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">deserialize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      JsonParser jsonparser, DeserializationContext context)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">         </span><br><span class="line">        String date = jsonparser.getText();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> formatter.parse(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jackson设置属性是否参与序列化"><a href="#Jackson设置属性是否参与序列化" class="headerlink" title="Jackson设置属性是否参与序列化"></a>Jackson设置属性是否参与序列化</h2><h3 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="@JsonIgnoreProperties"></a>@JsonIgnoreProperties</h3><blockquote><p>在类上指定要忽略的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(&#123; &quot;id&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithIgnore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h3><blockquote><p>在具体属性上忽略，使其不参与序列化过程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithIgnore</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<code>@JsonIgnoreProperties</code>是等效的。</p><h3 id="JsonIgnoreType"><a href="#JsonIgnoreType" class="headerlink" title="@JsonIgnoreType"></a>@JsonIgnoreType</h3><blockquote><p>用在类上，将忽略该类所有属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> Name name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonIgnoreType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String firstName;</span><br><span class="line">        <span class="keyword">public</span> String lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonInclude"><a href="#JsonInclude" class="headerlink" title="@JsonInclude"></a>@JsonInclude</h3><blockquote><p>用于排除值为<code>empty/null/default</code>的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonAutoDetect"><a href="#JsonAutoDetect" class="headerlink" title="@JsonAutoDetect"></a>@JsonAutoDetect</h3><blockquote><p>强制序列化私有属性，不管它有没有<code>getter</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonAutoDetect(fieldVisibility = Visibility.ANY)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jackson处理多态"><a href="#Jackson处理多态" class="headerlink" title="Jackson处理多态"></a>Jackson处理多态</h2><p>一般都是组合起来使用，有下面三个注解：</p><ul><li>@JsonTypeInfo<blockquote><p>指定序列化中包含的类型信息的详细信息</p></blockquote></li><li>@JsonSubTypes<blockquote><p>指定带注释类型的子类型</p></blockquote></li><li>@JsonTypeName<blockquote><p>指定用于带注释的类的逻辑类型名称</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Animal animal;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonTypeInfo(</span></span><br><span class="line"><span class="meta">      use = JsonTypeInfo.Id.NAME, </span></span><br><span class="line"><span class="meta">      include = As.PROPERTY, </span></span><br><span class="line"><span class="meta">      property = &quot;type&quot;)</span></span><br><span class="line">    <span class="meta">@JsonSubTypes(&#123;</span></span><br><span class="line"><span class="meta">        @JsonSubTypes.Type(value = Dog.class, name = &quot;dog&quot;),</span></span><br><span class="line"><span class="meta">        @JsonSubTypes.Type(value = Cat.class, name = &quot;cat&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonTypeName(&quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> barkVolume;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonTypeName(&quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> likesCream;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> lives;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，指定属性<code>type</code>为判断具体子类的依据，例如：<code>type=dog</code>，将被序列化为<code>Dog</code>类型。</p><h2 id="Jackson通用注解（序列化反序列化都生效）"><a href="#Jackson通用注解（序列化反序列化都生效）" class="headerlink" title="Jackson通用注解（序列化反序列化都生效）"></a>Jackson通用注解（序列化反序列化都生效）</h2><h3 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h3><blockquote><p>指定JSON中的属性名称</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonProperty(&quot;name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTheName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonProperty(&quot;name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTheName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h3><blockquote><p>用于在序列化日期/时间值时指定格式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonFormat(</span></span><br><span class="line"><span class="meta">      shape = JsonFormat.Shape.STRING,</span></span><br><span class="line"><span class="meta">      pattern = &quot;dd-MM-yyyy hh:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Date eventDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonUnwrapped"><a href="#JsonUnwrapped" class="headerlink" title="@JsonUnwrapped"></a>@JsonUnwrapped</h3><blockquote><p>将对象中所有的属性与当前平级，不太好描述，简单说就是拆开包装。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnwrappedUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonUnwrapped</span></span><br><span class="line">    <span class="keyword">public</span> Name name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String firstName;</span><br><span class="line">        <span class="keyword">public</span> String lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Doe&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加<code>@JsonUnwrapped</code>注解，将被序列化为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;John&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Doe&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonView"><a href="#JsonView" class="headerlink" title="@JsonView"></a>@JsonView</h3><blockquote><p>指定视图，类似分组进行序列化/反序列化</p></blockquote><p>定义视图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Views</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Public</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Internal</span> <span class="keyword">extends</span> <span class="title">Public</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonView(Views.Public.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonView(Views.Public.class)</span></span><br><span class="line">    <span class="keyword">public</span> String itemName;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonView(Views.Internal.class)</span></span><br><span class="line">    <span class="keyword">public</span> String ownerName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="keyword">new</span> ObjectMapper()</span><br><span class="line">  .writerWithView(Views.Public.class)</span><br><span class="line">  .writeValueAsString(item);</span><br></pre></td></tr></table></figure><p>这时，将只会序列化<code>id</code>和<code>itemName</code>字段</p><h3 id="JsonManagedReference-JsonBackReference"><a href="#JsonManagedReference-JsonBackReference" class="headerlink" title="@JsonManagedReference, @JsonBackReference"></a>@JsonManagedReference, @JsonBackReference</h3><blockquote><p>@JsonManagedReference和@JsonBackReference注释用于处理父/子关系并解决循环问题。</p></blockquote><p>例如，有两个相互引用的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemWithRef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String itemName;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonManagedReference</span></span><br><span class="line">    <span class="keyword">public</span> UserWithRef owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWithRef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@JsonBackReference</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ItemWithRef&gt; userItems;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不加注解，会循环调用，导致内存溢出，这时候可以使用<code>@JsonManagedReference</code>和<code>@JsonBackReference</code>来避免内存溢出。</p><h3 id="JsonIdentityInfo"><a href="#JsonIdentityInfo" class="headerlink" title="@JsonIdentityInfo"></a>@JsonIdentityInfo</h3><blockquote><p>用于指定在序列化/反序列化值时使用对象标识，例如，处理无限递归类型的问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">  generator = ObjectIdGenerators.PropertyGenerator.class,</span></span><br><span class="line"><span class="meta">  property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemWithIdentity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String itemName;</span><br><span class="line">    <span class="keyword">public</span> UserWithIdentity owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonFilter"><a href="#JsonFilter" class="headerlink" title="@JsonFilter"></a>@JsonFilter</h3><blockquote><p>指定序列化期间要使用的过滤器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFilter(&quot;myFilter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BeanWithFilter bean = <span class="keyword">new</span> BeanWithFilter(<span class="number">1</span>, <span class="string">&quot;My bean&quot;</span>);</span><br><span class="line"></span><br><span class="line">FilterProvider filters </span><br><span class="line">  = <span class="keyword">new</span> SimpleFilterProvider().addFilter(</span><br><span class="line">    <span class="string">&quot;myFilter&quot;</span>, </span><br><span class="line">    SimpleBeanPropertyFilter.filterOutAllExcept(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">String result = <span class="keyword">new</span> ObjectMapper()</span><br><span class="line">  .writer(filters)</span><br><span class="line">  .writeValueAsString(bean);</span><br></pre></td></tr></table></figure><h2 id="自定义Jackson注解"><a href="#自定义Jackson注解" class="headerlink" title="自定义Jackson注解"></a>自定义Jackson注解</h2><p>可以使用@JacksonAnnotationsInside来开发自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@JacksonAnnotationsInside</span></span><br><span class="line">    <span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line">    <span class="meta">@JsonPropertyOrder(&#123; &quot;name&quot;, &quot;id&quot;, &quot;dateCreated&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> CustomAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><p>如何使用自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CustomAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithCustomAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Date dateCreated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义注解可以<strong>增强代码复用</strong>，把一些通用的Jackson注解组合起来，形成一个新注解，新注解可以代替组合的注解。</p><h2 id="Jackson-MixIn-注解"><a href="#Jackson-MixIn-注解" class="headerlink" title="Jackson MixIn 注解"></a>Jackson MixIn 注解</h2><blockquote><p>动态地为某些类型增加统一的Jackson注解</p></blockquote><p>实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String itemName;</span><br><span class="line">    <span class="keyword">public</span> User owner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MixIn类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreType</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMixInForIgnoreType</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>我们可以动态地让<code>User</code>类型不参与序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Item item = <span class="keyword">new</span> Item(<span class="number">1</span>, <span class="string">&quot;book&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">mapper.addMixIn(User.class, MyMixInForIgnoreType.class);</span><br><span class="line">result = mapper.writeValueAsString(item);</span><br></pre></td></tr></table></figure><h2 id="禁用Jackson注解"><a href="#禁用Jackson注解" class="headerlink" title="禁用Jackson注解"></a>禁用Jackson注解</h2><p>假设我们有一个带Jackson注解的实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(Include.NON_NULL)</span></span><br><span class="line"><span class="meta">@JsonPropertyOrder(&#123; &quot;name&quot;, &quot;id&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样来禁用该实体上的所有Jackson注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyBean bean = <span class="keyword">new</span> MyBean(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">mapper.disable(MapperFeature.USE_ANNOTATIONS);</span><br></pre></td></tr></table></figure><h1 id="Jackson的ObjectMapper用法"><a href="#Jackson的ObjectMapper用法" class="headerlink" title="Jackson的ObjectMapper用法"></a>Jackson的<code>ObjectMapper</code>用法</h1><h2 id="java类-转换为-json"><a href="#java类-转换为-json" class="headerlink" title="java类 转换为 json"></a>java类 转换为 json</h2><p>可以直接序列化为Json字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.writeValueAsString(car);</span><br></pre></td></tr></table></figure><p>或者，可以序列化到文件，文件内容是Json字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.writeValue(<span class="keyword">new</span> File(<span class="string">&quot;target/car.json&quot;</span>), car);</span><br></pre></td></tr></table></figure><h2 id="json-转换为-java类"><a href="#json-转换为-java类" class="headerlink" title="json 转换为 java类"></a>json 转换为 java类</h2><p>从字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">&quot;&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;&quot;</span>;</span><br><span class="line">objectMapper.readValue(json, Car.class); </span><br></pre></td></tr></table></figure><p>从文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.readValue(<span class="keyword">new</span> File(<span class="string">&quot;target/json_car.json&quot;</span>), Car.class);</span><br></pre></td></tr></table></figure><p>从URL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.readValue(<span class="keyword">new</span> URL(<span class="string">&quot;target/json_car.json&quot;</span>), Car.class);</span><br></pre></td></tr></table></figure><h2 id="json转换为Jackson-JsonNode"><a href="#json转换为Jackson-JsonNode" class="headerlink" title="json转换为Jackson JsonNode"></a>json转换为Jackson JsonNode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">&quot;&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;FIAT\&quot; &#125;&quot;</span>;</span><br><span class="line">JsonNode jsonNode = objectMapper.readTree(json);</span><br><span class="line">String color = jsonNode.get(<span class="string">&quot;color&quot;</span>).asText();</span><br><span class="line"><span class="comment">// Output: color -&gt; Black</span></span><br></pre></td></tr></table></figure><h2 id="json-转换为-java集合"><a href="#json-转换为-java集合" class="headerlink" title="json 转换为 java集合"></a>json 转换为 java集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String jsonCarArray = </span><br><span class="line">  <span class="string">&quot;[&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;, &#123; \&quot;color\&quot; : \&quot;Red\&quot;, \&quot;type\&quot; : \&quot;FIAT\&quot; &#125;]&quot;</span>;</span><br><span class="line">List&lt;Car&gt; listCar = objectMapper.readValue(jsonCarArray, <span class="keyword">new</span> TypeReference&lt;List&lt;Car&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="json-转换为-Map"><a href="#json-转换为-Map" class="headerlink" title="json 转换为 Map"></a>json 转换为 Map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">&quot;&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;&quot;</span>;</span><br><span class="line">Map&lt;String, Object&gt; map = objectMapper.readValue(json, <span class="keyword">new</span> TypeReference&lt;Map&lt;String,Object&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="ObjectMapper的常用配置"><a href="#ObjectMapper的常用配置" class="headerlink" title="ObjectMapper的常用配置"></a><code>ObjectMapper</code>的常用配置</h2><p>忽略不识别的字段（json属性与目标实体存在属性上的差异）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>允许原始值为null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>允许将枚举序列化/反序列化为数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h2 id="配置自定义序列化-反序列化器"><a href="#配置自定义序列化-反序列化器" class="headerlink" title="配置自定义序列化/反序列化器"></a>配置自定义序列化/反序列化器</h2><p>假设有一个序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCarSerializer</span> <span class="keyword">extends</span> <span class="title">StdSerializer</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomCarSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomCarSerializer</span><span class="params">(Class&lt;Car&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      Car car, JsonGenerator jsonGenerator, SerializerProvider serializer)</span> </span>&#123;</span><br><span class="line">        jsonGenerator.writeStartObject();</span><br><span class="line">        jsonGenerator.writeStringField(<span class="string">&quot;car_brand&quot;</span>, car.getType());</span><br><span class="line">        jsonGenerator.writeEndObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个反序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCarDeserializer</span> <span class="keyword">extends</span> <span class="title">StdDeserializer</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomCarDeserializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomCarDeserializer</span><span class="params">(Class&lt;?&gt; vc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(vc);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">deserialize</span><span class="params">(JsonParser parser, DeserializationContext deserializer)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        ObjectCodec codec = parser.getCodec();</span><br><span class="line">        JsonNode node = codec.readTree(parser);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// try catch block</span></span><br><span class="line">        JsonNode colorNode = node.get(<span class="string">&quot;color&quot;</span>);</span><br><span class="line">        String color = colorNode.asText();</span><br><span class="line">        car.setColor(color);</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>ObjectMapper</code>使用他们：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加自定义序列化器</span></span><br><span class="line"><span class="keyword">module</span>.addSerializer(Car.class, <span class="keyword">new</span> CustomCarSerializer());</span><br><span class="line"><span class="comment">//添加自定义反序列化器</span></span><br><span class="line"><span class="keyword">module</span>.addDeserializer(Car.class, <span class="keyword">new</span> CustomCarDeserializer());</span><br></pre></td></tr></table></figure><h2 id="处理日期格式化"><a href="#处理日期格式化" class="headerlink" title="处理日期格式化"></a>处理日期格式化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm a z&quot;</span>);</span><br><span class="line">objectMapper.setDateFormat(df);</span><br></pre></td></tr></table></figure><h2 id="处理集合"><a href="#处理集合" class="headerlink" title="处理集合"></a>处理集合</h2><p>反序列化为数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String jsonCarArray = </span><br><span class="line">  <span class="string">&quot;[&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;, &#123; \&quot;color\&quot; : \&quot;Red\&quot;, \&quot;type\&quot; : \&quot;FIAT\&quot; &#125;]&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, <span class="keyword">true</span>);</span><br><span class="line">Car[] cars = objectMapper.readValue(jsonCarArray, Car[].class);</span><br></pre></td></tr></table></figure><p>反序列化为集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String jsonCarArray = </span><br><span class="line">  <span class="string">&quot;[&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;, &#123; \&quot;color\&quot; : \&quot;Red\&quot;, \&quot;type\&quot; : \&quot;FIAT\&quot; &#125;]&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">List&lt;Car&gt; listCar = objectMapper.readValue(jsonCarArray, <span class="keyword">new</span> TypeReference&lt;List&lt;Car&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure><h1 id="ObjectMapper的基本用法"><a href="#ObjectMapper的基本用法" class="headerlink" title="ObjectMapper的基本用法"></a><code>ObjectMapper</code>的基本用法</h1><h2 id="ObjectMapper可以通过configure方法设置全局序列化-反序列化行为，例如："><a href="#ObjectMapper可以通过configure方法设置全局序列化-反序列化行为，例如：" class="headerlink" title="ObjectMapper可以通过configure方法设置全局序列化/反序列化行为，例如："></a><code>ObjectMapper</code>可以通过<code>configure</code>方法设置全局序列化/反序列化行为，例如：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>常用的一些设置：</p><ol><li><code>DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</code>：忽略不识别的字段</li><li><code>DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES</code>：允许使用属性的默认值进行反序列化</li><li><code>DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS</code>：允许将枚举值序列化/反序列化为数字</li></ol><h2 id="注册自定义序列化-反序列化程序"><a href="#注册自定义序列化-反序列化程序" class="headerlink" title="注册自定义序列化/反序列化程序"></a>注册自定义序列化/反序列化程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个模块</span></span><br><span class="line">SimpleModule <span class="keyword">module</span> = <span class="keyword">new</span> SimpleModule(<span class="string">&quot;CustomCarSerializer&quot;</span>, <span class="keyword">new</span> Version(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line"><span class="comment">//将自定义序列化/反序列化程序注册到模块</span></span><br><span class="line"><span class="keyword">module</span>.addSerializer(Car.class, <span class="keyword">new</span> CustomCarSerializer());</span><br><span class="line"><span class="comment">//module.addDeserializer(Car.class, new CustomCarDeserializer());</span></span><br><span class="line"><span class="comment">//注册模块</span></span><br><span class="line">mapper.registerModule(<span class="keyword">module</span>);</span><br></pre></td></tr></table></figure><h2 id="处理日期格式"><a href="#处理日期格式" class="headerlink" title="处理日期格式"></a>处理日期格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm a z&quot;</span>);</span><br><span class="line">mapper.setDateFormat(df);</span><br></pre></td></tr></table></figure><h2 id="处理集合-1"><a href="#处理集合-1" class="headerlink" title="处理集合"></a>处理集合</h2><h3 id="处理数组"><a href="#处理数组" class="headerlink" title="处理数组"></a>处理数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String jsonCarArray = <span class="string">&quot;[&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;, &#123; \&quot;color\&quot; : \&quot;Red\&quot;, \&quot;type\&quot; : \&quot;FIAT\&quot; &#125;]&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, <span class="keyword">true</span>);</span><br><span class="line">Car[] cars = objectMapper.readValue(jsonCarArray, Car[].class);</span><br></pre></td></tr></table></figure><h3 id="处理集合-2"><a href="#处理集合-2" class="headerlink" title="处理集合"></a>处理集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String jsonCarArray = <span class="string">&quot;[&#123; \&quot;color\&quot; : \&quot;Black\&quot;, \&quot;type\&quot; : \&quot;BMW\&quot; &#125;, &#123; \&quot;color\&quot; : \&quot;Red\&quot;, \&quot;type\&quot; : \&quot;FIAT\&quot; &#125;]&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">List&lt;Car&gt; listCar = objectMapper.readValue(jsonCarArray, <span class="keyword">new</span> TypeReference&lt;List&lt;Car&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure><h1 id="Jackson注解扩展"><a href="#Jackson注解扩展" class="headerlink" title="Jackson注解扩展"></a>Jackson注解扩展</h1><h2 id="JsonIdentityReference"><a href="#JsonIdentityReference" class="headerlink" title="@JsonIdentityReference"></a>@JsonIdentityReference</h2><blockquote><p>使用指定的标识来序列化Java对象，而不是序列化整个对象</p></blockquote><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">@JsonIdentityReference(alwaysAsId = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithoutIdentityReference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将被序列化为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="JsonAppend"><a href="#JsonAppend" class="headerlink" title="@JsonAppend"></a>@JsonAppend</h2><blockquote><p>运行在序列化时添加额外的属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonAppend(attrs = &#123; </span></span><br><span class="line"><span class="meta">  @JsonAppend.Attr(value = &quot;version&quot;) </span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithAppend</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// constructor, getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，我们在序列化时手动增加<code>version = 1.0</code>的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BeanWithAppend bean = <span class="keyword">new</span> BeanWithAppend(<span class="number">2</span>, <span class="string">&quot;Bean With Append Annotation&quot;</span>);</span><br><span class="line">ObjectWriter writer = mapper.writerFor(BeanWithAppend.class).withAttribute(<span class="string">&quot;version&quot;</span>, <span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">String jsonString = writer.writeValueAsString(bean);</span><br></pre></td></tr></table></figure><p>序列化结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bean With Append Annotation&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JsonNaming"><a href="#JsonNaming" class="headerlink" title="@JsonNaming"></a>@JsonNaming</h2><blockquote><p>指定序列化的时候属性命名方式</p></blockquote><p>有四种选项：</p><ul><li><code>KEBAB_CASE</code><blockquote><p>由连字符分割，例如：kebab-case</p></blockquote></li><li><code>LOWER_CASE</code><blockquote><p>所有的字母都转换为小写，例如：lowercase</p></blockquote></li><li><code>SNAKE_CASE</code><blockquote><p>所有的字母都转换为小写，并且由下划线分割，例如：snake_case</p></blockquote></li><li><code>UPPER_CAMEL_CASE</code><blockquote><p>所有名称元素，包括第一个元素，都以大写字母开头，后跟小写字母，并且没有分隔符，例如：UpperCamelCase</p></blockquote></li></ul><p>使用举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JsonPropertyDescription"><a href="#JsonPropertyDescription" class="headerlink" title="@JsonPropertyDescription"></a><code>@JsonPropertyDescription</code></h2><blockquote><p>用于生成字段的描述信息</p></blockquote><p>例如，有下面一个实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyDescriptionBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@JsonPropertyDescription(&quot;This is a description of the name property&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以输出该类的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SchemaFactoryWrapper wrapper = <span class="keyword">new</span> SchemaFactoryWrapper();</span><br><span class="line">mapper.acceptJsonFormatVisitor(PropertyDescriptionBean.class, wrapper);</span><br><span class="line">JsonSchema jsonSchema = wrapper.finalSchema();</span><br><span class="line">String jsonString = mapper.writeValueAsString(jsonSchema);</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;urn:jsonschema:com:baeldung:jackson:annotation:extra:PropertyDescriptionBean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;This is a description of the name property&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line"> </span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JsonPOJOBuilder"><a href="#JsonPOJOBuilder" class="headerlink" title="@JsonPOJOBuilder"></a>@JsonPOJOBuilder</h2><blockquote><p>自定义生成器类，来控制json的反序列化行为</p></blockquote><p><code>@JsonPOJOBuilder</code>有两个属性：</p><ul><li><code>buildMethodName</code><blockquote><p>将JSON字段绑定到bean的属性后，用于实例化预期bean的无参构造的名称。默认名称为<code>build</code>。</p></blockquote></li><li><code>withPrefix</code><blockquote><p>用于自动检测JSON和bean属性之间匹配的名称前缀。默认前缀为<code>with</code>。</p></blockquote></li></ul><p>假设我们要反序列化的json如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;POJO Builder Bean&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的pojo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonDeserialize(builder = BeanBuilder.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POJOBuilderBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> identity;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// constructor, getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的生成器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonPOJOBuilder(buildMethodName = &quot;createBean&quot;, withPrefix = &quot;construct&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idValue;</span><br><span class="line">    <span class="keyword">private</span> String nameValue;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanBuilder <span class="title">constructId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        idValue = id;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanBuilder <span class="title">constructName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        nameValue = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> POJOBuilderBean <span class="title">createBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> POJOBuilderBean(idValue, nameValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>ObjectMapper</code>反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String jsonString = <span class="string">&quot;&#123;\&quot;id\&quot;:5,\&quot;name\&quot;:\&quot;POJO Builder Bean\&quot;&#125;&quot;</span>;</span><br><span class="line">POJOBuilderBean bean = mapper.readValue(jsonString, POJOBuilderBean.class);</span><br></pre></td></tr></table></figure><hr><p>👉 <a href="https://github.com/gcdd1993/Jackson-Guide-With-Samples">代码仓库</a><br>👉 <a href="https://www.baeldung.com/jackson">Jackson JSON Tutorial</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从事JAVA开发工作以来,一直都离不开Jackson的序列化反序列化,对于Jackson的使用也一直处于够用但不深入的状态，下面是日常使用过程中对Jackson的总结。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="jackson" scheme="https://gcdd1993.github.io/tags/jackson/"/>
    
  </entry>
  
  <entry>
    <title>后端跨域的N种方法</title>
    <link href="https://gcdd1993.github.io/p/34331/"/>
    <id>https://gcdd1993.github.io/p/34331/</id>
    <published>2019-01-21T11:11:31.000Z</published>
    <updated>2021-06-19T15:18:16.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单来说，CORS是一种访问机制，英文全称是Cross-Origin Resource Sharing，即我们常说的跨域资源共享，通过在服务器端设置响应头，把发起跨域的原始域名添加到Access-Control-Allow-Origin 即可。</p></blockquote><span id="more"></span><h1 id="返回新的CorsFilter-全局跨域"><a href="#返回新的CorsFilter-全局跨域" class="headerlink" title="返回新的CorsFilter(全局跨域)"></a>返回新的CorsFilter(全局跨域)</h1><blockquote><p>在任意配置类，返回一个新的CorsFilter Bean，并添加映射路径和具体的CORS配置信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.添加CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是否发送Cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始域(请求方式)</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始域(头部信息)</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//暴露哪些头部信息(因为跨域访问默认不能获取全部头部信息)</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.返回新的CorsFilter.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用注解-局部跨域"><a href="#使用注解-局部跨域" class="headerlink" title="使用注解(局部跨域)"></a>使用注解(局部跨域)</h1><h2 id="在方法上-RequestMapping-使用注解-CrossOrigin"><a href="#在方法上-RequestMapping-使用注解-CrossOrigin" class="headerlink" title="在方法上(@RequestMapping)使用注解 @CrossOrigin"></a>在方法上(@RequestMapping)使用注解 <code>@CrossOrigin</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CrossOrigin(&quot;http://localhost:8080&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在控制器-Controller-上使用注解-CrossOrigin"><a href="#在控制器-Controller-上使用注解-CrossOrigin" class="headerlink" title="在控制器(@Controller)上使用注解 @CrossOrigin"></a>在控制器(@Controller)上使用注解 <code>@CrossOrigin</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://domain.com&quot;, maxAge = 3600)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手工设置响应头-局部跨域"><a href="#手工设置响应头-局部跨域" class="headerlink" title="手工设置响应头(局部跨域)"></a>手工设置响应头(局部跨域)</h2><blockquote><p>使用HttpServletResponse对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为”*” ，表示全部放行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    response.addHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx配置跨域"><a href="#Nginx配置跨域" class="headerlink" title="Nginx配置跨域"></a>Nginx配置跨域</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream server &#123;</span><br><span class="line">        server 127.0.0.1:8091;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name domain.com;</span><br><span class="line"></span><br><span class="line">        location ^~/api &#123;</span><br><span class="line">                //添加跨域请求头</span><br><span class="line">                proxy_set_header Access-Control-Allow-Origin *;</span><br><span class="line">                proxy_set_header Access-Control-Allow-Methods *;</span><br><span class="line">                proxy_set_header Access-Control-Allow-Headers *;</span><br><span class="line"></span><br><span class="line">                if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                        return 204;</span><br><span class="line">                &#125;</span><br><span class="line">                rewrite ^/api/(.+?)$ /$1 break;</span><br><span class="line">                proxy_pass http://server;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简单来说，CORS是一种访问机制，英文全称是Cross-Origin Resource Sharing，即我们常说的跨域资源共享，通过在服务器端设置响应头，把发起跨域的原始域名添加到Access-Control-Allow-Origin 即可。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="跨域" scheme="https://gcdd1993.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>解决Spring Security自定义filter重复执行问题</title>
    <link href="https://gcdd1993.github.io/p/356/"/>
    <id>https://gcdd1993.github.io/p/356/</id>
    <published>2019-01-14T11:29:51.000Z</published>
    <updated>2021-06-19T15:18:16.380Z</updated>
    
    <content type="html"><![CDATA[<p>今天做项目的时候，发现每次拦截器日志都会打两遍，很纳闷，怀疑是Filter被执行了两遍。结果debug之后发现还真是！记录一下这个神奇的BUG！<span id="more"></span></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>项目中使用的是Spring-security作为权限框架，然后做了一个<code>JwtAuthenticationTokenFilter</code>作为拦截器拦截请求，校验Token，但是每次请求都会打两遍日志。下面是精简的源代码:</p><p>自定义的Filter类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">            FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//...省略</span></span><br><span class="line">        <span class="comment">//打出两遍日志的地方</span></span><br><span class="line">        log.info(<span class="string">&quot;User:&#123;&#125; request path:&#123;&#125;, method:&#123;&#125;, param:&#123;&#125;&quot;</span>, username, request.getServletPath(),</span><br><span class="line">                request.getMethod(), request.getParameterMap() == <span class="keyword">null</span> ? <span class="keyword">null</span> : OBJECT_MAPPER.writeValueAsString(request.getParameterMap()));</span><br><span class="line">        <span class="comment">//...省略</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebSecurityConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAuthenticationTokenFilter <span class="title">authenticationTokenFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtAuthenticationTokenFilter();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//...省略</span></span><br><span class="line">        <span class="comment">//把JwtAuthenticationTokenFilter加入到RememberMeAuthenticationFilter之前</span></span><br><span class="line">        httpSecurity.addFilterBefore(authenticationTokenFilterBean(), RememberMeAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求日志如下:</p><p><img data-src="https://i.loli.net/2019/01/14/5c3c75bd6e40b.png"></p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>把自定义Filter<code>JwtAuthenticationTokenFilter</code>的<code>@Component</code>取消掉就可以了，不让它被Spring容器管理。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在spring容器托管的OncePerRequestFilter的bean，都会自动加入到servlet的filter chain，而上面的定义，还额外把filter加入到了spring security的<br>ememberMeAuthenticationFilter之前。而spring security也是一系列的filter，在mvc的filter之前执行。因此在鉴权通过的情况下，就会先后各执行一次。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000012173419">解决spring security自定义filter重复执行问题</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天做项目的时候，发现每次拦截器日志都会打两遍，很纳闷，怀疑是Filter被执行了两遍。结果debug之后发现还真是！记录一下这个神奇的BUG！</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Spring-Security" scheme="https://gcdd1993.github.io/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud feign使用okhttp3</title>
    <link href="https://gcdd1993.github.io/p/7382/"/>
    <id>https://gcdd1993.github.io/p/7382/</id>
    <published>2019-01-13T16:13:04.000Z</published>
    <updated>2021-06-19T15:18:16.369Z</updated>
    
    <content type="html"><![CDATA[<p>spring cloud feign使用okhttp3<span id="more"></span></p><h1 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h1><p>maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">feign.httpclient.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">feign.okhttp.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(Feign.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(FeignAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignOkHttpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OkHttpLoggingInterceptor okHttpLoggingInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> okhttp3.<span class="function">OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> okhttp3.OkHttpClient.Builder()</span><br><span class="line">            .readTimeout(<span class="number">60</span>, TimeUnit.SECONDS) </span><br><span class="line">            .connectTimeout(<span class="number">60</span>, TimeUnit.SECONDS) </span><br><span class="line">            .writeTimeout(<span class="number">120</span>, TimeUnit.SECONDS) </span><br><span class="line">            .connectionPool(<span class="keyword">new</span> ConnectionPool())</span><br><span class="line">            <span class="comment">// .addInterceptor();</span></span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>不需要额外编写FeignOkHttpConfig，feign本身已经存在FeignOkHttpAutoConfiguration了，不需要额外配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;spring cloud feign使用okhttp3</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Spring-Cloud" scheme="https://gcdd1993.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Cloud微服务踩坑记录</title>
    <link href="https://gcdd1993.github.io/p/61811/"/>
    <id>https://gcdd1993.github.io/p/61811/</id>
    <published>2019-01-13T16:08:58.000Z</published>
    <updated>2021-06-19T15:18:16.374Z</updated>
    
    <content type="html"><![CDATA[<p>记录在开发微服务过程中遇到的问题以及解决方案。<span id="more"></span></p><h1 id="No-Feign-Client-for-loadBalancing-defined-Did-you-forget-to-include-spring-cloud-starter-netflix-ribbon"><a href="#No-Feign-Client-for-loadBalancing-defined-Did-you-forget-to-include-spring-cloud-starter-netflix-ribbon" class="headerlink" title="No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-netflix-ribbon?"></a>No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-netflix-ribbon?</h1><h1 id="feignclient和-requestmapping混用的时候出错"><a href="#feignclient和-requestmapping混用的时候出错" class="headerlink" title="@feignclient和@requestmapping混用的时候出错"></a>@feignclient和@requestmapping混用的时候出错</h1><p>重写springmvc扫描controller时不带有@feignclient才实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Feign.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcRegistrations <span class="title">feignWebRegistrations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcRegistrationsAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">getRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> FeignRequestMappingHandlerMapping();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignRequestMappingHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.isHandler(beanType) &amp;&amp;</span><br><span class="line">                    !AnnotatedElementUtils.hasAnnotation(beanType, FeignClient.class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringCloud使用Zuul出现“Forwarding-error”错误解决方法"><a href="#SpringCloud使用Zuul出现“Forwarding-error”错误解决方法" class="headerlink" title="SpringCloud使用Zuul出现“Forwarding error”错误解决方法"></a>SpringCloud使用Zuul出现“Forwarding error”错误解决方法</h1><p>在application.yml中添加ribbon的超时时间设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span>  </span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">    <span class="attr">host:</span></span><br><span class="line">        <span class="attr">connect-timeout-millis:</span> <span class="number">3000</span></span><br><span class="line">        <span class="attr">socket-timeout-millis:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">            <span class="attr">execution:</span></span><br><span class="line">                <span class="attr">isolation:</span></span><br><span class="line">                    <span class="attr">thread:</span></span><br><span class="line">                        <span class="attr">timeout-in-milliseconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录在开发微服务过程中遇到的问题以及解决方案。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Spring-Cloud" scheme="https://gcdd1993.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>我的JAVA环境搭建</title>
    <link href="https://gcdd1993.github.io/p/12106/"/>
    <id>https://gcdd1993.github.io/p/12106/</id>
    <published>2019-01-12T17:15:13.000Z</published>
    <updated>2021-06-19T15:18:16.377Z</updated>
    
    <content type="html"><![CDATA[<p>每次重装系统后的开发环境搭建，总是会花费大量的时间精力，软件下载安装啦，配置修改啦等等，索性把这些流程记录一下，毕竟时间就是金钱。<span id="more"></span></p><h1 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h1><ul><li>JDK1.8</li><li>IntelliJ IDEA</li><li>Navicat数据库管理工具</li><li>Postman</li><li>Git</li><li>SourceTree</li><li>XShell5</li><li>DevCenter(cassandra数据库管理工具)</li><li>RedisDesktopManager(redis管理工具)</li></ul><p>这些工具已经可以满足我的日常工作了，什么印象笔记，markdownPad2等等不包含于此。<br>这些都可以在我的博客下载到 -&gt; <a href="https://gcdd1993.github.io/2019/01/08/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E9%9B%86%E5%90%88/#more">常用软件集合</a></p><h1 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h1><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p><a href="http://idea.lanyus.com/">IntelliJ IDEA 注册码</a></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>当然是选黑色主题了，毕竟提倡保护眼睛。</p><p><img data-src="https://i.imgur.com/wyJ25mS.png"></p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>我一般使用默认字体+14号大小。</p><p><img data-src="https://i.imgur.com/4gl570N.png"></p><h3 id="设置编辑器的快捷键，也就是keymap"><a href="#设置编辑器的快捷键，也就是keymap" class="headerlink" title="设置编辑器的快捷键，也就是keymap"></a>设置编辑器的快捷键，也就是keymap</h3><p>由于以前用惯了Eclipse,所以还得改为Eclipse的快捷键</p><p><img data-src="https://i.imgur.com/GokNm9o.png"></p><h3 id="代码自动提示不区分大小写"><a href="#代码自动提示不区分大小写" class="headerlink" title="代码自动提示不区分大小写"></a>代码自动提示不区分大小写</h3><p>这个比较重要，毕竟谁也不可能无时无刻注意大小写，到时候不快捷提示就浪费太多时间了，也影响开发体验。</p><p><img data-src="https://i.loli.net/2019/01/13/5c3a2d475bb3b.png"></p><h3 id="自动导入包和导入包优化的设置"><a href="#自动导入包和导入包优化的设置" class="headerlink" title="自动导入包和导入包优化的设置"></a>自动导入包和导入包优化的设置</h3><p><img data-src="https://i.loli.net/2019/01/13/5c3a2d473806d.png"></p><h3 id="Java代码默认注释"><a href="#Java代码默认注释" class="headerlink" title="Java代码默认注释"></a>Java代码默认注释</h3><p>一般创建一个java类的时候，需要指定创建者以及创建时间</p><p><img data-src="https://i.loli.net/2019/01/13/5c3a2d473b94e.png"></p><p>注释代码可以自己决定，这里举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> $&#123;DATE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p> 然后创建的类是这样的:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaochen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="IntelliJ-IDEA启动设置不默认打开前一个项目"><a href="#IntelliJ-IDEA启动设置不默认打开前一个项目" class="headerlink" title="IntelliJ IDEA启动设置不默认打开前一个项目"></a>IntelliJ IDEA启动设置不默认打开前一个项目</h3><p> <img data-src="https://i.loli.net/2019/01/14/5c3be5127420c.png"></p><h3 id="IntelliJ-IDEA常用插件"><a href="#IntelliJ-IDEA常用插件" class="headerlink" title="IntelliJ IDEA常用插件"></a>IntelliJ IDEA常用插件</h3><ul><li>.ignore:自动生成.ignore文件，并支持一键添加文件到.ignore列表</li><li>Grep Console:在控制台支持筛选，类似shell命令的cat 1.txt | grep ‘11’</li><li>Lombok plugin:使用lombok必须要装的一个插件</li><li>CodeGlance:代码编辑区迷你缩放图插件，非常好用</li><li>HighlightBracketPair:自动化高亮显示光标所在代码块对应的括号，可以定制颜色和形状，再也不怕看代码看到眼花了</li><li>Rainbow Brackets:彩色显示所有括号,有点类似上一个</li><li>Alibaba Java Coding Guidelines:阿里巴巴Java开发手册配套插件，一键扫描帮你优化代码。</li><li>Codota：让代码提示更加智能（只支持Java）</li></ul><h2 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h2><h3 id="破解-1"><a href="#破解-1" class="headerlink" title="破解"></a>破解</h3><p><a href="https://www.jianshu.com/p/42a33b0dda9c">Navicat Premium 12.0.18 / 12.0.24安装与激活</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://segmentfault.com/a/1190000013504412">Intellij IDEA插件推荐</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次重装系统后的开发环境搭建，总是会花费大量的时间精力，软件下载安装啦，配置修改啦等等，索性把这些流程记录一下，毕竟时间就是金钱。</summary>
    
    
    
    <category term="工具" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java" scheme="https://gcdd1993.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>EntityManager的Clear方法的使用</title>
    <link href="https://gcdd1993.github.io/p/12153/"/>
    <id>https://gcdd1993.github.io/p/12153/</id>
    <published>2019-01-11T14:37:28.000Z</published>
    <updated>2021-06-19T15:18:16.364Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中，如果使用hibernate的话，常常会被hibernate的事务搞得焦头烂额。今天解决了之前项目中一直存在的问题，记录一下。<span id="more"></span></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>有一张表TemplateCopy,如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateCopy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;template&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;SubDomainWeightsCopy&gt; subDomainWeights;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;template&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;QuestionWeightsCopy&gt; questionWeights;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联了两张表:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubDomainWeightsCopy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;template_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> TemplateCopy template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;sub_domain_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> SubDomainCopy subDomain;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal weights; <span class="comment">//权重</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal score;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RelationId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer template;</span><br><span class="line">        <span class="keyword">private</span> Integer subDomain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuestionWeightsCopy</span> <span class="keyword">implements</span> <span class="title">IWeightsValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;template_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> TemplateCopy template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;question_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> QuestionCopy question;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal weights;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal score;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RelationId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer template;</span><br><span class="line">        <span class="keyword">private</span> Integer question;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的看一下，TemplateCopy中有一堆SubDomainWeightsCopy，和一堆QuestionWeightsCopy，我们在保存TemplateCopy的时候，通常按照如下来保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> templateCopy = save(TemplateCopy)</span><br><span class="line"><span class="number">2.</span> QuestionWeightsCopy.setTemplateCopy(templateCopy)</span><br><span class="line"><span class="number">3.</span> save(QuestionWeightsCopy)</span><br><span class="line"><span class="number">4.</span> SubDomainWeightsCopy.setTemplateCopy(templateCopy)</span><br><span class="line"><span class="number">5.</span> save(SubDomainWeightsCopy)</span><br></pre></td></tr></table></figure><p>到这就好了，数据库已经保存了关联关系。但是，这时候如果返回save好的templateCopy，subDomainWeights和questionWeights将会是null。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="使用EntityManager的clear方法"><a href="#使用EntityManager的clear方法" class="headerlink" title="使用EntityManager的clear方法"></a>使用EntityManager的clear方法</h2><ol><li>保存完毕后，执行entityManager.clear();</li><li>然后再次查询该对象，即可完整返回该对象。</li></ol><h3 id="EntityManager-clear的作用？"><a href="#EntityManager-clear的作用？" class="headerlink" title="EntityManager clear的作用？"></a>EntityManager clear的作用？</h3><p>EntityManager clear方法会清空其关联的缓存，从而强制在事务中稍后执行新的数据库查询。</p><h3 id="什么时候使用EntityManager-clear"><a href="#什么时候使用EntityManager-clear" class="headerlink" title="什么时候使用EntityManager clear"></a>什么时候使用EntityManager clear</h3><ol><li>在进行批处理时，为了避免巨大的缓存占用内存并因长时间的脏检查而增加刷新的时间</li><li>在进行DML或SQL查询时，它将完全绕过实体管理器缓存。在这种情况下，由于缓存，将不会实际去数据库查，会直接将缓存返回。所以造成了数据库已经保存了，但是查出来还是未保存的状态。这时候需要清除缓存以避免这种不一致。(本案例就是这种情况的实际例子)</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://stackoverflow.com/questions/13886608/when-to-use-entitymanager-clear" title="StackOverFlow大神回答">StackOverFlow大神回答</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在日常开发中，如果使用hibernate的话，常常会被hibernate的事务搞得焦头烂额。今天解决了之前项目中一直存在的问题，记录一下。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Spring" scheme="https://gcdd1993.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Postman使用技巧</title>
    <link href="https://gcdd1993.github.io/p/4537/"/>
    <id>https://gcdd1993.github.io/p/4537/</id>
    <published>2019-01-11T06:13:35.000Z</published>
    <updated>2021-06-19T15:18:16.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Postman是什么"><a href="#Postman是什么" class="headerlink" title="Postman是什么"></a>Postman是什么</h1><p>Postman是chrome的一款插件,用于做接口请求测试,无论是前端,后台还是测试人员,都可以用postman来测试接口,用起来非常方便。<span id="more"></span></p><h1 id="Postman安装"><a href="#Postman安装" class="headerlink" title="Postman安装"></a>Postman安装</h1><h2 id="官网下载-翻墙"><a href="#官网下载-翻墙" class="headerlink" title="官网下载(翻墙)"></a>官网下载(翻墙)</h2><p><a href="https://www.getpostman.com/downloads/">https://www.getpostman.com/downloads/</a></p><h2 id="蓝奏云"><a href="#蓝奏云" class="headerlink" title="蓝奏云"></a>蓝奏云</h2><p><a href="https://www.lanzous.com/i2en5xc">https://www.lanzous.com/i2en5xc</a></p><h1 id="Postman常用功能"><a href="#Postman常用功能" class="headerlink" title="Postman常用功能"></a>Postman常用功能</h1><p>安装好之后，我们先打开Postman，可以看到界面分成左右两个部分，右边是我们后头要讲的collection，左边是现在要讲的request builder。在request builder中，我们可以通过Postman快速的随意组装出我们希望的request。一般来说，所有的HTTP Request都分成4个部分，URL, method, headers和body。而Postman针对这几部分都有针对性的工具。</p><p><img data-src="https://i.imgur.com/JHqfDbU.png"></p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>要组装一条Request, URL永远是你首先要填的内容，在Postman里面你曾输入过的URL是可以通过下拉自动补全的哦。如果你点击Params按钮，Postman会弹出一个键值编辑器，你可以在哪里输入URL的Parameter，Postman会帮你自动加入到URL当中，反之，如果你的URL当中已经有了参数，那Postman会在你打开键值编辑器的时候把参数自动载入</p><p><img data-src="https://i.imgur.com/OyiHdls.png"></p><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><p>点击’Headers’按钮，Postman同样会弹出一个键值编辑器。在这里，你可以随意添加你想要的Header attribute，同样Postman为我们通过了很贴心的auto-complete功能，敲入一个字母，你可以从下拉菜单里选择你想要的标准atrribute</p><p><img data-src="https://i.imgur.com/N0KHlcZ.png"></p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>要选择Request的Method是很简单的，Postman支持所有的Method，而一旦你选择了Method，Postman的request body编辑器会根据的你选择，自动的发生改变。</p><p><img data-src="https://i.imgur.com/vJl711X.png"></p><h2 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h2><p>如果我们要创建的request是类似于POST，那我们就需要编辑Request Body，Postman根据body type的不同，提供了4中编辑方式：</p><ul><li>form-data</li><li>x-www-form-urlencoded</li><li>raw</li><li>binary</li></ul><p><img data-src="https://i.imgur.com/dgaY012.png"></p><p>（我们这里是可以传文件的哦）</p><h1 id="postman高级用法"><a href="#postman高级用法" class="headerlink" title="postman高级用法"></a>postman高级用法</h1><h2 id="colletions-接口集合"><a href="#colletions-接口集合" class="headerlink" title="colletions(接口集合)"></a>colletions(接口集合)</h2><p>在开发过程中，可能会遇到多项目同时开发维护的情况，Postman友好的提供了colletions功能，类似与项目文件夹一样，可以把归属于同一类的接口分类到一起，便于管理维护。</p><ol><li>点击NEW -&gt; 选择collection，创建一个项目空间。</li></ol><p><img data-src="https://i.imgur.com/RcYq3Ba.png"></p><ol start="2"><li>输入项目名称，点击create。</li></ol><p><img data-src="https://i.imgur.com/zGFYC1F.png"></p><h2 id="colletions-folder-集合中的文件夹"><a href="#colletions-folder-集合中的文件夹" class="headerlink" title="colletions folder(集合中的文件夹)"></a>colletions folder(集合中的文件夹)</h2><p>每个项目会有多个接口，有些是一类功能，例如，用户管理接口，文章列表接口，Postman提供folder目录来进行细致的分类。</p><ol><li>选择一个项目，点击Add Folder</li></ol><p><img data-src="https://i.imgur.com/v2qY1uW.png"></p><ol start="2"><li>输入目录名称，点击create</li></ol><p><img data-src="https://i.imgur.com/exymkyT.png"></p><p>每个接口都可以归类到某个项目，或某个项目的子目录中。</p><p><img data-src="https://i.imgur.com/pRltLVX.png"></p><h2 id="Environment-环境变量"><a href="#Environment-环境变量" class="headerlink" title="Environment(环境变量)"></a>Environment(环境变量)</h2><p>Postman允许定义自己的环境变量（Environment），最常见的是将测试 URL 进行定义成变量的形式，这样随着你的域名怎么变，URL 就不用变更，非常方便。除此之外，也可以将一些敏感的测试值定义为环境变量，比如密码。接下来，来看下怎么新建一组环境变量，如下操作打开环境变量的管理入口：</p><p><img data-src="https://i.imgur.com/G8b6kTl.png"></p><p>打开管理环境变量的窗口，输入名称，添加一组键值对，如下图所示：</p><p><img data-src="https://i.imgur.com/5oJhjWe.png"></p><p>环境变量要以双大括号的方式来引用，可以在右上方下拉框处选择相应的环境变量，我们实测一下刚才添加的Url的变量：</p><p><img data-src="https://i.imgur.com/FAc6qME.png"></p><h2 id="通过脚本设置变量"><a href="#通过脚本设置变量" class="headerlink" title="通过脚本设置变量"></a>通过脚本设置变量</h2><p>Postman允许用户自定义脚本，并提供了两种类型的脚本：</p><ul><li>Pre-request Script：执行request请求前先运行，可以在里面预先设置些所需变量</li><li>Tests：request返回后执行的,可以对返回信息进行提取过滤，或者执行一些验证操作</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>获取如下返回信息中的user_id值:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设服务端返回的Body内容如下:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;token&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;user_id&quot;</span>: <span class="string">&quot;2079876912&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;26A90E317DBC1AD363B2E2CE53F76F2DD85CB172DF7D813099477BAACB69DC49C794BAECEDC68331&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;expires_at&quot;</span>: <span class="string">&quot;2016-06-22T12:46:51.637+0800&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;26A90E317DBC1AD3CD1556CF2B3923DD60AEBADDCBC1D9D899262A55D15273F735E407A6BEC56B84&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mac_key&quot;</span>: <span class="string">&quot;4FAhd4OpfC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mac_algorithm&quot;</span>: <span class="string">&quot;hmac-sha-256&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server_time&quot;</span>: <span class="string">&quot;2016-06-15T12:46:51.649+0800&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Tests中对user_id值进行提取并赋值成全局变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 判断是否存在<span class="string">&#x27;user_id&#x27;</span>值</span><br><span class="line">tests[<span class="string">&quot;Body contains user_id&quot;</span>] = responseBody.has(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(tests[<span class="string">&quot;Body contains user_id&quot;</span>])&#123;</span><br><span class="line">    // 将返回信息解析成对象</span><br><span class="line">    var responseData = JSON.parse(responseBody);</span><br><span class="line">    tests[<span class="string">&quot;value_user_id&quot;</span>]=responseData.token.user_id</span><br><span class="line">    // 设置全局变量</span><br><span class="line">    postman.setGlobalVariable(<span class="string">&quot;user_id&quot;</span>,tests[<span class="string">&quot;value_user_id&quot;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    postman.setGlobalVariable(<span class="string">&quot;user_id&quot;</span>,<span class="string">&quot;默认user_id&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h1><h2 id="项目接口分类管理"><a href="#项目接口分类管理" class="headerlink" title="项目接口分类管理"></a>项目接口分类管理</h2><p><img data-src="https://i.imgur.com/LXxBYdq.png"></p><h2 id="登录获取token并设置为全局变量"><a href="#登录获取token并设置为全局变量" class="headerlink" title="登录获取token并设置为全局变量"></a>登录获取token并设置为全局变量</h2><p><img data-src="https://i.imgur.com/gIXLd5c.png"></p><h2 id="接口使用登录后的token"><a href="#接口使用登录后的token" class="headerlink" title="接口使用登录后的token"></a>接口使用登录后的token</h2><p><img data-src="https://i.imgur.com/1RCOliR.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Postman是什么&quot;&gt;&lt;a href=&quot;#Postman是什么&quot; class=&quot;headerlink&quot; title=&quot;Postman是什么&quot;&gt;&lt;/a&gt;Postman是什么&lt;/h1&gt;&lt;p&gt;Postman是chrome的一款插件,用于做接口请求测试,无论是前端,后台还是测试人员,都可以用postman来测试接口,用起来非常方便。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="工具技巧" scheme="https://gcdd1993.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性一览表</title>
    <link href="https://gcdd1993.github.io/p/55630/"/>
    <id>https://gcdd1993.github.io/p/55630/</id>
    <published>2019-01-09T12:16:58.000Z</published>
    <updated>2021-06-19T15:18:16.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul><li>forEach() method in Iterable interface(Iterable接口中的forEach()方法)</li><li>default and static methods in Interfaces(接口中的默认和静态方法)</li><li>Functional Interfaces and Lambda Expressions(function接口和Lambda表达式)</li><li>Java Stream API for Bulk Data Operations on Collections(用于集合上的批量数据操作的Java Stream API)</li><li>Java Time API</li><li>Collection API improvements</li><li>Concurrency API improvements</li><li>Java IO improvements</li></ul><span id="more"></span><h1 id="1-forEach-method-in-Iterable-interface-Iterable接口中的forEach-方法"><a href="#1-forEach-method-in-Iterable-interface-Iterable接口中的forEach-方法" class="headerlink" title="1.forEach() method in Iterable interface(Iterable接口中的forEach()方法)"></a>1.forEach() method in Iterable interface(Iterable接口中的forEach()方法)</h1><p>每当我们需要遍历Collection时，我们需要创建一个Iterator，其目的是迭代，然后我们在循环中为Collection中的每个元素提供业务逻辑。如果没有正确使用迭代器，会抛出异常ConcurrentModificationException。</p><p>Java 8在java.lang.Iterable接口中引入了forEach方法，这样在编写代码时我们只关注业务逻辑。 forEach方法将java.util.function.Consumer对象作为参数，因此它有助于将我们的业务逻辑放在我们可以重用的单独位置。让我们通过简单的例子看看每个用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">List&lt;IntegermyList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) myList.add(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用iterator</span></span><br><span class="line">Iterator&lt;Integeriterator = myList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Integer next = iterator.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;Iterator Value::&quot;</span> + next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//foreach + 匿名类</span></span><br><span class="line">myList.forEach(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer t)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;forEach anonymous class Value::&quot;</span>+t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用consumer 接口</span></span><br><span class="line">MyConsumer action = <span class="keyword">new</span> MyConsumer();</span><br><span class="line">myList.forEach(action);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用lambda表达式</span></span><br><span class="line">myList.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="2-default-and-static-methods-in-Interfaces-接口中的默认和静态方法"><a href="#2-default-and-static-methods-in-Interfaces-接口中的默认和静态方法" class="headerlink" title="2.default and static methods in Interfaces(接口中的默认和静态方法)"></a>2.default and static methods in Interfaces(接口中的默认和静态方法)</h1><p>jdk8之前，interface方法不能有实现，但是从Java 8开始，接口被增强为具有实现方法。我们可以使用default和static关键字来创建具有方法实现的接口。例如Iterable接口中的forEach方法实现是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Taction)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">        action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>创建一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建该接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是实现方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认方法支持重写,不覆盖则执行接口的默认方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我覆盖了接口的默认方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法不可以重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line">        myClass.show();</span><br><span class="line">        myClass.showA();</span><br><span class="line">        <span class="comment">//通过类名.方法名调用接口静态方法</span></span><br><span class="line">        MyInterface.showB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Functional-Interfaces-and-Lambda-Expressions（function接口和Lambda表达式）"><a href="#3-Functional-Interfaces-and-Lambda-Expressions（function接口和Lambda表达式）" class="headerlink" title="3.Functional Interfaces and Lambda Expressions（function接口和Lambda表达式）"></a>3.Functional Interfaces and Lambda Expressions（function接口和Lambda表达式）</h1><p>如果你注意到上面的接口代码，你会注意到@FunctionalInterface注释。功能接口是Java 8中引入的新概念。<strong>只有一个抽象方法的接口就变成了功能接口</strong>。我们不需要使用@FunctionalInterface注释将接口标记为功能接口。 @FunctionalInterface注释是一种避免在功能界面中意外添加抽象方法的工具。您可以将其视为@Override注释，并且最佳实践是使用它。实例：java8 的runnable run接口，带有一个抽象方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能接口的主要好处之一是可以使用lambda表达式来实例化它们。我们可以使用匿名类实例化一个接口，但代码看起来很笨重。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用匿名类实例化</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于功能接口只有一个方法，因此lambda表达式可以很容易地提供方法实现。我们只需要提供方法参数和业务逻辑。例如，我们可以使用lambda表达式将上面的实现编写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用lambda表达式</span></span><br><span class="line">Runnable runnable1 = () -System.out.println(<span class="string">&quot;My Runnable&quot;</span>);</span><br><span class="line">runnable.run();</span><br><span class="line">runnable1.run();</span><br></pre></td></tr></table></figure><p>如果在方法实现中有单个语句，我们也不需要花括号。例如，上面的Interface1匿名类可以使用lambda实例化，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Interface1 interface1 = (s) -System.out.println(s);</span><br><span class="line">interface1.method1(<span class="string">&quot;interface1 method&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="lambda表达式扩展"><a href="#lambda表达式扩展" class="headerlink" title="lambda表达式扩展"></a>lambda表达式扩展</h2><h3 id="Java-中的-Lambda-表达式通常使用-argument-body-语法书写，例如："><a href="#Java-中的-Lambda-表达式通常使用-argument-body-语法书写，例如：" class="headerlink" title="Java 中的 Lambda 表达式通常使用 (argument) -(body) 语法书写，例如："></a>Java 中的 Lambda 表达式通常使用 (argument) -(body) 语法书写，例如：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(arg1, arg2...) -&gt; &#123; body &#125;</span><br><span class="line">(type1 arg1, type2 arg2...) -&gt; &#123; body &#125;</span><br></pre></td></tr></table></figure><h3 id="Lambda-表达式的结构"><a href="#Lambda-表达式的结构" class="headerlink" title="Lambda 表达式的结构"></a>Lambda 表达式的结构</h3><ul><li>一个Lambda表达式可以有零个或多个参数</li><li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：<code>(int a)</code>与<code>(a)</code>效果相同</li><li>所有参数需包含在圆括号内，参数之间用逗号相隔。例如：<code>(a, b)</code> 或 <code>(int a, int b)</code> 或 <code>(String a, int b, float c)</code></li><li>空圆括号代表参数集为空。例如：<code>() -&gt; 42</code></li><li>当只有一个参数，且其类型可推导时，圆括号（）可省略。例如：<code>a -&gt; return a * a</code></li><li>Lambda表达式的主体可包含零条或多条语句</li><li>如果Lambda表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致</li><li>如果Lambda表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li></ul><h2 id="函数式接口扩展"><a href="#函数式接口扩展" class="headerlink" title="函数式接口扩展"></a>函数式接口扩展</h2><p>函数式接口是只包含一个抽象方法声明的接口,可以使用<code>@FunctionalInterface</code>标记</p><h3 id="JDK8之前已有的函数式接口"><a href="#JDK8之前已有的函数式接口" class="headerlink" title="JDK8之前已有的函数式接口"></a>JDK8之前已有的函数式接口</h3><ul><li>java.lang.Runnable</li><li>java.util.concurrent.Callable</li><li>java.security.PrivilegedAction</li><li>java.util.Comparator</li><li>java.io.FileFilter</li><li>java.nio.file.PathMatcher</li><li>java.lang.reflect.InvocationHandler</li><li>java.beans.PropertyChangeListener</li><li>java.awt.event.ActionListener</li><li>javax.swing.event.ChangeListener</li></ul><h3 id="新定义的函数式接口"><a href="#新定义的函数式接口" class="headerlink" title="新定义的函数式接口"></a>新定义的函数式接口</h3><p>java.util.function中定义了几组类型的函数式接口以及针对基本数据类型的子接口。</p><ul><li>Predicate:传入一个参数，返回一个bool结果，方法为boolean test(T t)</li><li>Consumer:传入一个参数，无返回值，纯消费。方法为void accept(T t)</li><li>Function:传入一个参数，返回一个结果，方法为R apply(T t)</li><li>Supplier:无参数传入，返回一个结果，方法为T get()</li><li>UnaryOperator:一元操作符，继承Function,传入参数的类型和返回类型相同。</li><li>BinaryOperator:二元操作符，传入的两个参数的类型和返回类型相同，继承BiFunction。</li></ul><p>【示例】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; predicate = (i) -&gt; i &gt; <span class="number">0</span>;</span><br><span class="line">Consumer&lt;Integer&gt; consumer = (i) -&gt; System.out.println(<span class="string">&quot;consumer : &quot;</span> + i);</span><br><span class="line">Function&lt;Integer,Boolean&gt; function = (i) -&gt; i &gt; <span class="number">0</span>;</span><br><span class="line">Supplier&lt;Integer&gt; supplier = () -&gt; <span class="number">1</span>;</span><br><span class="line">UnaryOperator&lt;Integer&gt; unaryOperator = (i) -&gt; i * i;</span><br><span class="line">BinaryOperator&lt;Integer&gt; binaryOperator = (i1,i2) -&gt; i1 * i2;</span><br><span class="line"></span><br><span class="line">System.out.println(predicate.test(<span class="number">10</span>));</span><br><span class="line">consumer.accept(<span class="number">10</span>);</span><br><span class="line">System.out.println(function.apply(<span class="number">10</span>));</span><br><span class="line">System.out.println(supplier.get());</span><br><span class="line">System.out.println(unaryOperator.apply(<span class="number">100</span>));</span><br><span class="line">System.out.println(binaryOperator.apply(<span class="number">100</span>,<span class="number">200</span>));</span><br></pre></td></tr></table></figure><h1 id="4-Java-Stream-API-for-Bulk-Data-Operations-on-Collections-用于集合上的批量数据操作的Java-Stream-API"><a href="#4-Java-Stream-API-for-Bulk-Data-Operations-on-Collections-用于集合上的批量数据操作的Java-Stream-API" class="headerlink" title="4.Java Stream API for Bulk Data Operations on Collections(用于集合上的批量数据操作的Java Stream API)"></a>4.Java Stream API for Bulk Data Operations on Collections(用于集合上的批量数据操作的Java Stream API)</h1><h2 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 Collection 和数组</span></span><br><span class="line">List&lt;Integerlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">Stream&lt;Integerstream = list.stream(); <span class="comment">//串行流</span></span><br><span class="line">Stream&lt;Integerstream1 = list.parallelStream(); <span class="comment">//并行流</span></span><br><span class="line">Stream&lt;Integerstream2 = Arrays.stream(list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]));</span><br><span class="line">Stream&lt;Integerstream3 = Stream.of(list.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">//从 BufferedReader</span></span><br><span class="line">BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">&quot;path&quot;</span>)));</span><br><span class="line">Stream&lt;Stringstream4 = bufferedReader.lines();</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态工厂</span></span><br><span class="line">IntStream stream5 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">100</span>);<span class="comment">//生成1-100 的int stream</span></span><br><span class="line">Stream&lt;Pathstream6 = Files.walk(Paths.get(<span class="string">&quot;path&quot;</span>), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自己构建 通过StreamSupport辅助类从spliterator产生流</span></span><br><span class="line">Stream&lt;Integerstream7 = StreamSupport.stream(list.spliterator(), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//其它</span></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">IntStream stream8 = random.ints();</span><br><span class="line"></span><br><span class="line">BitSet bitSet = BitSet.valueOf(<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>&#125;);</span><br><span class="line">IntStream stream9 = bitSet.stream();</span><br><span class="line"></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">Stream&lt;Stringstream10 = pattern.splitAsStream(<span class="string">&quot;111sda123sda&quot;</span>);</span><br><span class="line"></span><br><span class="line">JarFile jarFile = <span class="keyword">new</span> JarFile(<span class="string">&quot;xxx.jar&quot;</span>);</span><br><span class="line">Stream&lt;JarEntrystream11 = jarFile.stream();</span><br></pre></td></tr></table></figure><h1 id="5-Java-Time-API-Java时间API"><a href="#5-Java-Time-API-Java时间API" class="headerlink" title="5.Java Time API(Java时间API)"></a>5.Java Time API(Java时间API)</h1><p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。对日期与时间的操作一直是Java程序员最痛苦的地方之一。标准的 java.util.Date以及后来的java.util.Calendar一点没有改善这种情况（可以这么说，它们一定程度上更加复杂）。</p><h2 id="Clock类"><a href="#Clock类" class="headerlink" title="Clock类"></a>Clock类</h2><p>它通过指定一个时区，然后就可以获取到当前的时刻，日期与时间。Clock可以替换System.currentTimeMillis()与TimeZone.getDefault()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the system clock as UTC offset </span></span><br><span class="line"><span class="keyword">final</span> Clock clock = Clock.systemUTC();</span><br><span class="line">System.out.println(clock.instant());</span><br><span class="line">System.out.println(clock.millis());</span><br></pre></td></tr></table></figure><p>下面是程序在控制台上的输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09T14:<span class="number">52</span>:<span class="number">50.</span>111Z</span><br><span class="line"><span class="number">1547045570335</span></span><br></pre></td></tr></table></figure><h2 id="LocaleDate与LocalTime"><a href="#LocaleDate与LocalTime" class="headerlink" title="LocaleDate与LocalTime"></a>LocaleDate与LocalTime</h2><p>LocaleDate只持有ISO-8601格式且无时区信息的日期部分。相应的，LocaleTime只持有ISO-8601格式且无时区信息的时间部分。LocaleDate与LocalTime都可以从Clock中得到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the local date and local time</span></span><br><span class="line"><span class="keyword">final</span> LocalDate date = LocalDate.now();</span><br><span class="line"><span class="keyword">final</span> LocalDate dateFromClock = LocalDate.now(clock);</span><br><span class="line"></span><br><span class="line">System.out.println(date);</span><br><span class="line">System.out.println(dateFromClock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the local date and local time</span></span><br><span class="line"><span class="keyword">final</span> LocalTime time = LocalTime.now();</span><br><span class="line"><span class="keyword">final</span> LocalTime timeFromClock = LocalTime.now(clock);</span><br><span class="line"></span><br><span class="line">System.out.println(time);</span><br><span class="line">System.out.println(timeFromClock);</span><br></pre></td></tr></table></figure><p>下面是程序在控制台上的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09</span><br><span class="line"><span class="number">22</span>:<span class="number">52</span>:<span class="number">50.383</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">50.383</span></span><br></pre></td></tr></table></figure><h2 id="LocaleDateTime"><a href="#LocaleDateTime" class="headerlink" title="LocaleDateTime"></a>LocaleDateTime</h2><p>LocaleDateTime把LocaleDate与LocaleTime的功能合并起来，它持有的是ISO-8601格式无时区信息的日期与时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the local date/time</span></span><br><span class="line"><span class="keyword">final</span> LocalDateTime datetime = LocalDateTime.now();</span><br><span class="line"><span class="keyword">final</span> LocalDateTime datetimeFromClock = LocalDateTime.now(clock);</span><br><span class="line"></span><br><span class="line">System.out.println(datetime);</span><br><span class="line">System.out.println(datetimeFromClock);</span><br></pre></td></tr></table></figure><p>下面是程序在控制台上的输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09T22:<span class="number">55</span>:<span class="number">05.194</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09T14:<span class="number">55</span>:<span class="number">05.194</span></span><br></pre></td></tr></table></figure><h2 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h2><p>如果你需要特定时区的日期/时间，那么ZonedDateTime是你的选择。它持有ISO-8601格式具具有时区信息的日期与时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the zoned date/time</span></span><br><span class="line"><span class="keyword">final</span> ZonedDateTime zonedDatetime = ZonedDateTime.now();</span><br><span class="line"><span class="keyword">final</span> ZonedDateTime zonedDatetimeFromClock = ZonedDateTime.now(clock);</span><br><span class="line"><span class="keyword">final</span> ZonedDateTime zonedDatetimeFromZone = ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/Los_Angeles&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(zonedDatetime);</span><br><span class="line">System.out.println(zonedDatetimeFromClock);</span><br><span class="line">System.out.println(zonedDatetimeFromZone);</span><br></pre></td></tr></table></figure><p>下面是程序在控制台上的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09T22:<span class="number">56</span>:<span class="number">34.033</span>+08:<span class="number">00</span>[Asia/Shanghai]</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09T14:<span class="number">56</span>:<span class="number">34.</span>033Z</span><br><span class="line"><span class="number">2019</span>-<span class="number">01</span>-09T06:<span class="number">56</span>:<span class="number">34.035</span>-08:<span class="number">00</span>[America/Los_Angeles]</span><br></pre></td></tr></table></figure><h2 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h2><p>在秒与纳秒级别上的一段时间。Duration使计算两个日期间的不同变的十分简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get duration between two dates</span></span><br><span class="line"><span class="keyword">final</span> LocalDateTime from = LocalDateTime.of(<span class="number">2018</span>, Month.APRIL, <span class="number">16</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">final</span> LocalDateTime to = LocalDateTime.of(<span class="number">2019</span>, Month.APRIL, <span class="number">16</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Duration duration = Duration.between(from, to);</span><br><span class="line">System.out.println(<span class="string">&quot;Duration in days: &quot;</span> + duration.toDays());</span><br><span class="line">System.out.println(<span class="string">&quot;Duration in hours: &quot;</span> + duration.toHours());</span><br></pre></td></tr></table></figure><p>上面的例子计算了两个日期2018年4月16号与2019年4月16号之间的过程。下面是程序在控制台上的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Duration in days: <span class="number">365</span></span><br><span class="line">Duration in hours: <span class="number">8783</span></span><br></pre></td></tr></table></figure><h1 id="Collection-API-improvements-集合API改进"><a href="#Collection-API-improvements-集合API改进" class="headerlink" title="Collection API improvements(集合API改进)"></a>Collection API improvements(集合API改进)</h1><p>上面已经展示了forEach()方法和Stream API在集合上的使用。java8的Collection API中添加了一些新方法：</p><h2 id="Iterator-default-method-forEachRemaining-Consumer-action"><a href="#Iterator-default-method-forEachRemaining-Consumer-action" class="headerlink" title="Iterator default method forEachRemaining(Consumer action)"></a>Iterator default method forEachRemaining(Consumer action)</h2><p>为每个元素执行给定操作，直到所有元素都已处理或操作引发异常。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line"><span class="comment">//传入一个非空消费者</span></span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line"><span class="comment">//遍历执行消费者函数</span></span><br><span class="line">    <span class="keyword">while</span> (hasNext())</span><br><span class="line">        action.accept(next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="comment">//创建一个消费者</span></span><br><span class="line">Consumer&lt;Integer&gt; consumer = i -&gt; System.out.println(<span class="string">&quot;consumer print &quot;</span> + i);</span><br><span class="line"><span class="comment">//iterator的forEachRemaining将集合中的每个元素消费</span></span><br><span class="line">iterator.forEachRemaining(consumer);</span><br></pre></td></tr></table></figure><h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">consumer print <span class="number">1</span></span><br><span class="line">consumer print <span class="number">2</span></span><br><span class="line">consumer print <span class="number">3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Collection-default-method-removeIf-Predicate-filter"><a href="#Collection-default-method-removeIf-Predicate-filter" class="headerlink" title="Collection default method removeIf(Predicate filter)"></a>Collection default method removeIf(Predicate filter)</h2><p>删除满足给定条件的此集合的所有元素。</p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line"><span class="comment">//传入一个非空谓语</span></span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">    <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line"><span class="comment">//遍历元素，执行谓语的校验，如果为真，则删除该元素</span></span><br><span class="line">        <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">            each.remove();</span><br><span class="line">            removed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Predicate&lt;Integer&gt; predicate = i -&gt; i &gt; <span class="number">1</span>;</span><br><span class="line">list.removeIf(predicate);</span><br><span class="line">System.out.println(<span class="string">&quot;remove if left items : &quot;</span> + list);</span><br></pre></td></tr></table></figure><h3 id="控制台输出-1"><a href="#控制台输出-1" class="headerlink" title="控制台输出"></a>控制台输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2,3,4满足条件被删除了</span></span><br><span class="line">remove <span class="keyword">if</span> left items : [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="Collection-spliterator"><a href="#Collection-spliterator" class="headerlink" title="Collection spliterator()"></a>Collection spliterator()</h2><p>返回Spliterator实例的方法，该实例可用于顺序或并行遍历元素。</p><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法是接口默认方法</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Spliterators.spliterator(<span class="keyword">this</span>, Spliterator.ORDERED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">Spliterator&lt;Integer&gt; spliterator = list.spliterator();</span><br><span class="line"><span class="comment">//创建顺序流</span></span><br><span class="line">Stream&lt;Integer&gt; stream = StreamSupport.stream(spliterator, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//创建并行流</span></span><br><span class="line">Stream&lt;Integer&gt; parallelStream = StreamSupport.stream(spliterator, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="Map-replaceAll-compute-merge-methods"><a href="#Map-replaceAll-compute-merge-methods" class="headerlink" title="Map replaceAll(), compute(), merge() methods"></a>Map replaceAll(), compute(), merge() methods</h2><h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h3><p>替换Map中所有Entry的value值，这个值由旧的key和value计算得出，接收参数 (K, V) -&gt; V</p><h4 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; function)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="keyword">if</span> (function == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> mc = modCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line"><span class="comment">//使用给定的函数替换原来的value值，key不变</span></span><br><span class="line">                e.value = function.apply(e.key, e.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;5&quot;</span>, <span class="string">&quot;E&quot;</span>);</span><br><span class="line"><span class="comment">//replaceAll方法</span></span><br><span class="line">map.replaceAll((s, s2) -&gt; s + s2);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><h4 id="控制台输出-2"><a href="#控制台输出-2" class="headerlink" title="控制台输出"></a>控制台输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的value由key + value替换掉了</span></span><br><span class="line">&#123;<span class="number">1</span>=1A, <span class="number">2</span>=2B, <span class="number">3</span>=3C, <span class="number">4</span>=<span class="number">4D</span>, <span class="number">5</span>=5E&#125;</span><br></pre></td></tr></table></figure><h3 id="compute"><a href="#compute" class="headerlink" title="compute()"></a>compute()</h3><p>是<code>computeIfPresent</code>和<code>computeIfAbsent</code>方法的组合体</p><ul><li>computeIfPresent:如果指定的key不存在，则通过指定的K -&gt; V计算出新的值设置为key的值。</li><li>computeIfPresent:如果指定的key存在，则根据旧的key和value计算新的值newValue, 如果newValue不为null，则设置key新的值为newValue, 如果newValue为null, 则删除该key的值。</li></ul><h4 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;5&quot;</span>, <span class="string">&quot;E&quot;</span>);</span><br><span class="line"><span class="comment">//key存在，根据旧的key和value计算新的值newValue</span></span><br><span class="line">map.compute(<span class="string">&quot;1&quot;</span>, (k, v) -&gt; v + <span class="string">&quot; computed&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;key存在&quot;</span> + map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"><span class="comment">//key不存在，通过指定的K -&gt; V计算出新的值设置为key的值</span></span><br><span class="line">map.compute(<span class="string">&quot;6&quot;</span>, (k, v) -&gt; <span class="string">&quot;F&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;key不存在&quot;</span> + map.get(<span class="string">&quot;6&quot;</span>));</span><br><span class="line"><span class="comment">//key存在，如果newValue为null, 则删除该key的值</span></span><br><span class="line">map.compute(<span class="string">&quot;1&quot;</span>, (k, v) -&gt; <span class="keyword">null</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;key存在，设置为null &quot;</span> + map.get(<span class="string">&quot;1&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="控制台输出-3"><a href="#控制台输出-3" class="headerlink" title="控制台输出"></a>控制台输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key存在A computed</span><br><span class="line">key不存在F</span><br><span class="line">key存在，设置为<span class="keyword">null</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h3><p>如果指定的key不存在，则设置指定的value值，否则根据key的旧的值oldvalue，value计算出新的值newValue, 如果newValue为null, 则删除该key，否则设置key的新值newValue。</p><h4 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;5&quot;</span>, <span class="string">&quot;E&quot;</span>);</span><br><span class="line"><span class="comment">//存在key为1,输出 Amerge</span></span><br><span class="line">System.out.println(map.merge(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;merge&quot;</span>, (k, v) -&gt; k + v));</span><br><span class="line"><span class="comment">//新值为null，删除key，输出 null</span></span><br><span class="line">System.out.println(map.merge(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;merge&quot;</span>, (k, v) -&gt; <span class="keyword">null</span>));</span><br><span class="line"><span class="comment">//不存在key为6，输出 &quot;merge&quot;</span></span><br><span class="line">System.out.println(map.merge(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;merge&quot;</span>, (k, v) -&gt; k + v));</span><br></pre></td></tr></table></figure><h4 id="控制台输出-4"><a href="#控制台输出-4" class="headerlink" title="控制台输出"></a>控制台输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Amerge</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">merge</span><br></pre></td></tr></table></figure><h2 id="Performance-Improvement-for-HashMap-class-with-Key-Collisions"><a href="#Performance-Improvement-for-HashMap-class-with-Key-Collisions" class="headerlink" title="Performance Improvement for HashMap class with Key Collisions"></a>Performance Improvement for HashMap class with Key Collisions</h2><p>具有键冲突的HashMap类的性能改进</p><h1 id="Concurrency-API-improvements-并发API改进"><a href="#Concurrency-API-improvements-并发API改进" class="headerlink" title="Concurrency API improvements(并发API改进)"></a>Concurrency API improvements(并发API改进)</h1><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>JDK8提供的并发友好的HashMap</p><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><p>提供了非常强大的 Future 的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 CompletableFuture 的方法。</p><h2 id="Executors-newWorkStealingPool"><a href="#Executors-newWorkStealingPool" class="headerlink" title="Executors newWorkStealingPool()"></a>Executors newWorkStealingPool()</h2><p>创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要传一个并行级别的参数，如果不传，则被设定为默认的CPU数量。</p><h1 id="Java-IO-improvements-Java-IO-API的改进"><a href="#Java-IO-improvements-Java-IO-API的改进" class="headerlink" title="Java IO improvements(Java IO API的改进)"></a>Java IO improvements(Java IO API的改进)</h1><h2 id="Files-list-Path-dir"><a href="#Files-list-Path-dir" class="headerlink" title="Files.list(Path dir)"></a>Files.list(Path dir)</h2><p>返回一个延迟填充的Stream，其中的元素是目录中的条目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回目录下的元素集合流</span></span><br><span class="line">Stream&lt;Path&gt; list = Files.list(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop&quot;</span>).toPath());</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="Files-lines-Path-path"><a href="#Files-lines-Path-path" class="headerlink" title="Files.lines(Path path)"></a>Files.lines(Path path)</h2><p>从文件中读取所有行作为流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回文件中的所有行数</span></span><br><span class="line">Stream&lt;String&gt; lines = Files.lines(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\new 3.txt&quot;</span>).toPath());</span><br><span class="line">lines.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="Files-find"><a href="#Files-find" class="headerlink" title="Files.find()"></a>Files.find()</h2><p>通过搜索以给定起始文件为根的文件树中的文件，返回使用Path延迟填充的Stream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回符合判断条件的Path流</span></span><br><span class="line">Stream&lt;Path&gt; stream = Files.find(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop&quot;</span>).toPath(),</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        (path, basicFileAttributes) -&gt; basicFileAttributes.isDirectory());</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="BufferedReader-lines"><a href="#BufferedReader-lines" class="headerlink" title="BufferedReader.lines()"></a>BufferedReader.lines()</h2><p>返回一个Stream，其元素是从这个BufferedReader读取的行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回文件中的所有行数,类似Files.lines()</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\new 3.txt&quot;</span>));</span><br><span class="line">Stream&lt;String&gt; stringStream = br.lines();</span><br><span class="line">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ul><li><a href="https://www.journaldev.com/2389/java-8-features-with-examples#java8-collection">Java 8 Features with Examples</a></li><li><a href="https://www.cnblogs.com/yangming1996/p/8031199.html">为并发而生的 ConcurrentHashMap（Java 8）</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html">通过实例理解 JDK8 的 CompletableFuture</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;forEach() method in Iterable interface(Iterable接口中的forEach()方法)&lt;/li&gt;
&lt;li&gt;default and static methods in Interfaces(接口中的默认和静态方法)&lt;/li&gt;
&lt;li&gt;Functional Interfaces and Lambda Expressions(function接口和Lambda表达式)&lt;/li&gt;
&lt;li&gt;Java Stream API for Bulk Data Operations on Collections(用于集合上的批量数据操作的Java Stream API)&lt;/li&gt;
&lt;li&gt;Java Time API&lt;/li&gt;
&lt;li&gt;Collection API improvements&lt;/li&gt;
&lt;li&gt;Concurrency API improvements&lt;/li&gt;
&lt;li&gt;Java IO improvements&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://gcdd1993.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PG数据库常用操作</title>
    <link href="https://gcdd1993.github.io/p/59866/"/>
    <id>https://gcdd1993.github.io/p/59866/</id>
    <published>2019-01-09T11:36:07.000Z</published>
    <updated>2021-06-19T15:18:16.368Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，在开发过程中接触到的一些PG数据库常用操作，以备不时之需。<span id="more"></span></p><h1 id="全量迁移"><a href="#全量迁移" class="headerlink" title="全量迁移"></a>全量迁移</h1><ul><li>备份数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pg_dump -h 172.19.235.145 -U &lt;username&gt; -d &lt;database&gt; &gt; 20180704_dbpe.sql</span><br></pre></td></tr></table></figure><ul><li>正式迁移</li></ul><p>首先要修改备份文件*.sql的owner，防止权限出现错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ psql -h &lt;ip&gt; -U &lt;username&gt; -d &lt;database&gt; -f 20180704_dbpe.sql</span><br></pre></td></tr></table></figure><p>【注意点】该迁移操作会覆盖原来的数据库，所以最好创建一个新库。</p><h1 id="列出所有表名和数据库名"><a href="#列出所有表名和数据库名" class="headerlink" title="列出所有表名和数据库名"></a>列出所有表名和数据库名</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tablename <span class="keyword">from</span> pg_tables <span class="keyword">where</span> schemaname <span class="operator">=</span><span class="string">&#x27;public&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="PostgreSQL-中-有时候想删除数据库（drop-database-swiftliveqaapi-），发现提示“ERROR-database-“xxxxxx”-is-being-accessed-by-other-users-DETAIL-There-are-30-other-sessions-using-the-database-”"><a href="#PostgreSQL-中-有时候想删除数据库（drop-database-swiftliveqaapi-），发现提示“ERROR-database-“xxxxxx”-is-being-accessed-by-other-users-DETAIL-There-are-30-other-sessions-using-the-database-”" class="headerlink" title="PostgreSQL 中 有时候想删除数据库（drop database swiftliveqaapi;），发现提示“ERROR:  database “xxxxxx” is being accessed by other users DETAIL:  There are 30 other sessions using the database.”"></a>PostgreSQL 中 有时候想删除数据库（drop database swiftliveqaapi;），发现提示“ERROR:  database “xxxxxx” is being accessed by other users DETAIL:  There are 30 other sessions using the database.”</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用psql 登录进入， 执行语句：</span><br><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname=<span class="string">&#x27;数据库名&#x27;</span> AND pid&lt;&gt;pg_backend_pid();</span><br><span class="line">然后就可以删除数据库了</span><br></pre></td></tr></table></figure><h1 id="修改表的序列为id最大值"><a href="#修改表的序列为id最大值" class="headerlink" title="修改表的序列为id最大值"></a>修改表的序列为id最大值</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT setval(<span class="string">&#x27;表名_id_seq&#x27;</span>, (SELECT MAX(id) FROM 表名));</span><br></pre></td></tr></table></figure><h1 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">COLUMN_NAME <span class="keyword">AS</span> 列名,</span><br><span class="line">DATA_TYPE <span class="keyword">AS</span> 字段类型,</span><br><span class="line">CHARACTER_MAXIMUM_LENGTH <span class="keyword">AS</span> 长度,</span><br><span class="line">IS_NULLABLE <span class="keyword">AS</span> 是否为空,</span><br><span class="line">COLUMN_DEFAULT <span class="keyword">AS</span> 默认值 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">INFORMATION_SCHEMA.COLUMNS </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">table_schema <span class="operator">=</span> <span class="string">&#x27;public&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="PG-数据库状态，启动，停止"><a href="#PG-数据库状态，启动，停止" class="headerlink" title="PG 数据库状态，启动，停止"></a>PG 数据库状态，启动，停止</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pg_ctlcluster 9.5 main status</span><br><span class="line">$ pg_ctlcluster 9.5 main start</span><br><span class="line">$ pg_ctlcluster 9.5 main stop</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下，在开发过程中接触到的一些PG数据库常用操作，以备不时之需。</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://gcdd1993.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Security无法正常捕捉到UsernameNotFoundException异常</title>
    <link href="https://gcdd1993.github.io/p/31514/"/>
    <id>https://gcdd1993.github.io/p/31514/</id>
    <published>2019-01-08T13:25:54.000Z</published>
    <updated>2021-06-19T15:18:16.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Web应用开发中,安全一直是非常重要的一个方面。在庞大的spring生态圈中，权限校验框架也是非常完善的。其中，spring security是非常好用的。今天记录一下在开发中遇到的一个spring-security相关的问题。<span id="more"></span></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用spring security进行授权登录的时候，发现登录接口无法正常捕捉UsernameNotFoundException异常，捕捉到的一直是BadCredentialsException异常。我们的预期是：</p><ul><li>UsernameNotFoundException -&gt; 用户名错误</li><li>BadCredentialsException -&gt; 密码错误</li></ul><p>贴几个比较重要的代码：</p><h2 id="1-登录业务逻辑"><a href="#1-登录业务逻辑" class="headerlink" title="1. 登录业务逻辑"></a>1. 登录业务逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServiceImpl</span> <span class="keyword">implements</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAuthenticationResponse <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"><span class="comment">//构造spring security需要的UsernamePasswordAuthenticationToken</span></span><br><span class="line">        UsernamePasswordAuthenticationToken upToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line"><span class="comment">//调用authenticationManager.authenticate(upToken)方法验证</span></span><br><span class="line"><span class="comment">//该方法将会执行UserDetailsService的loadUserByUsername验证用户名</span></span><br><span class="line"><span class="comment">//以及PasswordEncoder的matches方法验证密码</span></span><br><span class="line">        val authenticate = authenticationManager.authenticate(upToken);</span><br><span class="line">        JwtUser userDetails = (JwtUser) authenticate.getPrincipal();</span><br><span class="line">        val token = jwtTokenUtil.generateToken(userDetails);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtAuthenticationResponse(token, userDetails.getId(), userDetails.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-spring-security-的UserDetailsService-实现类"><a href="#2-spring-security-的UserDetailsService-实现类" class="headerlink" title="2. spring security 的UserDetailsService 实现类"></a>2. spring security 的UserDetailsService 实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        AbstractUser abstractUser = userRepository.findByUsername(username);</span><br><span class="line"><span class="comment">//如果通过用户名找不到用户，则抛出UsernameNotFoundException异常</span></span><br><span class="line">        <span class="keyword">if</span> (abstractUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(String.format(<span class="string">&quot;No abstractUser found with username &#x27;%s&#x27;.&quot;</span>, username));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JwtUserFactory.create(abstractUser);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-登录接口"><a href="#3-登录接口" class="headerlink" title="3. 登录接口"></a>3. 登录接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> JwtAuthenticationResponse jsonResponse = authService.login(authenticationRequest.getUsername(), authenticationRequest.getPassword());</span><br><span class="line">    <span class="comment">//存入redis</span></span><br><span class="line">    redisService.setToken(jsonResponse.getToken());</span><br><span class="line">    <span class="keyword">return</span> ok(jsonResponse);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BadCredentialsException e) &#123;</span><br><span class="line"><span class="comment">//捕捉到BadCredentialsException，密码不正确</span></span><br><span class="line">    <span class="keyword">return</span> forbidden(LOGIN_PASSWORD_ERROR, request);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UsernameNotFoundException e) &#123;</span><br><span class="line"><span class="comment">//捕捉到UsernameNotFoundException，用户名不正确</span></span><br><span class="line">    <span class="keyword">return</span> forbidden(LOGIN_USERNAME_ERROR, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在上述代码中，如果用户名错误，应该执行"><a href="#在上述代码中，如果用户名错误，应该执行" class="headerlink" title="在上述代码中，如果用户名错误，应该执行"></a>在上述代码中，如果用户名错误，应该执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (UsernameNotFoundException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> forbidden(LOGIN_USERNAME_ERROR, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果密码错误，应该执行"><a href="#如果密码错误，应该执行" class="headerlink" title="如果密码错误，应该执行"></a>如果密码错误，应该执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (BadCredentialsException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> forbidden(LOGIN_PASSWORD_ERROR, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，不管是抛出什么错，最后抓到的都是BadCredentialsException</p><h1 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h1><h2 id="debug大法"><a href="#debug大法" class="headerlink" title="debug大法"></a>debug大法</h2><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p><img data-src="https://i.imgur.com/eRNlVGd.png"></p><h3 id="跟踪"><a href="#跟踪" class="headerlink" title="跟踪"></a>跟踪</h3><p>经过步进法跟踪代码，发现问题所在，位于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AbstractUserDetailsAuthenticationProvider</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br></pre></td></tr></table></figure><p><img data-src="https://i.imgur.com/7somN4i.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ol><li>loadUserByUsername方法确实抛出了UsernameNotFoundException</li><li>走到AbstractUserDetailsAuthenticationProvider的authenticate方法的时候，如果hideUserNotFoundExceptions = true，直接就覆盖了UsernameNotFoundException异常并抛出BadCredentialsException异常，这也就解释了，为什么总是捕捉到BadCredentialsException异常</li></ol><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>既然已经找到了是因为<code>hideUserNotFoundExceptions = true</code>导致的问题，那把<code>hideUserNotFoundExceptions = false</code>不就完事了吗？</p><h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p><a href="https://stackoverflow.com/questions/17439628/spring-security-custom-exception-message-from-userdetailsservice" title="参考stackoverflow大神回答">参考stackoverflow大神回答</a></p><h3 id="修改WebSecurityConfig配置，添加AuthenticationProvider-Bean"><a href="#修改WebSecurityConfig配置，添加AuthenticationProvider-Bean" class="headerlink" title="修改WebSecurityConfig配置，添加AuthenticationProvider Bean"></a>修改WebSecurityConfig配置，添加AuthenticationProvider Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">daoAuthenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DaoAuthenticationProvider daoAuthenticationProvider = <span class="keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">    daoAuthenticationProvider.setUserDetailsService(userDetailsService);</span><br><span class="line">    daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">    daoAuthenticationProvider.setHideUserNotFoundExceptions(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> daoAuthenticationProvider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置AuthenticationProvider-Bean"><a href="#配置AuthenticationProvider-Bean" class="headerlink" title="配置AuthenticationProvider Bean"></a>配置AuthenticationProvider Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAuthentication</span><span class="params">(AuthenticationManagerBuilder authenticationManagerBuilder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    authenticationManagerBuilder</span><br><span class="line">            .authenticationProvider(daoAuthenticationProvider());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>由于以前项目中也是一样的技术栈，而且代码也差不多，登录这段逻辑可以说是完全相同，不过之前就一直都没有这个问题。反复查看之后发现，在login的代码有些不同</p><p>在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val authenticate = authenticationManager.authenticate(upToken);</span><br></pre></td></tr></table></figure><p>前面还有一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行UserDetailsService的loadUserByUsername验证用户名</span></span><br><span class="line">userDetailsService.loadUserByUsername(authenticationRequest.getUsername());</span><br></pre></td></tr></table></figure><p>该方法会直接抛出UsernameNotFoundException，而不走spring security的AbstractUserDetailsAuthenticationProvider，也就不存在被转换为BadCredentialsException了。</p><p>但是这个方案有个缺点，</p><p>如果验证用户名通过以后，再次调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val authenticate = authenticationManager.authenticate(upToken);</span><br></pre></td></tr></table></figure><p>还会再执行一遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userDetailsService.loadUserByUsername(authenticationRequest.getUsername());</span><br></pre></td></tr></table></figure><p>该操作是冗余的，产生了不必要的数据库查询工作。</p><h2 id="推荐使用方案1"><a href="#推荐使用方案1" class="headerlink" title="推荐使用方案1"></a>推荐使用方案1</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Web应用开发中,安全一直是非常重要的一个方面。在庞大的spring生态圈中，权限校验框架也是非常完善的。其中，spring security是非常好用的。今天记录一下在开发中遇到的一个spring-security相关的问题。</summary>
    
    
    
    <category term="工作" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Spring-Security" scheme="https://gcdd1993.github.io/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>常用软件集合</title>
    <link href="https://gcdd1993.github.io/p/37491/"/>
    <id>https://gcdd1993.github.io/p/37491/</id>
    <published>2019-01-08T08:37:14.000Z</published>
    <updated>2021-06-19T15:18:16.376Z</updated>
    
    <content type="html"><![CDATA[<p>常用软件工具收藏集，收藏了在工作生活中遇到的好用实用的软件。<span id="more"></span></p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul><li><a href="https://www.lanzous.com/i2eptwh">BeyondCompare破解版</a></li><li><a href="https://www.lanzous.com/i2eptrc">Navicat Premium 12破解版</a></li><li><a href="https://www.lanzous.com/b547205/">markdown pad2破解版</a> 密码:23w2</li><li><a href="https://www.lanzous.com/b539472/">RedisDesktopManager 免费版</a> 密码:ciq1</li><li><a href="https://www.lanzous.com/i2q4x3i">QTransate翻译工具</a></li><li><a href="https://www.lanzous.com/i2epu5g">正则表达式测试工具</a></li><li><a href="https://www.lanzous.com/i2epu2d">draw.io拓扑图工具</a></li><li><a href="https://www.lanzous.com/i2eptdi">DevCenter cassandra管理工具</a></li><li><a href="https://www.lanzous.com/i2en5xc">PostMan便携版</a></li><li><a href="https://www.lanzous.com/i2q4xyj">Git</a></li><li><a href="https://www.lanzous.com/i2q4y1c">SourceTree(Git Gui工具)</a></li><li><a href="https://www.lanzous.com/i2v3p2d">XShell5破解版</a></li></ul><h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><ul><li><a href="https://www.lanzous.com/i2q4y6h">RSS订阅工具(只限windows)</a></li><li><a href="https://www.lanzous.com/b539477">科学上网ShadowSocks</a></li><li><a href="https://www.lanzous.com/i2saiib">win10激活工具</a></li><li><a href="https://www.lanzous.com/i2t3ukj">Office安装工具</a></li><li><a href="https://www.lanzous.com/i2flrje">OCR文字识别工具</a></li><li><a href="https://www.lanzous.com/i2flr6b">GIF录制工具</a></li><li><a href="https://www.lanzous.com/i2fls4f">冰点文库下载器破解版</a></li></ul><h1 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h1><ul><li><a href="https://www.lanzous.com/i2zaiyj">现代化Markdown编辑工具</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;常用软件工具收藏集，收藏了在工作生活中遇到的好用实用的软件。</summary>
    
    
    
    <category term="工具" scheme="https://gcdd1993.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="软件" scheme="https://gcdd1993.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal精确计算工具类</title>
    <link href="https://gcdd1993.github.io/p/14256/"/>
    <id>https://gcdd1993.github.io/p/14256/</id>
    <published>2019-01-08T07:28:49.000Z</published>
    <updated>2021-06-19T15:18:16.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际开发中，遇到例如货币，统计等商业计算的时候，一般需要采用java.math.BigDecimal类来进行精确计算。而这类操作通常都是可预知的，也就是通用的。所以，写了个工具类来方便以后的工作。<br>这是仓库地址：<a href="https://github.com/gcdd1993/Precise-calculation">仓库地址</a></p><span id="more"></span><h1 id="BigDecimal的构建"><a href="#BigDecimal的构建" class="headerlink" title="BigDecimal的构建"></a>BigDecimal的构建</h1><p>一般而言，我们主要从int,long,double,float来进行计算，在构建的时候推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BigDecimal <span class="title">BigDecimal</span><span class="params">(String s)</span></span>;</span><br></pre></td></tr></table></figure><p>因为通过double构造会损失精度，而String构造是固定的值。<br>创建以下方法作为通用BigDecimal转化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number -&gt; BigDecimal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function">BigDecimal <span class="title">transform</span><span class="params">(T v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Double) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(Double.toString((Double) v));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(Integer.toString((Integer) v));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(Long.toString((Long) v));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Short) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(Short.toString((Short) v));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v <span class="keyword">instanceof</span> Float) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(Float.toString((Float) v));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (BigDecimal) v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BigDecimal方法"><a href="#BigDecimal方法" class="headerlink" title="BigDecimal方法"></a>BigDecimal方法</h1><p>计算类型加减乘除四种，BigDecimal提供的方法也是围绕这四种计算类型设计的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BigDecimal <span class="title">add</span><span class="params">(BigDecimal augend)</span> <span class="comment">//加</span></span></span><br><span class="line"><span class="function">BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal subtrahend)</span> <span class="comment">//减</span></span></span><br><span class="line"><span class="function">BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal multiplicand)</span> <span class="comment">//乘</span></span></span><br><span class="line"><span class="function">BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor, <span class="keyword">int</span> scale, RoundingMode roundingMode)</span> <span class="comment">//除</span></span></span><br></pre></td></tr></table></figure><p>工具类在加减乘除基础上，提供了</p><ol><li>链式计算，类似JDK8 lamada api，爽快丝滑的编程体验</li><li>支持集合求和、求平均</li><li>支持复合计算，例如2*(2+8)</li></ol><h1 id="BigDecimal精确计算工具类实用案例"><a href="#BigDecimal精确计算工具类实用案例" class="headerlink" title="BigDecimal精确计算工具类实用案例"></a>BigDecimal精确计算工具类实用案例</h1><h2 id="精确转换为BigDecimal，不指定精度"><a href="#精确转换为BigDecimal，不指定精度" class="headerlink" title="精确转换为BigDecimal，不指定精度"></a>精确转换为BigDecimal，不指定精度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(PreciseCalculations.transform(<span class="number">121.11</span>)); <span class="comment">//转化double -&gt; 121.11</span></span><br><span class="line">System.out.println(PreciseCalculations.transform(Integer.MAX_VALUE)); <span class="comment">//转化int -&gt; 2147483647</span></span><br><span class="line">System.out.println(PreciseCalculations.transform(Short.MAX_VALUE)); <span class="comment">//转化Short -&gt; 32767</span></span><br><span class="line">System.out.println(PreciseCalculations.transform(Long.MAX_VALUE)); <span class="comment">//转化long -&gt; 9223372036854775807</span></span><br><span class="line">System.out.println(PreciseCalculations.transform(<span class="number">121.19F</span>)); <span class="comment">//转化float -&gt; 121.19</span></span><br></pre></td></tr></table></figure><h2 id="精确转换为BigDecimal，指定精度"><a href="#精确转换为BigDecimal，指定精度" class="headerlink" title="精确转换为BigDecimal，指定精度"></a>精确转换为BigDecimal，指定精度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(PreciseCalculations.transform(<span class="number">121.1111111111</span>, <span class="number">5</span>)); <span class="comment">//精度大于指定精度 -&gt; 121.11111</span></span><br><span class="line">System.out.println(PreciseCalculations.transform(<span class="number">121.11</span>, <span class="number">5</span>)); <span class="comment">//精度小于指定精度，补零 -&gt; 121.11000</span></span><br></pre></td></tr></table></figure><h2 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(PreciseCalculations.add(<span class="number">12.11</span>, <span class="number">12.11</span>)); <span class="comment">//加法 -&gt; 24.22</span></span><br><span class="line">System.out.println(PreciseCalculations.subtract(<span class="number">12.11</span>, <span class="number">12.11</span>)); <span class="comment">//减法 -&gt; 0.00</span></span><br><span class="line">System.out.println(PreciseCalculations.multiply(<span class="number">12.11</span>, <span class="number">12.11</span>)); <span class="comment">//乘法 -&gt; 146.6521</span></span><br><span class="line">System.out.println(PreciseCalculations.divide(<span class="number">12.11</span>, <span class="number">2.35</span>, <span class="number">5</span>)); <span class="comment">//除法 -&gt; 5.15319</span></span><br></pre></td></tr></table></figure><h2 id="负数计算"><a href="#负数计算" class="headerlink" title="负数计算"></a>负数计算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -1.11 * 13 - 90 = -104.43</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> PreciseCalculation(-<span class="number">1.11</span>).multiply(<span class="number">13</span>).add(-<span class="number">90</span>).getValue()); </span><br><span class="line"><span class="comment">// -11.11111111 + 90 = 78.88888889</span></span><br><span class="line">System.out.println(PreciseCalculations.add(-<span class="number">11.11111111</span>,<span class="number">90</span>));</span><br></pre></td></tr></table></figure><h2 id="集合-求和-求平均值"><a href="#集合-求和-求平均值" class="headerlink" title="集合 求和 求平均值"></a>集合 求和 求平均值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Double&gt; list = Arrays.asList(<span class="number">12.11D</span>, <span class="number">13.11D</span>, <span class="number">14.11D</span>, <span class="number">15.321312D</span>);</span><br><span class="line">System.out.println(PreciseCalculations.sum(list)); <span class="comment">//求和 -&gt; Optional[54.651312]</span></span><br><span class="line">System.out.println(PreciseCalculations.average(list)); <span class="comment">//平均值 -&gt; Optional[13.66283]</span></span><br><span class="line">System.out.println(PreciseCalculations.average(Collections.emptyList())); <span class="comment">//空集合 -&gt; Optional.empty</span></span><br></pre></td></tr></table></figure><h2 id="复合计算"><a href="#复合计算" class="headerlink" title="复合计算"></a>复合计算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算 121.11 * 13 / 60 + 100 - 12 = 114.24050</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> PreciseCalculation(<span class="number">121.11</span>).multiply(<span class="number">13</span>).divide(<span class="number">60</span>, <span class="number">5</span>).add(<span class="number">100</span>).subtract(<span class="number">12</span>).getValue());</span><br><span class="line"><span class="comment">//计算 121.11 * 128.59 / (100 + 12) - 100 = 39.04942</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> PreciseCalculation(<span class="number">121.11</span>).multiply(<span class="number">128.59</span>).divide(</span><br><span class="line">       <span class="keyword">new</span> PreciseCalculation(<span class="number">100</span>).add(<span class="number">12</span>), <span class="number">5</span>).subtract(<span class="number">100</span>).getValue());</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>PreciseCalculation 核心类，提供加减乘除、集合精确计算方法，内部维护value值，每次计算该value都会改变。</li><li>PreciseCalculations 基于上述的工具类，方便简单计算时使用。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在实际开发中，遇到例如货币，统计等商业计算的时候，一般需要采用java.math.BigDecimal类来进行精确计算。而这类操作通常都是可预知的，也就是通用的。所以，写了个工具类来方便以后的工作。&lt;br&gt;这是仓库地址：&lt;a href=&quot;https://github.com/gcdd1993/Precise-calculation&quot;&gt;仓库地址&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://gcdd1993.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JAVA" scheme="https://gcdd1993.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
